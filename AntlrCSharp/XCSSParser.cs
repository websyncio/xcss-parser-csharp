//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\dev\xcss-parser-csharp\AntlrCSharp\XCSSParser.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class XCSSParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		OpenBracket=1, CloseBracket=2, OpenParen=3, CloseParen=4, OpenBrace=5, 
		CloseBrace=6, SemiColon=7, Equal=8, Colon=9, Dot=10, Multiply=11, Divide=12, 
		Pipe=13, Underscore=14, Comment=15, Url=16, Space=17, Cdo=18, Cdc=19, 
		Includes=20, DashMatch=21, Hash=22, Import=23, Page=24, Media=25, Namespace=26, 
		Charset=27, Important=28, Percentage=29, Url_=30, UnicodeRange=31, MediaOnly=32, 
		Not=33, And=34, Dimension=35, UnknownDimension=36, Plus=37, Minus=38, 
		Greater=39, Comma=40, Tilde=41, PseudoNot=42, Number=43, String_=44, PrefixMatch=45, 
		SuffixMatch=46, SubstringMatch=47, FontFace=48, Supports=49, Or=50, Keyframes=51, 
		From=52, To=53, Calc=54, Viewport=55, CounterStyle=56, FontFeatureValues=57, 
		DxImageTransform=58, AtKeyword=59, Variable=60, Var=61, Ident=62, Function_=63, 
		UnexpectedCharacter=64;
	public const int
		RULE_stylesheet = 0, RULE_charset = 1, RULE_imports = 2, RULE_namespace_ = 3, 
		RULE_namespacePrefix = 4, RULE_media = 5, RULE_mediaQueryList = 6, RULE_mediaQuery = 7, 
		RULE_mediaType = 8, RULE_mediaExpression = 9, RULE_mediaFeature = 10, 
		RULE_page = 11, RULE_pseudoPage = 12, RULE_selectorGroup = 13, RULE_selector = 14, 
		RULE_combinator = 15, RULE_simpleSelectorSequence = 16, RULE_typeSelector = 17, 
		RULE_typeNamespacePrefix = 18, RULE_elementName = 19, RULE_universal = 20, 
		RULE_className = 21, RULE_attrib = 22, RULE_pseudo = 23, RULE_functionalPseudo = 24, 
		RULE_expression = 25, RULE_negation = 26, RULE_negationArg = 27, RULE_operator_ = 28, 
		RULE_property_ = 29, RULE_ruleset = 30, RULE_declarationList = 31, RULE_declaration = 32, 
		RULE_prio = 33, RULE_value = 34, RULE_expr = 35, RULE_term = 36, RULE_function_ = 37, 
		RULE_dxImageTransform = 38, RULE_hexcolor = 39, RULE_number = 40, RULE_percentage = 41, 
		RULE_dimension = 42, RULE_unknownDimension = 43, RULE_any_ = 44, RULE_atRule = 45, 
		RULE_unused = 46, RULE_block = 47, RULE_nestedStatement = 48, RULE_groupRuleBody = 49, 
		RULE_supportsRule = 50, RULE_supportsCondition = 51, RULE_supportsConditionInParens = 52, 
		RULE_supportsNegation = 53, RULE_supportsConjunction = 54, RULE_supportsDisjunction = 55, 
		RULE_supportsDeclarationCondition = 56, RULE_generalEnclosed = 57, RULE_url = 58, 
		RULE_var_ = 59, RULE_calc = 60, RULE_calcSum = 61, RULE_calcProduct = 62, 
		RULE_calcValue = 63, RULE_fontFaceRule = 64, RULE_fontFaceDeclaration = 65, 
		RULE_keyframesRule = 66, RULE_keyframeBlock = 67, RULE_keyframeSelector = 68, 
		RULE_viewport = 69, RULE_counterStyle = 70, RULE_fontFeatureValuesRule = 71, 
		RULE_fontFamilyNameList = 72, RULE_fontFamilyName = 73, RULE_featureValueBlock = 74, 
		RULE_featureType = 75, RULE_featureValueDefinition = 76, RULE_ident = 77, 
		RULE_ws = 78;
	public static readonly string[] ruleNames = {
		"stylesheet", "charset", "imports", "namespace_", "namespacePrefix", "media", 
		"mediaQueryList", "mediaQuery", "mediaType", "mediaExpression", "mediaFeature", 
		"page", "pseudoPage", "selectorGroup", "selector", "combinator", "simpleSelectorSequence", 
		"typeSelector", "typeNamespacePrefix", "elementName", "universal", "className", 
		"attrib", "pseudo", "functionalPseudo", "expression", "negation", "negationArg", 
		"operator_", "property_", "ruleset", "declarationList", "declaration", 
		"prio", "value", "expr", "term", "function_", "dxImageTransform", "hexcolor", 
		"number", "percentage", "dimension", "unknownDimension", "any_", "atRule", 
		"unused", "block", "nestedStatement", "groupRuleBody", "supportsRule", 
		"supportsCondition", "supportsConditionInParens", "supportsNegation", 
		"supportsConjunction", "supportsDisjunction", "supportsDeclarationCondition", 
		"generalEnclosed", "url", "var_", "calc", "calcSum", "calcProduct", "calcValue", 
		"fontFaceRule", "fontFaceDeclaration", "keyframesRule", "keyframeBlock", 
		"keyframeSelector", "viewport", "counterStyle", "fontFeatureValuesRule", 
		"fontFamilyNameList", "fontFamilyName", "featureValueBlock", "featureType", 
		"featureValueDefinition", "ident", "ws"
	};

	private static readonly string[] _LiteralNames = {
		null, "'['", "']'", "'('", "')'", "'{'", "'}'", "';'", "'='", "':'", "'.'", 
		"'*'", "'/'", "'|'", "'_'", null, null, null, "'<!--'", "'-->'", "'~='", 
		"'|='", null, null, null, null, null, "'@charset '", null, null, "'url('", 
		null, null, null, null, null, null, "'+'", "'-'", "'>'", "','", "'~'", 
		null, null, null, "'^='", "'$='", "'*='", null, null, null, null, null, 
		null, "'calc('", null, null, null, null, null, null, "'var('"
	};
	private static readonly string[] _SymbolicNames = {
		null, "OpenBracket", "CloseBracket", "OpenParen", "CloseParen", "OpenBrace", 
		"CloseBrace", "SemiColon", "Equal", "Colon", "Dot", "Multiply", "Divide", 
		"Pipe", "Underscore", "Comment", "Url", "Space", "Cdo", "Cdc", "Includes", 
		"DashMatch", "Hash", "Import", "Page", "Media", "Namespace", "Charset", 
		"Important", "Percentage", "Url_", "UnicodeRange", "MediaOnly", "Not", 
		"And", "Dimension", "UnknownDimension", "Plus", "Minus", "Greater", "Comma", 
		"Tilde", "PseudoNot", "Number", "String_", "PrefixMatch", "SuffixMatch", 
		"SubstringMatch", "FontFace", "Supports", "Or", "Keyframes", "From", "To", 
		"Calc", "Viewport", "CounterStyle", "FontFeatureValues", "DxImageTransform", 
		"AtKeyword", "Variable", "Var", "Ident", "Function_", "UnexpectedCharacter"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "XCSSParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static XCSSParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public XCSSParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public XCSSParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class StylesheetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public WsContext ws() {
			return GetRuleContext<WsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(XCSSParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CharsetContext[] charset() {
			return GetRuleContexts<CharsetContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CharsetContext charset(int i) {
			return GetRuleContext<CharsetContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportsContext[] imports() {
			return GetRuleContexts<ImportsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportsContext imports(int i) {
			return GetRuleContext<ImportsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Namespace_Context[] namespace_() {
			return GetRuleContexts<Namespace_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Namespace_Context namespace_(int i) {
			return GetRuleContext<Namespace_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NestedStatementContext[] nestedStatement() {
			return GetRuleContexts<NestedStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NestedStatementContext nestedStatement(int i) {
			return GetRuleContext<NestedStatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comment() { return GetTokens(XCSSParser.Comment); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comment(int i) {
			return GetToken(XCSSParser.Comment, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Space() { return GetTokens(XCSSParser.Space); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Space(int i) {
			return GetToken(XCSSParser.Space, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Cdo() { return GetTokens(XCSSParser.Cdo); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Cdo(int i) {
			return GetToken(XCSSParser.Cdo, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Cdc() { return GetTokens(XCSSParser.Cdc); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Cdc(int i) {
			return GetToken(XCSSParser.Cdc, i);
		}
		public StylesheetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stylesheet; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXCSSParserVisitor<TResult> typedVisitor = visitor as IXCSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStylesheet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StylesheetContext stylesheet() {
		StylesheetContext _localctx = new StylesheetContext(Context, State);
		EnterRule(_localctx, 0, RULE_stylesheet);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 158;
			ws();
			State = 168;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Charset) {
				{
				{
				State = 159;
				charset();
				State = 163;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Comment) | (1L << Space) | (1L << Cdo) | (1L << Cdc))) != 0)) {
					{
					{
					State = 160;
					_la = TokenStream.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Comment) | (1L << Space) | (1L << Cdo) | (1L << Cdc))) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					State = 165;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				}
				State = 170;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 180;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Import) {
				{
				{
				State = 171;
				imports();
				State = 175;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Comment) | (1L << Space) | (1L << Cdo) | (1L << Cdc))) != 0)) {
					{
					{
					State = 172;
					_la = TokenStream.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Comment) | (1L << Space) | (1L << Cdo) | (1L << Cdc))) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					State = 177;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				}
				State = 182;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 192;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Namespace) {
				{
				{
				State = 183;
				namespace_();
				State = 187;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Comment) | (1L << Space) | (1L << Cdo) | (1L << Cdc))) != 0)) {
					{
					{
					State = 184;
					_la = TokenStream.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Comment) | (1L << Space) | (1L << Cdo) | (1L << Cdc))) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					State = 189;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				}
				State = 194;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 204;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OpenBracket) | (1L << OpenParen) | (1L << OpenBrace) | (1L << Colon) | (1L << Dot) | (1L << Multiply) | (1L << Pipe) | (1L << Url) | (1L << Includes) | (1L << DashMatch) | (1L << Hash) | (1L << Page) | (1L << Media) | (1L << Percentage) | (1L << Url_) | (1L << UnicodeRange) | (1L << MediaOnly) | (1L << Not) | (1L << And) | (1L << Dimension) | (1L << UnknownDimension) | (1L << Plus) | (1L << Minus) | (1L << PseudoNot) | (1L << Number) | (1L << String_) | (1L << FontFace) | (1L << Supports) | (1L << Or) | (1L << Keyframes) | (1L << From) | (1L << To) | (1L << Viewport) | (1L << CounterStyle) | (1L << FontFeatureValues) | (1L << AtKeyword) | (1L << Ident) | (1L << Function_))) != 0)) {
				{
				{
				State = 195;
				nestedStatement();
				State = 199;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Comment) | (1L << Space) | (1L << Cdo) | (1L << Cdc))) != 0)) {
					{
					{
					State = 196;
					_la = TokenStream.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Comment) | (1L << Space) | (1L << Cdo) | (1L << Cdc))) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					State = 201;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				}
				State = 206;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 207;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CharsetContext : ParserRuleContext {
		public CharsetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_charset; } }
	 
		public CharsetContext() { }
		public virtual void CopyFrom(CharsetContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BadCharsetContext : CharsetContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Charset() { return GetToken(XCSSParser.Charset, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WsContext[] ws() {
			return GetRuleContexts<WsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WsContext ws(int i) {
			return GetRuleContext<WsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String_() { return GetToken(XCSSParser.String_, 0); }
		public BadCharsetContext(CharsetContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXCSSParserVisitor<TResult> typedVisitor = visitor as IXCSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBadCharset(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GoodCharsetContext : CharsetContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Charset() { return GetToken(XCSSParser.Charset, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WsContext[] ws() {
			return GetRuleContexts<WsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WsContext ws(int i) {
			return GetRuleContext<WsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String_() { return GetToken(XCSSParser.String_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemiColon() { return GetToken(XCSSParser.SemiColon, 0); }
		public GoodCharsetContext(CharsetContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXCSSParserVisitor<TResult> typedVisitor = visitor as IXCSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGoodCharset(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CharsetContext charset() {
		CharsetContext _localctx = new CharsetContext(Context, State);
		EnterRule(_localctx, 2, RULE_charset);
		try {
			State = 221;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				_localctx = new GoodCharsetContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 209;
				Match(Charset);
				State = 210;
				ws();
				State = 211;
				Match(String_);
				State = 212;
				ws();
				State = 213;
				Match(SemiColon);
				State = 214;
				ws();
				}
				break;
			case 2:
				_localctx = new BadCharsetContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 216;
				Match(Charset);
				State = 217;
				ws();
				State = 218;
				Match(String_);
				State = 219;
				ws();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportsContext : ParserRuleContext {
		public ImportsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_imports; } }
	 
		public ImportsContext() { }
		public virtual void CopyFrom(ImportsContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BadImportContext : ImportsContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Import() { return GetToken(XCSSParser.Import, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WsContext[] ws() {
			return GetRuleContexts<WsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WsContext ws(int i) {
			return GetRuleContext<WsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MediaQueryListContext mediaQueryList() {
			return GetRuleContext<MediaQueryListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String_() { return GetToken(XCSSParser.String_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UrlContext url() {
			return GetRuleContext<UrlContext>(0);
		}
		public BadImportContext(ImportsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXCSSParserVisitor<TResult> typedVisitor = visitor as IXCSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBadImport(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GoodImportContext : ImportsContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Import() { return GetToken(XCSSParser.Import, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WsContext[] ws() {
			return GetRuleContexts<WsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WsContext ws(int i) {
			return GetRuleContext<WsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MediaQueryListContext mediaQueryList() {
			return GetRuleContext<MediaQueryListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemiColon() { return GetToken(XCSSParser.SemiColon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String_() { return GetToken(XCSSParser.String_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UrlContext url() {
			return GetRuleContext<UrlContext>(0);
		}
		public GoodImportContext(ImportsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXCSSParserVisitor<TResult> typedVisitor = visitor as IXCSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGoodImport(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportsContext imports() {
		ImportsContext _localctx = new ImportsContext(Context, State);
		EnterRule(_localctx, 4, RULE_imports);
		try {
			State = 261;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				_localctx = new GoodImportContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 223;
				Match(Import);
				State = 224;
				ws();
				State = 227;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case String_:
					{
					State = 225;
					Match(String_);
					}
					break;
				case Url:
				case Url_:
					{
					State = 226;
					url();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 229;
				ws();
				State = 230;
				mediaQueryList();
				State = 231;
				Match(SemiColon);
				State = 232;
				ws();
				}
				break;
			case 2:
				_localctx = new GoodImportContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 234;
				Match(Import);
				State = 235;
				ws();
				State = 238;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case String_:
					{
					State = 236;
					Match(String_);
					}
					break;
				case Url:
				case Url_:
					{
					State = 237;
					url();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 240;
				ws();
				State = 241;
				Match(SemiColon);
				State = 242;
				ws();
				}
				break;
			case 3:
				_localctx = new BadImportContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 244;
				Match(Import);
				State = 245;
				ws();
				State = 248;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case String_:
					{
					State = 246;
					Match(String_);
					}
					break;
				case Url:
				case Url_:
					{
					State = 247;
					url();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 250;
				ws();
				State = 251;
				mediaQueryList();
				}
				break;
			case 4:
				_localctx = new BadImportContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 253;
				Match(Import);
				State = 254;
				ws();
				State = 257;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case String_:
					{
					State = 255;
					Match(String_);
					}
					break;
				case Url:
				case Url_:
					{
					State = 256;
					url();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 259;
				ws();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Namespace_Context : ParserRuleContext {
		public Namespace_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespace_; } }
	 
		public Namespace_Context() { }
		public virtual void CopyFrom(Namespace_Context context) {
			base.CopyFrom(context);
		}
	}
	public partial class GoodNamespaceContext : Namespace_Context {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Namespace() { return GetToken(XCSSParser.Namespace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WsContext[] ws() {
			return GetRuleContexts<WsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WsContext ws(int i) {
			return GetRuleContext<WsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemiColon() { return GetToken(XCSSParser.SemiColon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String_() { return GetToken(XCSSParser.String_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UrlContext url() {
			return GetRuleContext<UrlContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespacePrefixContext namespacePrefix() {
			return GetRuleContext<NamespacePrefixContext>(0);
		}
		public GoodNamespaceContext(Namespace_Context context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXCSSParserVisitor<TResult> typedVisitor = visitor as IXCSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGoodNamespace(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BadNamespaceContext : Namespace_Context {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Namespace() { return GetToken(XCSSParser.Namespace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WsContext[] ws() {
			return GetRuleContexts<WsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WsContext ws(int i) {
			return GetRuleContext<WsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String_() { return GetToken(XCSSParser.String_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UrlContext url() {
			return GetRuleContext<UrlContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NamespacePrefixContext namespacePrefix() {
			return GetRuleContext<NamespacePrefixContext>(0);
		}
		public BadNamespaceContext(Namespace_Context context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXCSSParserVisitor<TResult> typedVisitor = visitor as IXCSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBadNamespace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Namespace_Context namespace_() {
		Namespace_Context _localctx = new Namespace_Context(Context, State);
		EnterRule(_localctx, 6, RULE_namespace_);
		int _la;
		try {
			State = 291;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				_localctx = new GoodNamespaceContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 263;
				Match(Namespace);
				State = 264;
				ws();
				State = 268;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MediaOnly) | (1L << Not) | (1L << And) | (1L << Or) | (1L << From) | (1L << To) | (1L << Ident))) != 0)) {
					{
					State = 265;
					namespacePrefix();
					State = 266;
					ws();
					}
				}

				State = 272;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case String_:
					{
					State = 270;
					Match(String_);
					}
					break;
				case Url:
				case Url_:
					{
					State = 271;
					url();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 274;
				ws();
				State = 275;
				Match(SemiColon);
				State = 276;
				ws();
				}
				break;
			case 2:
				_localctx = new BadNamespaceContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 278;
				Match(Namespace);
				State = 279;
				ws();
				State = 283;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MediaOnly) | (1L << Not) | (1L << And) | (1L << Or) | (1L << From) | (1L << To) | (1L << Ident))) != 0)) {
					{
					State = 280;
					namespacePrefix();
					State = 281;
					ws();
					}
				}

				State = 287;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case String_:
					{
					State = 285;
					Match(String_);
					}
					break;
				case Url:
				case Url_:
					{
					State = 286;
					url();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 289;
				ws();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespacePrefixContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		public NamespacePrefixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespacePrefix; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXCSSParserVisitor<TResult> typedVisitor = visitor as IXCSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespacePrefix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespacePrefixContext namespacePrefix() {
		NamespacePrefixContext _localctx = new NamespacePrefixContext(Context, State);
		EnterRule(_localctx, 8, RULE_namespacePrefix);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 293;
			ident();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MediaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Media() { return GetToken(XCSSParser.Media, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WsContext[] ws() {
			return GetRuleContexts<WsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WsContext ws(int i) {
			return GetRuleContext<WsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MediaQueryListContext mediaQueryList() {
			return GetRuleContext<MediaQueryListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GroupRuleBodyContext groupRuleBody() {
			return GetRuleContext<GroupRuleBodyContext>(0);
		}
		public MediaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_media; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXCSSParserVisitor<TResult> typedVisitor = visitor as IXCSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMedia(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MediaContext media() {
		MediaContext _localctx = new MediaContext(Context, State);
		EnterRule(_localctx, 10, RULE_media);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 295;
			Match(Media);
			State = 296;
			ws();
			State = 297;
			mediaQueryList();
			State = 298;
			groupRuleBody();
			State = 299;
			ws();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MediaQueryListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public WsContext[] ws() {
			return GetRuleContexts<WsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WsContext ws(int i) {
			return GetRuleContext<WsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MediaQueryContext[] mediaQuery() {
			return GetRuleContexts<MediaQueryContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MediaQueryContext mediaQuery(int i) {
			return GetRuleContext<MediaQueryContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(XCSSParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(XCSSParser.Comma, i);
		}
		public MediaQueryListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mediaQueryList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXCSSParserVisitor<TResult> typedVisitor = visitor as IXCSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMediaQueryList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MediaQueryListContext mediaQueryList() {
		MediaQueryListContext _localctx = new MediaQueryListContext(Context, State);
		EnterRule(_localctx, 12, RULE_mediaQueryList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 311;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				{
				State = 301;
				mediaQuery();
				State = 308;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma) {
					{
					{
					State = 302;
					Match(Comma);
					State = 303;
					ws();
					State = 304;
					mediaQuery();
					}
					}
					State = 310;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
			State = 313;
			ws();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MediaQueryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public WsContext[] ws() {
			return GetRuleContexts<WsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WsContext ws(int i) {
			return GetRuleContext<WsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MediaTypeContext mediaType() {
			return GetRuleContext<MediaTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] And() { return GetTokens(XCSSParser.And); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode And(int i) {
			return GetToken(XCSSParser.And, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MediaExpressionContext[] mediaExpression() {
			return GetRuleContexts<MediaExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MediaExpressionContext mediaExpression(int i) {
			return GetRuleContext<MediaExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MediaOnly() { return GetToken(XCSSParser.MediaOnly, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Not() { return GetToken(XCSSParser.Not, 0); }
		public MediaQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mediaQuery; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXCSSParserVisitor<TResult> typedVisitor = visitor as IXCSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMediaQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MediaQueryContext mediaQuery() {
		MediaQueryContext _localctx = new MediaQueryContext(Context, State);
		EnterRule(_localctx, 14, RULE_mediaQuery);
		int _la;
		try {
			int _alt;
			State = 340;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Comment:
			case Space:
			case MediaOnly:
			case Not:
			case And:
			case Or:
			case From:
			case To:
			case Ident:
				EnterOuterAlt(_localctx, 1);
				{
				State = 316;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
				case 1:
					{
					State = 315;
					_la = TokenStream.LA(1);
					if ( !(_la==MediaOnly || _la==Not) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				State = 318;
				ws();
				State = 319;
				mediaType();
				State = 320;
				ws();
				State = 327;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 321;
						Match(And);
						State = 322;
						ws();
						State = 323;
						mediaExpression();
						}
						} 
					}
					State = 329;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
				}
				}
				break;
			case OpenParen:
				EnterOuterAlt(_localctx, 2);
				{
				State = 330;
				mediaExpression();
				State = 337;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 331;
						Match(And);
						State = 332;
						ws();
						State = 333;
						mediaExpression();
						}
						} 
					}
					State = 339;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MediaTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		public MediaTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mediaType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXCSSParserVisitor<TResult> typedVisitor = visitor as IXCSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMediaType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MediaTypeContext mediaType() {
		MediaTypeContext _localctx = new MediaTypeContext(Context, State);
		EnterRule(_localctx, 16, RULE_mediaType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 342;
			ident();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MediaExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(XCSSParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WsContext[] ws() {
			return GetRuleContexts<WsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WsContext ws(int i) {
			return GetRuleContext<WsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MediaFeatureContext mediaFeature() {
			return GetRuleContext<MediaFeatureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(XCSSParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(XCSSParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public MediaExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mediaExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXCSSParserVisitor<TResult> typedVisitor = visitor as IXCSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMediaExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MediaExpressionContext mediaExpression() {
		MediaExpressionContext _localctx = new MediaExpressionContext(Context, State);
		EnterRule(_localctx, 18, RULE_mediaExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 344;
			Match(OpenParen);
			State = 345;
			ws();
			State = 346;
			mediaFeature();
			State = 351;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Colon) {
				{
				State = 347;
				Match(Colon);
				State = 348;
				ws();
				State = 349;
				expr();
				}
			}

			State = 353;
			Match(CloseParen);
			State = 354;
			ws();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MediaFeatureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WsContext ws() {
			return GetRuleContext<WsContext>(0);
		}
		public MediaFeatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mediaFeature; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXCSSParserVisitor<TResult> typedVisitor = visitor as IXCSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMediaFeature(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MediaFeatureContext mediaFeature() {
		MediaFeatureContext _localctx = new MediaFeatureContext(Context, State);
		EnterRule(_localctx, 20, RULE_mediaFeature);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 356;
			ident();
			State = 357;
			ws();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PageContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Page() { return GetToken(XCSSParser.Page, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WsContext[] ws() {
			return GetRuleContexts<WsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WsContext ws(int i) {
			return GetRuleContext<WsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(XCSSParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(XCSSParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PseudoPageContext pseudoPage() {
			return GetRuleContext<PseudoPageContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext[] declaration() {
			return GetRuleContexts<DeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration(int i) {
			return GetRuleContext<DeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SemiColon() { return GetTokens(XCSSParser.SemiColon); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemiColon(int i) {
			return GetToken(XCSSParser.SemiColon, i);
		}
		public PageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_page; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXCSSParserVisitor<TResult> typedVisitor = visitor as IXCSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPage(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PageContext page() {
		PageContext _localctx = new PageContext(Context, State);
		EnterRule(_localctx, 22, RULE_page);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 359;
			Match(Page);
			State = 360;
			ws();
			State = 362;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Colon) {
				{
				State = 361;
				pseudoPage();
				}
			}

			State = 364;
			Match(OpenBrace);
			State = 365;
			ws();
			State = 367;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Multiply) | (1L << Underscore) | (1L << MediaOnly) | (1L << Not) | (1L << And) | (1L << Or) | (1L << From) | (1L << To) | (1L << Variable) | (1L << Ident))) != 0)) {
				{
				State = 366;
				declaration();
				}
			}

			State = 376;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SemiColon) {
				{
				{
				State = 369;
				Match(SemiColon);
				State = 370;
				ws();
				State = 372;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Multiply) | (1L << Underscore) | (1L << MediaOnly) | (1L << Not) | (1L << And) | (1L << Or) | (1L << From) | (1L << To) | (1L << Variable) | (1L << Ident))) != 0)) {
					{
					State = 371;
					declaration();
					}
				}

				}
				}
				State = 378;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 379;
			Match(CloseBrace);
			State = 380;
			ws();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PseudoPageContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(XCSSParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WsContext ws() {
			return GetRuleContext<WsContext>(0);
		}
		public PseudoPageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pseudoPage; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXCSSParserVisitor<TResult> typedVisitor = visitor as IXCSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPseudoPage(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PseudoPageContext pseudoPage() {
		PseudoPageContext _localctx = new PseudoPageContext(Context, State);
		EnterRule(_localctx, 24, RULE_pseudoPage);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 382;
			Match(Colon);
			State = 383;
			ident();
			State = 384;
			ws();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectorGroupContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SelectorContext[] selector() {
			return GetRuleContexts<SelectorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectorContext selector(int i) {
			return GetRuleContext<SelectorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(XCSSParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(XCSSParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WsContext[] ws() {
			return GetRuleContexts<WsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WsContext ws(int i) {
			return GetRuleContext<WsContext>(i);
		}
		public SelectorGroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectorGroup; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXCSSParserVisitor<TResult> typedVisitor = visitor as IXCSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectorGroup(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectorGroupContext selectorGroup() {
		SelectorGroupContext _localctx = new SelectorGroupContext(Context, State);
		EnterRule(_localctx, 26, RULE_selectorGroup);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 386;
			selector();
			State = 393;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 387;
				Match(Comma);
				State = 388;
				ws();
				State = 389;
				selector();
				}
				}
				State = 395;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleSelectorSequenceContext[] simpleSelectorSequence() {
			return GetRuleContexts<SimpleSelectorSequenceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleSelectorSequenceContext simpleSelectorSequence(int i) {
			return GetRuleContext<SimpleSelectorSequenceContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WsContext[] ws() {
			return GetRuleContexts<WsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WsContext ws(int i) {
			return GetRuleContext<WsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CombinatorContext[] combinator() {
			return GetRuleContexts<CombinatorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CombinatorContext combinator(int i) {
			return GetRuleContext<CombinatorContext>(i);
		}
		public SelectorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selector; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXCSSParserVisitor<TResult> typedVisitor = visitor as IXCSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelector(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectorContext selector() {
		SelectorContext _localctx = new SelectorContext(Context, State);
		EnterRule(_localctx, 28, RULE_selector);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 396;
			simpleSelectorSequence();
			State = 397;
			ws();
			State = 404;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Space) | (1L << Plus) | (1L << Greater) | (1L << Tilde))) != 0)) {
				{
				{
				State = 398;
				combinator();
				State = 399;
				simpleSelectorSequence();
				State = 400;
				ws();
				}
				}
				State = 406;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CombinatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus() { return GetToken(XCSSParser.Plus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WsContext ws() {
			return GetRuleContext<WsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Greater() { return GetToken(XCSSParser.Greater, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Tilde() { return GetToken(XCSSParser.Tilde, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Space() { return GetToken(XCSSParser.Space, 0); }
		public CombinatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_combinator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXCSSParserVisitor<TResult> typedVisitor = visitor as IXCSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCombinator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CombinatorContext combinator() {
		CombinatorContext _localctx = new CombinatorContext(Context, State);
		EnterRule(_localctx, 30, RULE_combinator);
		try {
			State = 415;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Plus:
				EnterOuterAlt(_localctx, 1);
				{
				State = 407;
				Match(Plus);
				State = 408;
				ws();
				}
				break;
			case Greater:
				EnterOuterAlt(_localctx, 2);
				{
				State = 409;
				Match(Greater);
				State = 410;
				ws();
				}
				break;
			case Tilde:
				EnterOuterAlt(_localctx, 3);
				{
				State = 411;
				Match(Tilde);
				State = 412;
				ws();
				}
				break;
			case Space:
				EnterOuterAlt(_localctx, 4);
				{
				State = 413;
				Match(Space);
				State = 414;
				ws();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleSelectorSequenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeSelectorContext typeSelector() {
			return GetRuleContext<TypeSelectorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UniversalContext universal() {
			return GetRuleContext<UniversalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Hash() { return GetTokens(XCSSParser.Hash); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Hash(int i) {
			return GetToken(XCSSParser.Hash, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassNameContext[] className() {
			return GetRuleContexts<ClassNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassNameContext className(int i) {
			return GetRuleContext<ClassNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttribContext[] attrib() {
			return GetRuleContexts<AttribContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttribContext attrib(int i) {
			return GetRuleContext<AttribContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PseudoContext[] pseudo() {
			return GetRuleContexts<PseudoContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PseudoContext pseudo(int i) {
			return GetRuleContext<PseudoContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NegationContext[] negation() {
			return GetRuleContexts<NegationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NegationContext negation(int i) {
			return GetRuleContext<NegationContext>(i);
		}
		public SimpleSelectorSequenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleSelectorSequence; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXCSSParserVisitor<TResult> typedVisitor = visitor as IXCSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleSelectorSequence(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleSelectorSequenceContext simpleSelectorSequence() {
		SimpleSelectorSequenceContext _localctx = new SimpleSelectorSequenceContext(Context, State);
		EnterRule(_localctx, 32, RULE_simpleSelectorSequence);
		int _la;
		try {
			State = 440;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Multiply:
			case Pipe:
			case MediaOnly:
			case Not:
			case And:
			case Or:
			case From:
			case To:
			case Ident:
				EnterOuterAlt(_localctx, 1);
				{
				State = 419;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
				case 1:
					{
					State = 417;
					typeSelector();
					}
					break;
				case 2:
					{
					State = 418;
					universal();
					}
					break;
				}
				State = 428;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OpenBracket) | (1L << Colon) | (1L << Dot) | (1L << Hash) | (1L << PseudoNot))) != 0)) {
					{
					State = 426;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case Hash:
						{
						State = 421;
						Match(Hash);
						}
						break;
					case Dot:
						{
						State = 422;
						className();
						}
						break;
					case OpenBracket:
						{
						State = 423;
						attrib();
						}
						break;
					case Colon:
						{
						State = 424;
						pseudo();
						}
						break;
					case PseudoNot:
						{
						State = 425;
						negation();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					State = 430;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case OpenBracket:
			case Colon:
			case Dot:
			case Hash:
			case PseudoNot:
				EnterOuterAlt(_localctx, 2);
				{
				State = 436;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					State = 436;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case Hash:
						{
						State = 431;
						Match(Hash);
						}
						break;
					case Dot:
						{
						State = 432;
						className();
						}
						break;
					case OpenBracket:
						{
						State = 433;
						attrib();
						}
						break;
					case Colon:
						{
						State = 434;
						pseudo();
						}
						break;
					case PseudoNot:
						{
						State = 435;
						negation();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					State = 438;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OpenBracket) | (1L << Colon) | (1L << Dot) | (1L << Hash) | (1L << PseudoNot))) != 0) );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeSelectorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ElementNameContext elementName() {
			return GetRuleContext<ElementNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeNamespacePrefixContext typeNamespacePrefix() {
			return GetRuleContext<TypeNamespacePrefixContext>(0);
		}
		public TypeSelectorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeSelector; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXCSSParserVisitor<TResult> typedVisitor = visitor as IXCSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeSelector(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeSelectorContext typeSelector() {
		TypeSelectorContext _localctx = new TypeSelectorContext(Context, State);
		EnterRule(_localctx, 34, RULE_typeSelector);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 443;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
			case 1:
				{
				State = 442;
				typeNamespacePrefix();
				}
				break;
			}
			State = 445;
			elementName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeNamespacePrefixContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Pipe() { return GetToken(XCSSParser.Pipe, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Multiply() { return GetToken(XCSSParser.Multiply, 0); }
		public TypeNamespacePrefixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeNamespacePrefix; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXCSSParserVisitor<TResult> typedVisitor = visitor as IXCSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeNamespacePrefix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeNamespacePrefixContext typeNamespacePrefix() {
		TypeNamespacePrefixContext _localctx = new TypeNamespacePrefixContext(Context, State);
		EnterRule(_localctx, 36, RULE_typeNamespacePrefix);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 449;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MediaOnly:
			case Not:
			case And:
			case Or:
			case From:
			case To:
			case Ident:
				{
				State = 447;
				ident();
				}
				break;
			case Multiply:
				{
				State = 448;
				Match(Multiply);
				}
				break;
			case Pipe:
				break;
			default:
				break;
			}
			State = 451;
			Match(Pipe);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		public ElementNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXCSSParserVisitor<TResult> typedVisitor = visitor as IXCSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElementName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementNameContext elementName() {
		ElementNameContext _localctx = new ElementNameContext(Context, State);
		EnterRule(_localctx, 38, RULE_elementName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 453;
			ident();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UniversalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Multiply() { return GetToken(XCSSParser.Multiply, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeNamespacePrefixContext typeNamespacePrefix() {
			return GetRuleContext<TypeNamespacePrefixContext>(0);
		}
		public UniversalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_universal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXCSSParserVisitor<TResult> typedVisitor = visitor as IXCSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUniversal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UniversalContext universal() {
		UniversalContext _localctx = new UniversalContext(Context, State);
		EnterRule(_localctx, 40, RULE_universal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 456;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,41,Context) ) {
			case 1:
				{
				State = 455;
				typeNamespacePrefix();
				}
				break;
			}
			State = 458;
			Match(Multiply);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot() { return GetToken(XCSSParser.Dot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		public ClassNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_className; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXCSSParserVisitor<TResult> typedVisitor = visitor as IXCSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassNameContext className() {
		ClassNameContext _localctx = new ClassNameContext(Context, State);
		EnterRule(_localctx, 42, RULE_className);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 460;
			Match(Dot);
			State = 461;
			ident();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttribContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBracket() { return GetToken(XCSSParser.OpenBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WsContext[] ws() {
			return GetRuleContexts<WsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WsContext ws(int i) {
			return GetRuleContext<WsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext[] ident() {
			return GetRuleContexts<IdentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident(int i) {
			return GetRuleContext<IdentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBracket() { return GetToken(XCSSParser.CloseBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeNamespacePrefixContext typeNamespacePrefix() {
			return GetRuleContext<TypeNamespacePrefixContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PrefixMatch() { return GetToken(XCSSParser.PrefixMatch, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SuffixMatch() { return GetToken(XCSSParser.SuffixMatch, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SubstringMatch() { return GetToken(XCSSParser.SubstringMatch, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equal() { return GetToken(XCSSParser.Equal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Includes() { return GetToken(XCSSParser.Includes, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DashMatch() { return GetToken(XCSSParser.DashMatch, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String_() { return GetToken(XCSSParser.String_, 0); }
		public AttribContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attrib; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXCSSParserVisitor<TResult> typedVisitor = visitor as IXCSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttrib(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttribContext attrib() {
		AttribContext _localctx = new AttribContext(Context, State);
		EnterRule(_localctx, 44, RULE_attrib);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 463;
			Match(OpenBracket);
			State = 464;
			ws();
			State = 466;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,42,Context) ) {
			case 1:
				{
				State = 465;
				typeNamespacePrefix();
				}
				break;
			}
			State = 468;
			ident();
			State = 469;
			ws();
			State = 478;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Equal) | (1L << Includes) | (1L << DashMatch) | (1L << PrefixMatch) | (1L << SuffixMatch) | (1L << SubstringMatch))) != 0)) {
				{
				State = 470;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Equal) | (1L << Includes) | (1L << DashMatch) | (1L << PrefixMatch) | (1L << SuffixMatch) | (1L << SubstringMatch))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 471;
				ws();
				State = 474;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case MediaOnly:
				case Not:
				case And:
				case Or:
				case From:
				case To:
				case Ident:
					{
					State = 472;
					ident();
					}
					break;
				case String_:
					{
					State = 473;
					Match(String_);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 476;
				ws();
				}
			}

			State = 480;
			Match(CloseBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PseudoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Colon() { return GetTokens(XCSSParser.Colon); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon(int i) {
			return GetToken(XCSSParser.Colon, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionalPseudoContext functionalPseudo() {
			return GetRuleContext<FunctionalPseudoContext>(0);
		}
		public PseudoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pseudo; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXCSSParserVisitor<TResult> typedVisitor = visitor as IXCSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPseudo(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PseudoContext pseudo() {
		PseudoContext _localctx = new PseudoContext(Context, State);
		EnterRule(_localctx, 46, RULE_pseudo);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 482;
			Match(Colon);
			State = 484;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Colon) {
				{
				State = 483;
				Match(Colon);
				}
			}

			State = 488;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MediaOnly:
			case Not:
			case And:
			case Or:
			case From:
			case To:
			case Ident:
				{
				State = 486;
				ident();
				}
				break;
			case Function_:
				{
				State = 487;
				functionalPseudo();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionalPseudoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Function_() { return GetToken(XCSSParser.Function_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WsContext ws() {
			return GetRuleContext<WsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(XCSSParser.CloseParen, 0); }
		public FunctionalPseudoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionalPseudo; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXCSSParserVisitor<TResult> typedVisitor = visitor as IXCSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionalPseudo(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionalPseudoContext functionalPseudo() {
		FunctionalPseudoContext _localctx = new FunctionalPseudoContext(Context, State);
		EnterRule(_localctx, 48, RULE_functionalPseudo);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 490;
			Match(Function_);
			State = 491;
			ws();
			State = 492;
			expression();
			State = 493;
			Match(CloseParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public WsContext[] ws() {
			return GetRuleContexts<WsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WsContext ws(int i) {
			return GetRuleContext<WsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Plus() { return GetTokens(XCSSParser.Plus); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus(int i) {
			return GetToken(XCSSParser.Plus, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Minus() { return GetTokens(XCSSParser.Minus); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus(int i) {
			return GetToken(XCSSParser.Minus, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Dimension() { return GetTokens(XCSSParser.Dimension); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dimension(int i) {
			return GetToken(XCSSParser.Dimension, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] UnknownDimension() { return GetTokens(XCSSParser.UnknownDimension); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UnknownDimension(int i) {
			return GetToken(XCSSParser.UnknownDimension, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Number() { return GetTokens(XCSSParser.Number); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Number(int i) {
			return GetToken(XCSSParser.Number, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] String_() { return GetTokens(XCSSParser.String_); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String_(int i) {
			return GetToken(XCSSParser.String_, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext[] ident() {
			return GetRuleContexts<IdentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident(int i) {
			return GetRuleContext<IdentContext>(i);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXCSSParserVisitor<TResult> typedVisitor = visitor as IXCSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 50, RULE_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 505;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 502;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Plus:
					{
					State = 495;
					Match(Plus);
					}
					break;
				case Minus:
					{
					State = 496;
					Match(Minus);
					}
					break;
				case Dimension:
					{
					State = 497;
					Match(Dimension);
					}
					break;
				case UnknownDimension:
					{
					State = 498;
					Match(UnknownDimension);
					}
					break;
				case Number:
					{
					State = 499;
					Match(Number);
					}
					break;
				case String_:
					{
					State = 500;
					Match(String_);
					}
					break;
				case MediaOnly:
				case Not:
				case And:
				case Or:
				case From:
				case To:
				case Ident:
					{
					State = 501;
					ident();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 504;
				ws();
				}
				}
				State = 507;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MediaOnly) | (1L << Not) | (1L << And) | (1L << Dimension) | (1L << UnknownDimension) | (1L << Plus) | (1L << Minus) | (1L << Number) | (1L << String_) | (1L << Or) | (1L << From) | (1L << To) | (1L << Ident))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NegationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PseudoNot() { return GetToken(XCSSParser.PseudoNot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WsContext[] ws() {
			return GetRuleContexts<WsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WsContext ws(int i) {
			return GetRuleContext<WsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NegationArgContext negationArg() {
			return GetRuleContext<NegationArgContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(XCSSParser.CloseParen, 0); }
		public NegationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_negation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXCSSParserVisitor<TResult> typedVisitor = visitor as IXCSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNegation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NegationContext negation() {
		NegationContext _localctx = new NegationContext(Context, State);
		EnterRule(_localctx, 52, RULE_negation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 509;
			Match(PseudoNot);
			State = 510;
			ws();
			State = 511;
			negationArg();
			State = 512;
			ws();
			State = 513;
			Match(CloseParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NegationArgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeSelectorContext typeSelector() {
			return GetRuleContext<TypeSelectorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UniversalContext universal() {
			return GetRuleContext<UniversalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Hash() { return GetToken(XCSSParser.Hash, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassNameContext className() {
			return GetRuleContext<ClassNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttribContext attrib() {
			return GetRuleContext<AttribContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PseudoContext pseudo() {
			return GetRuleContext<PseudoContext>(0);
		}
		public NegationArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_negationArg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXCSSParserVisitor<TResult> typedVisitor = visitor as IXCSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNegationArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NegationArgContext negationArg() {
		NegationArgContext _localctx = new NegationArgContext(Context, State);
		EnterRule(_localctx, 54, RULE_negationArg);
		try {
			State = 521;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,49,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 515;
				typeSelector();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 516;
				universal();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 517;
				Match(Hash);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 518;
				className();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 519;
				attrib();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 520;
				pseudo();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Operator_Context : ParserRuleContext {
		public Operator_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator_; } }
	 
		public Operator_Context() { }
		public virtual void CopyFrom(Operator_Context context) {
			base.CopyFrom(context);
		}
	}
	public partial class BadOperatorContext : Operator_Context {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equal() { return GetToken(XCSSParser.Equal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WsContext ws() {
			return GetRuleContext<WsContext>(0);
		}
		public BadOperatorContext(Operator_Context context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXCSSParserVisitor<TResult> typedVisitor = visitor as IXCSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBadOperator(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GoodOperatorContext : Operator_Context {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Divide() { return GetToken(XCSSParser.Divide, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WsContext ws() {
			return GetRuleContext<WsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(XCSSParser.Comma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Space() { return GetToken(XCSSParser.Space, 0); }
		public GoodOperatorContext(Operator_Context context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXCSSParserVisitor<TResult> typedVisitor = visitor as IXCSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGoodOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Operator_Context operator_() {
		Operator_Context _localctx = new Operator_Context(Context, State);
		EnterRule(_localctx, 56, RULE_operator_);
		try {
			State = 531;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Divide:
				_localctx = new GoodOperatorContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 523;
				Match(Divide);
				State = 524;
				ws();
				}
				break;
			case Comma:
				_localctx = new GoodOperatorContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 525;
				Match(Comma);
				State = 526;
				ws();
				}
				break;
			case Space:
				_localctx = new GoodOperatorContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 527;
				Match(Space);
				State = 528;
				ws();
				}
				break;
			case Equal:
				_localctx = new BadOperatorContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 529;
				Match(Equal);
				State = 530;
				ws();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Property_Context : ParserRuleContext {
		public Property_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_property_; } }
	 
		public Property_Context() { }
		public virtual void CopyFrom(Property_Context context) {
			base.CopyFrom(context);
		}
	}
	public partial class BadPropertyContext : Property_Context {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Multiply() { return GetToken(XCSSParser.Multiply, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Underscore() { return GetToken(XCSSParser.Underscore, 0); }
		public BadPropertyContext(Property_Context context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXCSSParserVisitor<TResult> typedVisitor = visitor as IXCSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBadProperty(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GoodPropertyContext : Property_Context {
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WsContext ws() {
			return GetRuleContext<WsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Variable() { return GetToken(XCSSParser.Variable, 0); }
		public GoodPropertyContext(Property_Context context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXCSSParserVisitor<TResult> typedVisitor = visitor as IXCSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGoodProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Property_Context property_() {
		Property_Context _localctx = new Property_Context(Context, State);
		EnterRule(_localctx, 58, RULE_property_);
		try {
			State = 542;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MediaOnly:
			case Not:
			case And:
			case Or:
			case From:
			case To:
			case Ident:
				_localctx = new GoodPropertyContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 533;
				ident();
				State = 534;
				ws();
				}
				break;
			case Variable:
				_localctx = new GoodPropertyContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 536;
				Match(Variable);
				State = 537;
				ws();
				}
				break;
			case Multiply:
				_localctx = new BadPropertyContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 538;
				Match(Multiply);
				State = 539;
				ident();
				}
				break;
			case Underscore:
				_localctx = new BadPropertyContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 540;
				Match(Underscore);
				State = 541;
				ident();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RulesetContext : ParserRuleContext {
		public RulesetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ruleset; } }
	 
		public RulesetContext() { }
		public virtual void CopyFrom(RulesetContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class UnknownRulesetContext : RulesetContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(XCSSParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WsContext[] ws() {
			return GetRuleContexts<WsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WsContext ws(int i) {
			return GetRuleContext<WsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(XCSSParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_Context[] any_() {
			return GetRuleContexts<Any_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Any_Context any_(int i) {
			return GetRuleContext<Any_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationListContext declarationList() {
			return GetRuleContext<DeclarationListContext>(0);
		}
		public UnknownRulesetContext(RulesetContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXCSSParserVisitor<TResult> typedVisitor = visitor as IXCSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnknownRuleset(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class KnownRulesetContext : RulesetContext {
		[System.Diagnostics.DebuggerNonUserCode] public SelectorGroupContext selectorGroup() {
			return GetRuleContext<SelectorGroupContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(XCSSParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WsContext[] ws() {
			return GetRuleContexts<WsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WsContext ws(int i) {
			return GetRuleContext<WsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(XCSSParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationListContext declarationList() {
			return GetRuleContext<DeclarationListContext>(0);
		}
		public KnownRulesetContext(RulesetContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXCSSParserVisitor<TResult> typedVisitor = visitor as IXCSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKnownRuleset(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RulesetContext ruleset() {
		RulesetContext _localctx = new RulesetContext(Context, State);
		EnterRule(_localctx, 60, RULE_ruleset);
		int _la;
		try {
			State = 567;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,55,Context) ) {
			case 1:
				_localctx = new KnownRulesetContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 544;
				selectorGroup();
				State = 545;
				Match(OpenBrace);
				State = 546;
				ws();
				State = 548;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SemiColon) | (1L << Multiply) | (1L << Underscore) | (1L << MediaOnly) | (1L << Not) | (1L << And) | (1L << Or) | (1L << From) | (1L << To) | (1L << Variable) | (1L << Ident))) != 0)) {
					{
					State = 547;
					declarationList();
					}
				}

				State = 550;
				Match(CloseBrace);
				State = 551;
				ws();
				}
				break;
			case 2:
				_localctx = new UnknownRulesetContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 556;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OpenBracket) | (1L << OpenParen) | (1L << Colon) | (1L << Url) | (1L << Includes) | (1L << DashMatch) | (1L << Hash) | (1L << Percentage) | (1L << Url_) | (1L << UnicodeRange) | (1L << MediaOnly) | (1L << Not) | (1L << And) | (1L << Dimension) | (1L << UnknownDimension) | (1L << Plus) | (1L << Minus) | (1L << Number) | (1L << String_) | (1L << Or) | (1L << From) | (1L << To) | (1L << Ident) | (1L << Function_))) != 0)) {
					{
					{
					State = 553;
					any_();
					}
					}
					State = 558;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 559;
				Match(OpenBrace);
				State = 560;
				ws();
				State = 562;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SemiColon) | (1L << Multiply) | (1L << Underscore) | (1L << MediaOnly) | (1L << Not) | (1L << And) | (1L << Or) | (1L << From) | (1L << To) | (1L << Variable) | (1L << Ident))) != 0)) {
					{
					State = 561;
					declarationList();
					}
				}

				State = 564;
				Match(CloseBrace);
				State = 565;
				ws();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext[] declaration() {
			return GetRuleContexts<DeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration(int i) {
			return GetRuleContext<DeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WsContext[] ws() {
			return GetRuleContexts<WsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WsContext ws(int i) {
			return GetRuleContext<WsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SemiColon() { return GetTokens(XCSSParser.SemiColon); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemiColon(int i) {
			return GetToken(XCSSParser.SemiColon, i);
		}
		public DeclarationListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarationList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXCSSParserVisitor<TResult> typedVisitor = visitor as IXCSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationListContext declarationList() {
		DeclarationListContext _localctx = new DeclarationListContext(Context, State);
		EnterRule(_localctx, 62, RULE_declarationList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 573;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SemiColon) {
				{
				{
				State = 569;
				Match(SemiColon);
				State = 570;
				ws();
				}
				}
				State = 575;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 576;
			declaration();
			State = 577;
			ws();
			State = 585;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,58,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 578;
					Match(SemiColon);
					State = 579;
					ws();
					State = 581;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,57,Context) ) {
					case 1:
						{
						State = 580;
						declaration();
						}
						break;
					}
					}
					} 
				}
				State = 587;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,58,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
	 
		public DeclarationContext() { }
		public virtual void CopyFrom(DeclarationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class UnknownDeclarationContext : DeclarationContext {
		[System.Diagnostics.DebuggerNonUserCode] public Property_Context property_() {
			return GetRuleContext<Property_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(XCSSParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WsContext ws() {
			return GetRuleContext<WsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public UnknownDeclarationContext(DeclarationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXCSSParserVisitor<TResult> typedVisitor = visitor as IXCSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnknownDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class KnownDeclarationContext : DeclarationContext {
		[System.Diagnostics.DebuggerNonUserCode] public Property_Context property_() {
			return GetRuleContext<Property_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(XCSSParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WsContext ws() {
			return GetRuleContext<WsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrioContext prio() {
			return GetRuleContext<PrioContext>(0);
		}
		public KnownDeclarationContext(DeclarationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXCSSParserVisitor<TResult> typedVisitor = visitor as IXCSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKnownDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 64, RULE_declaration);
		int _la;
		try {
			State = 600;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,60,Context) ) {
			case 1:
				_localctx = new KnownDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 588;
				property_();
				State = 589;
				Match(Colon);
				State = 590;
				ws();
				State = 591;
				expr();
				State = 593;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Important) {
					{
					State = 592;
					prio();
					}
				}

				}
				break;
			case 2:
				_localctx = new UnknownDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 595;
				property_();
				State = 596;
				Match(Colon);
				State = 597;
				ws();
				State = 598;
				value();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrioContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Important() { return GetToken(XCSSParser.Important, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WsContext ws() {
			return GetRuleContext<WsContext>(0);
		}
		public PrioContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prio; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXCSSParserVisitor<TResult> typedVisitor = visitor as IXCSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrio(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrioContext prio() {
		PrioContext _localctx = new PrioContext(Context, State);
		EnterRule(_localctx, 66, RULE_prio);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 602;
			Match(Important);
			State = 603;
			ws();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Any_Context[] any_() {
			return GetRuleContexts<Any_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Any_Context any_(int i) {
			return GetRuleContext<Any_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AtKeyword() { return GetTokens(XCSSParser.AtKeyword); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AtKeyword(int i) {
			return GetToken(XCSSParser.AtKeyword, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WsContext[] ws() {
			return GetRuleContexts<WsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WsContext ws(int i) {
			return GetRuleContext<WsContext>(i);
		}
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXCSSParserVisitor<TResult> typedVisitor = visitor as IXCSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 68, RULE_value);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 609;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					State = 609;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case OpenBracket:
					case OpenParen:
					case Colon:
					case Url:
					case Includes:
					case DashMatch:
					case Hash:
					case Percentage:
					case Url_:
					case UnicodeRange:
					case MediaOnly:
					case Not:
					case And:
					case Dimension:
					case UnknownDimension:
					case Plus:
					case Minus:
					case Number:
					case String_:
					case Or:
					case From:
					case To:
					case Ident:
					case Function_:
						{
						State = 605;
						any_();
						}
						break;
					case OpenBrace:
						{
						State = 606;
						block();
						}
						break;
					case AtKeyword:
						{
						State = 607;
						Match(AtKeyword);
						State = 608;
						ws();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 611;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,62,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Operator_Context[] operator_() {
			return GetRuleContexts<Operator_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Operator_Context operator_(int i) {
			return GetRuleContext<Operator_Context>(i);
		}
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXCSSParserVisitor<TResult> typedVisitor = visitor as IXCSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(Context, State);
		EnterRule(_localctx, 70, RULE_expr);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 613;
			term();
			State = 620;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,64,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 615;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Equal) | (1L << Divide) | (1L << Space) | (1L << Comma))) != 0)) {
						{
						State = 614;
						operator_();
						}
					}

					State = 617;
					term();
					}
					} 
				}
				State = 622;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,64,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
	 
		public TermContext() { }
		public virtual void CopyFrom(TermContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BadTermContext : TermContext {
		[System.Diagnostics.DebuggerNonUserCode] public DxImageTransformContext dxImageTransform() {
			return GetRuleContext<DxImageTransformContext>(0);
		}
		public BadTermContext(TermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXCSSParserVisitor<TResult> typedVisitor = visitor as IXCSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBadTerm(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class KnownTermContext : TermContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WsContext ws() {
			return GetRuleContext<WsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PercentageContext percentage() {
			return GetRuleContext<PercentageContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DimensionContext dimension() {
			return GetRuleContext<DimensionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String_() { return GetToken(XCSSParser.String_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UnicodeRange() { return GetToken(XCSSParser.UnicodeRange, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Var_Context var_() {
			return GetRuleContext<Var_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UrlContext url() {
			return GetRuleContext<UrlContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HexcolorContext hexcolor() {
			return GetRuleContext<HexcolorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CalcContext calc() {
			return GetRuleContext<CalcContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_Context function_() {
			return GetRuleContext<Function_Context>(0);
		}
		public KnownTermContext(TermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXCSSParserVisitor<TResult> typedVisitor = visitor as IXCSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKnownTerm(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnknownTermContext : TermContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnknownDimensionContext unknownDimension() {
			return GetRuleContext<UnknownDimensionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WsContext ws() {
			return GetRuleContext<WsContext>(0);
		}
		public UnknownTermContext(TermContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXCSSParserVisitor<TResult> typedVisitor = visitor as IXCSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnknownTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 72, RULE_term);
		try {
			State = 650;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,65,Context) ) {
			case 1:
				_localctx = new KnownTermContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 623;
				number();
				State = 624;
				ws();
				}
				break;
			case 2:
				_localctx = new KnownTermContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 626;
				percentage();
				State = 627;
				ws();
				}
				break;
			case 3:
				_localctx = new KnownTermContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 629;
				dimension();
				State = 630;
				ws();
				}
				break;
			case 4:
				_localctx = new KnownTermContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 632;
				Match(String_);
				State = 633;
				ws();
				}
				break;
			case 5:
				_localctx = new KnownTermContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 634;
				Match(UnicodeRange);
				State = 635;
				ws();
				}
				break;
			case 6:
				_localctx = new KnownTermContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 636;
				ident();
				State = 637;
				ws();
				}
				break;
			case 7:
				_localctx = new KnownTermContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 639;
				var_();
				}
				break;
			case 8:
				_localctx = new KnownTermContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 640;
				url();
				State = 641;
				ws();
				}
				break;
			case 9:
				_localctx = new KnownTermContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 643;
				hexcolor();
				}
				break;
			case 10:
				_localctx = new KnownTermContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 644;
				calc();
				}
				break;
			case 11:
				_localctx = new KnownTermContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 645;
				function_();
				}
				break;
			case 12:
				_localctx = new UnknownTermContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 646;
				unknownDimension();
				State = 647;
				ws();
				}
				break;
			case 13:
				_localctx = new BadTermContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 649;
				dxImageTransform();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Function_() { return GetToken(XCSSParser.Function_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WsContext[] ws() {
			return GetRuleContexts<WsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WsContext ws(int i) {
			return GetRuleContext<WsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(XCSSParser.CloseParen, 0); }
		public Function_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXCSSParserVisitor<TResult> typedVisitor = visitor as IXCSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_Context function_() {
		Function_Context _localctx = new Function_Context(Context, State);
		EnterRule(_localctx, 74, RULE_function_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 652;
			Match(Function_);
			State = 653;
			ws();
			State = 654;
			expr();
			State = 655;
			Match(CloseParen);
			State = 656;
			ws();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DxImageTransformContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DxImageTransform() { return GetToken(XCSSParser.DxImageTransform, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WsContext[] ws() {
			return GetRuleContexts<WsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WsContext ws(int i) {
			return GetRuleContext<WsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(XCSSParser.CloseParen, 0); }
		public DxImageTransformContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dxImageTransform; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXCSSParserVisitor<TResult> typedVisitor = visitor as IXCSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDxImageTransform(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DxImageTransformContext dxImageTransform() {
		DxImageTransformContext _localctx = new DxImageTransformContext(Context, State);
		EnterRule(_localctx, 76, RULE_dxImageTransform);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 658;
			Match(DxImageTransform);
			State = 659;
			ws();
			State = 660;
			expr();
			State = 661;
			Match(CloseParen);
			State = 662;
			ws();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HexcolorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Hash() { return GetToken(XCSSParser.Hash, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WsContext ws() {
			return GetRuleContext<WsContext>(0);
		}
		public HexcolorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hexcolor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXCSSParserVisitor<TResult> typedVisitor = visitor as IXCSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHexcolor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HexcolorContext hexcolor() {
		HexcolorContext _localctx = new HexcolorContext(Context, State);
		EnterRule(_localctx, 78, RULE_hexcolor);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 664;
			Match(Hash);
			State = 665;
			ws();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Number() { return GetToken(XCSSParser.Number, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus() { return GetToken(XCSSParser.Plus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus() { return GetToken(XCSSParser.Minus, 0); }
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXCSSParserVisitor<TResult> typedVisitor = visitor as IXCSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 80, RULE_number);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 668;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Plus || _la==Minus) {
				{
				State = 667;
				_la = TokenStream.LA(1);
				if ( !(_la==Plus || _la==Minus) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 670;
			Match(Number);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PercentageContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Percentage() { return GetToken(XCSSParser.Percentage, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus() { return GetToken(XCSSParser.Plus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus() { return GetToken(XCSSParser.Minus, 0); }
		public PercentageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_percentage; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXCSSParserVisitor<TResult> typedVisitor = visitor as IXCSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPercentage(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PercentageContext percentage() {
		PercentageContext _localctx = new PercentageContext(Context, State);
		EnterRule(_localctx, 82, RULE_percentage);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 673;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Plus || _la==Minus) {
				{
				State = 672;
				_la = TokenStream.LA(1);
				if ( !(_la==Plus || _la==Minus) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 675;
			Match(Percentage);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DimensionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dimension() { return GetToken(XCSSParser.Dimension, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus() { return GetToken(XCSSParser.Plus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus() { return GetToken(XCSSParser.Minus, 0); }
		public DimensionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dimension; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXCSSParserVisitor<TResult> typedVisitor = visitor as IXCSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDimension(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DimensionContext dimension() {
		DimensionContext _localctx = new DimensionContext(Context, State);
		EnterRule(_localctx, 84, RULE_dimension);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 678;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Plus || _la==Minus) {
				{
				State = 677;
				_la = TokenStream.LA(1);
				if ( !(_la==Plus || _la==Minus) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 680;
			Match(Dimension);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnknownDimensionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UnknownDimension() { return GetToken(XCSSParser.UnknownDimension, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus() { return GetToken(XCSSParser.Plus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus() { return GetToken(XCSSParser.Minus, 0); }
		public UnknownDimensionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unknownDimension; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXCSSParserVisitor<TResult> typedVisitor = visitor as IXCSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnknownDimension(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnknownDimensionContext unknownDimension() {
		UnknownDimensionContext _localctx = new UnknownDimensionContext(Context, State);
		EnterRule(_localctx, 86, RULE_unknownDimension);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 683;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Plus || _la==Minus) {
				{
				State = 682;
				_la = TokenStream.LA(1);
				if ( !(_la==Plus || _la==Minus) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 685;
			Match(UnknownDimension);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Any_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WsContext[] ws() {
			return GetRuleContexts<WsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WsContext ws(int i) {
			return GetRuleContext<WsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PercentageContext percentage() {
			return GetRuleContext<PercentageContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DimensionContext dimension() {
			return GetRuleContext<DimensionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnknownDimensionContext unknownDimension() {
			return GetRuleContext<UnknownDimensionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String_() { return GetToken(XCSSParser.String_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UrlContext url() {
			return GetRuleContext<UrlContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Hash() { return GetToken(XCSSParser.Hash, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UnicodeRange() { return GetToken(XCSSParser.UnicodeRange, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Includes() { return GetToken(XCSSParser.Includes, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DashMatch() { return GetToken(XCSSParser.DashMatch, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(XCSSParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Function_() { return GetToken(XCSSParser.Function_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(XCSSParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_Context[] any_() {
			return GetRuleContexts<Any_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Any_Context any_(int i) {
			return GetRuleContext<Any_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnusedContext[] unused() {
			return GetRuleContexts<UnusedContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnusedContext unused(int i) {
			return GetRuleContext<UnusedContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(XCSSParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBracket() { return GetToken(XCSSParser.OpenBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBracket() { return GetToken(XCSSParser.CloseBracket, 0); }
		public Any_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_any_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXCSSParserVisitor<TResult> typedVisitor = visitor as IXCSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAny_(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Any_Context any_() {
		Any_Context _localctx = new Any_Context(Context, State);
		EnterRule(_localctx, 88, RULE_any_);
		int _la;
		try {
			State = 753;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,76,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 687;
				ident();
				State = 688;
				ws();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 690;
				number();
				State = 691;
				ws();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 693;
				percentage();
				State = 694;
				ws();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 696;
				dimension();
				State = 697;
				ws();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 699;
				unknownDimension();
				State = 700;
				ws();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 702;
				Match(String_);
				State = 703;
				ws();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 704;
				url();
				State = 705;
				ws();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 707;
				Match(Hash);
				State = 708;
				ws();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 709;
				Match(UnicodeRange);
				State = 710;
				ws();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 711;
				Match(Includes);
				State = 712;
				ws();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 713;
				Match(DashMatch);
				State = 714;
				ws();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 715;
				Match(Colon);
				State = 716;
				ws();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 717;
				Match(Function_);
				State = 718;
				ws();
				State = 723;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OpenBracket) | (1L << OpenParen) | (1L << OpenBrace) | (1L << SemiColon) | (1L << Colon) | (1L << Url) | (1L << Cdo) | (1L << Cdc) | (1L << Includes) | (1L << DashMatch) | (1L << Hash) | (1L << Percentage) | (1L << Url_) | (1L << UnicodeRange) | (1L << MediaOnly) | (1L << Not) | (1L << And) | (1L << Dimension) | (1L << UnknownDimension) | (1L << Plus) | (1L << Minus) | (1L << Number) | (1L << String_) | (1L << Or) | (1L << From) | (1L << To) | (1L << AtKeyword) | (1L << Ident) | (1L << Function_))) != 0)) {
					{
					State = 721;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case OpenBracket:
					case OpenParen:
					case Colon:
					case Url:
					case Includes:
					case DashMatch:
					case Hash:
					case Percentage:
					case Url_:
					case UnicodeRange:
					case MediaOnly:
					case Not:
					case And:
					case Dimension:
					case UnknownDimension:
					case Plus:
					case Minus:
					case Number:
					case String_:
					case Or:
					case From:
					case To:
					case Ident:
					case Function_:
						{
						State = 719;
						any_();
						}
						break;
					case OpenBrace:
					case SemiColon:
					case Cdo:
					case Cdc:
					case AtKeyword:
						{
						State = 720;
						unused();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					State = 725;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 726;
				Match(CloseParen);
				State = 727;
				ws();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 729;
				Match(OpenParen);
				State = 730;
				ws();
				State = 735;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OpenBracket) | (1L << OpenParen) | (1L << OpenBrace) | (1L << SemiColon) | (1L << Colon) | (1L << Url) | (1L << Cdo) | (1L << Cdc) | (1L << Includes) | (1L << DashMatch) | (1L << Hash) | (1L << Percentage) | (1L << Url_) | (1L << UnicodeRange) | (1L << MediaOnly) | (1L << Not) | (1L << And) | (1L << Dimension) | (1L << UnknownDimension) | (1L << Plus) | (1L << Minus) | (1L << Number) | (1L << String_) | (1L << Or) | (1L << From) | (1L << To) | (1L << AtKeyword) | (1L << Ident) | (1L << Function_))) != 0)) {
					{
					State = 733;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case OpenBracket:
					case OpenParen:
					case Colon:
					case Url:
					case Includes:
					case DashMatch:
					case Hash:
					case Percentage:
					case Url_:
					case UnicodeRange:
					case MediaOnly:
					case Not:
					case And:
					case Dimension:
					case UnknownDimension:
					case Plus:
					case Minus:
					case Number:
					case String_:
					case Or:
					case From:
					case To:
					case Ident:
					case Function_:
						{
						State = 731;
						any_();
						}
						break;
					case OpenBrace:
					case SemiColon:
					case Cdo:
					case Cdc:
					case AtKeyword:
						{
						State = 732;
						unused();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					State = 737;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 738;
				Match(CloseParen);
				State = 739;
				ws();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 741;
				Match(OpenBracket);
				State = 742;
				ws();
				State = 747;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OpenBracket) | (1L << OpenParen) | (1L << OpenBrace) | (1L << SemiColon) | (1L << Colon) | (1L << Url) | (1L << Cdo) | (1L << Cdc) | (1L << Includes) | (1L << DashMatch) | (1L << Hash) | (1L << Percentage) | (1L << Url_) | (1L << UnicodeRange) | (1L << MediaOnly) | (1L << Not) | (1L << And) | (1L << Dimension) | (1L << UnknownDimension) | (1L << Plus) | (1L << Minus) | (1L << Number) | (1L << String_) | (1L << Or) | (1L << From) | (1L << To) | (1L << AtKeyword) | (1L << Ident) | (1L << Function_))) != 0)) {
					{
					State = 745;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case OpenBracket:
					case OpenParen:
					case Colon:
					case Url:
					case Includes:
					case DashMatch:
					case Hash:
					case Percentage:
					case Url_:
					case UnicodeRange:
					case MediaOnly:
					case Not:
					case And:
					case Dimension:
					case UnknownDimension:
					case Plus:
					case Minus:
					case Number:
					case String_:
					case Or:
					case From:
					case To:
					case Ident:
					case Function_:
						{
						State = 743;
						any_();
						}
						break;
					case OpenBrace:
					case SemiColon:
					case Cdo:
					case Cdc:
					case AtKeyword:
						{
						State = 744;
						unused();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					State = 749;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 750;
				Match(CloseBracket);
				State = 751;
				ws();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtRuleContext : ParserRuleContext {
		public AtRuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atRule; } }
	 
		public AtRuleContext() { }
		public virtual void CopyFrom(AtRuleContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class UnknownAtRuleContext : AtRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AtKeyword() { return GetToken(XCSSParser.AtKeyword, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WsContext[] ws() {
			return GetRuleContexts<WsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WsContext ws(int i) {
			return GetRuleContext<WsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemiColon() { return GetToken(XCSSParser.SemiColon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_Context[] any_() {
			return GetRuleContexts<Any_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Any_Context any_(int i) {
			return GetRuleContext<Any_Context>(i);
		}
		public UnknownAtRuleContext(AtRuleContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXCSSParserVisitor<TResult> typedVisitor = visitor as IXCSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnknownAtRule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtRuleContext atRule() {
		AtRuleContext _localctx = new AtRuleContext(Context, State);
		EnterRule(_localctx, 90, RULE_atRule);
		int _la;
		try {
			_localctx = new UnknownAtRuleContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 755;
			Match(AtKeyword);
			State = 756;
			ws();
			State = 760;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OpenBracket) | (1L << OpenParen) | (1L << Colon) | (1L << Url) | (1L << Includes) | (1L << DashMatch) | (1L << Hash) | (1L << Percentage) | (1L << Url_) | (1L << UnicodeRange) | (1L << MediaOnly) | (1L << Not) | (1L << And) | (1L << Dimension) | (1L << UnknownDimension) | (1L << Plus) | (1L << Minus) | (1L << Number) | (1L << String_) | (1L << Or) | (1L << From) | (1L << To) | (1L << Ident) | (1L << Function_))) != 0)) {
				{
				{
				State = 757;
				any_();
				}
				}
				State = 762;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 766;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OpenBrace:
				{
				State = 763;
				block();
				}
				break;
			case SemiColon:
				{
				State = 764;
				Match(SemiColon);
				State = 765;
				ws();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnusedContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AtKeyword() { return GetToken(XCSSParser.AtKeyword, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WsContext ws() {
			return GetRuleContext<WsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemiColon() { return GetToken(XCSSParser.SemiColon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Cdo() { return GetToken(XCSSParser.Cdo, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Cdc() { return GetToken(XCSSParser.Cdc, 0); }
		public UnusedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unused; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXCSSParserVisitor<TResult> typedVisitor = visitor as IXCSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnused(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnusedContext unused() {
		UnusedContext _localctx = new UnusedContext(Context, State);
		EnterRule(_localctx, 92, RULE_unused);
		try {
			State = 777;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OpenBrace:
				EnterOuterAlt(_localctx, 1);
				{
				State = 768;
				block();
				}
				break;
			case AtKeyword:
				EnterOuterAlt(_localctx, 2);
				{
				State = 769;
				Match(AtKeyword);
				State = 770;
				ws();
				}
				break;
			case SemiColon:
				EnterOuterAlt(_localctx, 3);
				{
				State = 771;
				Match(SemiColon);
				State = 772;
				ws();
				}
				break;
			case Cdo:
				EnterOuterAlt(_localctx, 4);
				{
				State = 773;
				Match(Cdo);
				State = 774;
				ws();
				}
				break;
			case Cdc:
				EnterOuterAlt(_localctx, 5);
				{
				State = 775;
				Match(Cdc);
				State = 776;
				ws();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(XCSSParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WsContext[] ws() {
			return GetRuleContexts<WsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WsContext ws(int i) {
			return GetRuleContext<WsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(XCSSParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationListContext[] declarationList() {
			return GetRuleContexts<DeclarationListContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationListContext declarationList(int i) {
			return GetRuleContext<DeclarationListContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NestedStatementContext[] nestedStatement() {
			return GetRuleContexts<NestedStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NestedStatementContext nestedStatement(int i) {
			return GetRuleContext<NestedStatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Any_Context[] any_() {
			return GetRuleContexts<Any_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Any_Context any_(int i) {
			return GetRuleContext<Any_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AtKeyword() { return GetTokens(XCSSParser.AtKeyword); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AtKeyword(int i) {
			return GetToken(XCSSParser.AtKeyword, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SemiColon() { return GetTokens(XCSSParser.SemiColon); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemiColon(int i) {
			return GetToken(XCSSParser.SemiColon, i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXCSSParserVisitor<TResult> typedVisitor = visitor as IXCSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 94, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 779;
			Match(OpenBrace);
			State = 780;
			ws();
			State = 791;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OpenBracket) | (1L << OpenParen) | (1L << OpenBrace) | (1L << SemiColon) | (1L << Colon) | (1L << Dot) | (1L << Multiply) | (1L << Pipe) | (1L << Underscore) | (1L << Url) | (1L << Includes) | (1L << DashMatch) | (1L << Hash) | (1L << Page) | (1L << Media) | (1L << Percentage) | (1L << Url_) | (1L << UnicodeRange) | (1L << MediaOnly) | (1L << Not) | (1L << And) | (1L << Dimension) | (1L << UnknownDimension) | (1L << Plus) | (1L << Minus) | (1L << PseudoNot) | (1L << Number) | (1L << String_) | (1L << FontFace) | (1L << Supports) | (1L << Or) | (1L << Keyframes) | (1L << From) | (1L << To) | (1L << Viewport) | (1L << CounterStyle) | (1L << FontFeatureValues) | (1L << AtKeyword) | (1L << Variable) | (1L << Ident) | (1L << Function_))) != 0)) {
				{
				State = 789;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,80,Context) ) {
				case 1:
					{
					State = 781;
					declarationList();
					}
					break;
				case 2:
					{
					State = 782;
					nestedStatement();
					}
					break;
				case 3:
					{
					State = 783;
					any_();
					}
					break;
				case 4:
					{
					State = 784;
					block();
					}
					break;
				case 5:
					{
					State = 785;
					Match(AtKeyword);
					State = 786;
					ws();
					}
					break;
				case 6:
					{
					State = 787;
					Match(SemiColon);
					State = 788;
					ws();
					}
					break;
				}
				}
				State = 793;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 794;
			Match(CloseBrace);
			State = 795;
			ws();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NestedStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RulesetContext ruleset() {
			return GetRuleContext<RulesetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MediaContext media() {
			return GetRuleContext<MediaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PageContext page() {
			return GetRuleContext<PageContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FontFaceRuleContext fontFaceRule() {
			return GetRuleContext<FontFaceRuleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public KeyframesRuleContext keyframesRule() {
			return GetRuleContext<KeyframesRuleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SupportsRuleContext supportsRule() {
			return GetRuleContext<SupportsRuleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ViewportContext viewport() {
			return GetRuleContext<ViewportContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CounterStyleContext counterStyle() {
			return GetRuleContext<CounterStyleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FontFeatureValuesRuleContext fontFeatureValuesRule() {
			return GetRuleContext<FontFeatureValuesRuleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AtRuleContext atRule() {
			return GetRuleContext<AtRuleContext>(0);
		}
		public NestedStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nestedStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXCSSParserVisitor<TResult> typedVisitor = visitor as IXCSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNestedStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NestedStatementContext nestedStatement() {
		NestedStatementContext _localctx = new NestedStatementContext(Context, State);
		EnterRule(_localctx, 96, RULE_nestedStatement);
		try {
			State = 807;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OpenBracket:
			case OpenParen:
			case OpenBrace:
			case Colon:
			case Dot:
			case Multiply:
			case Pipe:
			case Url:
			case Includes:
			case DashMatch:
			case Hash:
			case Percentage:
			case Url_:
			case UnicodeRange:
			case MediaOnly:
			case Not:
			case And:
			case Dimension:
			case UnknownDimension:
			case Plus:
			case Minus:
			case PseudoNot:
			case Number:
			case String_:
			case Or:
			case From:
			case To:
			case Ident:
			case Function_:
				EnterOuterAlt(_localctx, 1);
				{
				State = 797;
				ruleset();
				}
				break;
			case Media:
				EnterOuterAlt(_localctx, 2);
				{
				State = 798;
				media();
				}
				break;
			case Page:
				EnterOuterAlt(_localctx, 3);
				{
				State = 799;
				page();
				}
				break;
			case FontFace:
				EnterOuterAlt(_localctx, 4);
				{
				State = 800;
				fontFaceRule();
				}
				break;
			case Keyframes:
				EnterOuterAlt(_localctx, 5);
				{
				State = 801;
				keyframesRule();
				}
				break;
			case Supports:
				EnterOuterAlt(_localctx, 6);
				{
				State = 802;
				supportsRule();
				}
				break;
			case Viewport:
				EnterOuterAlt(_localctx, 7);
				{
				State = 803;
				viewport();
				}
				break;
			case CounterStyle:
				EnterOuterAlt(_localctx, 8);
				{
				State = 804;
				counterStyle();
				}
				break;
			case FontFeatureValues:
				EnterOuterAlt(_localctx, 9);
				{
				State = 805;
				fontFeatureValuesRule();
				}
				break;
			case AtKeyword:
				EnterOuterAlt(_localctx, 10);
				{
				State = 806;
				atRule();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupRuleBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(XCSSParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WsContext[] ws() {
			return GetRuleContexts<WsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WsContext ws(int i) {
			return GetRuleContext<WsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(XCSSParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NestedStatementContext[] nestedStatement() {
			return GetRuleContexts<NestedStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NestedStatementContext nestedStatement(int i) {
			return GetRuleContext<NestedStatementContext>(i);
		}
		public GroupRuleBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupRuleBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXCSSParserVisitor<TResult> typedVisitor = visitor as IXCSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupRuleBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GroupRuleBodyContext groupRuleBody() {
		GroupRuleBodyContext _localctx = new GroupRuleBodyContext(Context, State);
		EnterRule(_localctx, 98, RULE_groupRuleBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 809;
			Match(OpenBrace);
			State = 810;
			ws();
			State = 814;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OpenBracket) | (1L << OpenParen) | (1L << OpenBrace) | (1L << Colon) | (1L << Dot) | (1L << Multiply) | (1L << Pipe) | (1L << Url) | (1L << Includes) | (1L << DashMatch) | (1L << Hash) | (1L << Page) | (1L << Media) | (1L << Percentage) | (1L << Url_) | (1L << UnicodeRange) | (1L << MediaOnly) | (1L << Not) | (1L << And) | (1L << Dimension) | (1L << UnknownDimension) | (1L << Plus) | (1L << Minus) | (1L << PseudoNot) | (1L << Number) | (1L << String_) | (1L << FontFace) | (1L << Supports) | (1L << Or) | (1L << Keyframes) | (1L << From) | (1L << To) | (1L << Viewport) | (1L << CounterStyle) | (1L << FontFeatureValues) | (1L << AtKeyword) | (1L << Ident) | (1L << Function_))) != 0)) {
				{
				{
				State = 811;
				nestedStatement();
				}
				}
				State = 816;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 817;
			Match(CloseBrace);
			State = 818;
			ws();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SupportsRuleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Supports() { return GetToken(XCSSParser.Supports, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WsContext[] ws() {
			return GetRuleContexts<WsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WsContext ws(int i) {
			return GetRuleContext<WsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SupportsConditionContext supportsCondition() {
			return GetRuleContext<SupportsConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GroupRuleBodyContext groupRuleBody() {
			return GetRuleContext<GroupRuleBodyContext>(0);
		}
		public SupportsRuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_supportsRule; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXCSSParserVisitor<TResult> typedVisitor = visitor as IXCSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSupportsRule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SupportsRuleContext supportsRule() {
		SupportsRuleContext _localctx = new SupportsRuleContext(Context, State);
		EnterRule(_localctx, 100, RULE_supportsRule);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 820;
			Match(Supports);
			State = 821;
			ws();
			State = 822;
			supportsCondition();
			State = 823;
			ws();
			State = 824;
			groupRuleBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SupportsConditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SupportsNegationContext supportsNegation() {
			return GetRuleContext<SupportsNegationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SupportsConjunctionContext supportsConjunction() {
			return GetRuleContext<SupportsConjunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SupportsDisjunctionContext supportsDisjunction() {
			return GetRuleContext<SupportsDisjunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SupportsConditionInParensContext supportsConditionInParens() {
			return GetRuleContext<SupportsConditionInParensContext>(0);
		}
		public SupportsConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_supportsCondition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXCSSParserVisitor<TResult> typedVisitor = visitor as IXCSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSupportsCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SupportsConditionContext supportsCondition() {
		SupportsConditionContext _localctx = new SupportsConditionContext(Context, State);
		EnterRule(_localctx, 102, RULE_supportsCondition);
		try {
			State = 830;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,84,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 826;
				supportsNegation();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 827;
				supportsConjunction();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 828;
				supportsDisjunction();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 829;
				supportsConditionInParens();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SupportsConditionInParensContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(XCSSParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WsContext[] ws() {
			return GetRuleContexts<WsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WsContext ws(int i) {
			return GetRuleContext<WsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SupportsConditionContext supportsCondition() {
			return GetRuleContext<SupportsConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(XCSSParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SupportsDeclarationConditionContext supportsDeclarationCondition() {
			return GetRuleContext<SupportsDeclarationConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GeneralEnclosedContext generalEnclosed() {
			return GetRuleContext<GeneralEnclosedContext>(0);
		}
		public SupportsConditionInParensContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_supportsConditionInParens; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXCSSParserVisitor<TResult> typedVisitor = visitor as IXCSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSupportsConditionInParens(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SupportsConditionInParensContext supportsConditionInParens() {
		SupportsConditionInParensContext _localctx = new SupportsConditionInParensContext(Context, State);
		EnterRule(_localctx, 104, RULE_supportsConditionInParens);
		try {
			State = 840;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,85,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 832;
				Match(OpenParen);
				State = 833;
				ws();
				State = 834;
				supportsCondition();
				State = 835;
				ws();
				State = 836;
				Match(CloseParen);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 838;
				supportsDeclarationCondition();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 839;
				generalEnclosed();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SupportsNegationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Not() { return GetToken(XCSSParser.Not, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WsContext[] ws() {
			return GetRuleContexts<WsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WsContext ws(int i) {
			return GetRuleContext<WsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Space() { return GetToken(XCSSParser.Space, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SupportsConditionInParensContext supportsConditionInParens() {
			return GetRuleContext<SupportsConditionInParensContext>(0);
		}
		public SupportsNegationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_supportsNegation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXCSSParserVisitor<TResult> typedVisitor = visitor as IXCSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSupportsNegation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SupportsNegationContext supportsNegation() {
		SupportsNegationContext _localctx = new SupportsNegationContext(Context, State);
		EnterRule(_localctx, 106, RULE_supportsNegation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 842;
			Match(Not);
			State = 843;
			ws();
			State = 844;
			Match(Space);
			State = 845;
			ws();
			State = 846;
			supportsConditionInParens();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SupportsConjunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SupportsConditionInParensContext[] supportsConditionInParens() {
			return GetRuleContexts<SupportsConditionInParensContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SupportsConditionInParensContext supportsConditionInParens(int i) {
			return GetRuleContext<SupportsConditionInParensContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WsContext[] ws() {
			return GetRuleContexts<WsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WsContext ws(int i) {
			return GetRuleContext<WsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Space() { return GetTokens(XCSSParser.Space); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Space(int i) {
			return GetToken(XCSSParser.Space, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] And() { return GetTokens(XCSSParser.And); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode And(int i) {
			return GetToken(XCSSParser.And, i);
		}
		public SupportsConjunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_supportsConjunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXCSSParserVisitor<TResult> typedVisitor = visitor as IXCSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSupportsConjunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SupportsConjunctionContext supportsConjunction() {
		SupportsConjunctionContext _localctx = new SupportsConjunctionContext(Context, State);
		EnterRule(_localctx, 108, RULE_supportsConjunction);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 848;
			supportsConditionInParens();
			State = 858;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 849;
					ws();
					State = 850;
					Match(Space);
					State = 851;
					ws();
					State = 852;
					Match(And);
					State = 853;
					ws();
					State = 854;
					Match(Space);
					State = 855;
					ws();
					State = 856;
					supportsConditionInParens();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 860;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,86,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SupportsDisjunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SupportsConditionInParensContext[] supportsConditionInParens() {
			return GetRuleContexts<SupportsConditionInParensContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SupportsConditionInParensContext supportsConditionInParens(int i) {
			return GetRuleContext<SupportsConditionInParensContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WsContext[] ws() {
			return GetRuleContexts<WsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WsContext ws(int i) {
			return GetRuleContext<WsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Space() { return GetTokens(XCSSParser.Space); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Space(int i) {
			return GetToken(XCSSParser.Space, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Or() { return GetTokens(XCSSParser.Or); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Or(int i) {
			return GetToken(XCSSParser.Or, i);
		}
		public SupportsDisjunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_supportsDisjunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXCSSParserVisitor<TResult> typedVisitor = visitor as IXCSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSupportsDisjunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SupportsDisjunctionContext supportsDisjunction() {
		SupportsDisjunctionContext _localctx = new SupportsDisjunctionContext(Context, State);
		EnterRule(_localctx, 110, RULE_supportsDisjunction);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 862;
			supportsConditionInParens();
			State = 872;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 863;
					ws();
					State = 864;
					Match(Space);
					State = 865;
					ws();
					State = 866;
					Match(Or);
					State = 867;
					ws();
					State = 868;
					Match(Space);
					State = 869;
					ws();
					State = 870;
					supportsConditionInParens();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 874;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,87,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SupportsDeclarationConditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(XCSSParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WsContext ws() {
			return GetRuleContext<WsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(XCSSParser.CloseParen, 0); }
		public SupportsDeclarationConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_supportsDeclarationCondition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXCSSParserVisitor<TResult> typedVisitor = visitor as IXCSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSupportsDeclarationCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SupportsDeclarationConditionContext supportsDeclarationCondition() {
		SupportsDeclarationConditionContext _localctx = new SupportsDeclarationConditionContext(Context, State);
		EnterRule(_localctx, 112, RULE_supportsDeclarationCondition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 876;
			Match(OpenParen);
			State = 877;
			ws();
			State = 878;
			declaration();
			State = 879;
			Match(CloseParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GeneralEnclosedContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(XCSSParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Function_() { return GetToken(XCSSParser.Function_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(XCSSParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Any_Context[] any_() {
			return GetRuleContexts<Any_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Any_Context any_(int i) {
			return GetRuleContext<Any_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnusedContext[] unused() {
			return GetRuleContexts<UnusedContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnusedContext unused(int i) {
			return GetRuleContext<UnusedContext>(i);
		}
		public GeneralEnclosedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generalEnclosed; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXCSSParserVisitor<TResult> typedVisitor = visitor as IXCSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGeneralEnclosed(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GeneralEnclosedContext generalEnclosed() {
		GeneralEnclosedContext _localctx = new GeneralEnclosedContext(Context, State);
		EnterRule(_localctx, 114, RULE_generalEnclosed);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 881;
			_la = TokenStream.LA(1);
			if ( !(_la==OpenParen || _la==Function_) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 886;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OpenBracket) | (1L << OpenParen) | (1L << OpenBrace) | (1L << SemiColon) | (1L << Colon) | (1L << Url) | (1L << Cdo) | (1L << Cdc) | (1L << Includes) | (1L << DashMatch) | (1L << Hash) | (1L << Percentage) | (1L << Url_) | (1L << UnicodeRange) | (1L << MediaOnly) | (1L << Not) | (1L << And) | (1L << Dimension) | (1L << UnknownDimension) | (1L << Plus) | (1L << Minus) | (1L << Number) | (1L << String_) | (1L << Or) | (1L << From) | (1L << To) | (1L << AtKeyword) | (1L << Ident) | (1L << Function_))) != 0)) {
				{
				State = 884;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case OpenBracket:
				case OpenParen:
				case Colon:
				case Url:
				case Includes:
				case DashMatch:
				case Hash:
				case Percentage:
				case Url_:
				case UnicodeRange:
				case MediaOnly:
				case Not:
				case And:
				case Dimension:
				case UnknownDimension:
				case Plus:
				case Minus:
				case Number:
				case String_:
				case Or:
				case From:
				case To:
				case Ident:
				case Function_:
					{
					State = 882;
					any_();
					}
					break;
				case OpenBrace:
				case SemiColon:
				case Cdo:
				case Cdc:
				case AtKeyword:
					{
					State = 883;
					unused();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 888;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 889;
			Match(CloseParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UrlContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Url_() { return GetToken(XCSSParser.Url_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WsContext[] ws() {
			return GetRuleContexts<WsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WsContext ws(int i) {
			return GetRuleContext<WsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String_() { return GetToken(XCSSParser.String_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(XCSSParser.CloseParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Url() { return GetToken(XCSSParser.Url, 0); }
		public UrlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_url; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXCSSParserVisitor<TResult> typedVisitor = visitor as IXCSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUrl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UrlContext url() {
		UrlContext _localctx = new UrlContext(Context, State);
		EnterRule(_localctx, 116, RULE_url);
		try {
			State = 898;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Url_:
				EnterOuterAlt(_localctx, 1);
				{
				State = 891;
				Match(Url_);
				State = 892;
				ws();
				State = 893;
				Match(String_);
				State = 894;
				ws();
				State = 895;
				Match(CloseParen);
				}
				break;
			case Url:
				EnterOuterAlt(_localctx, 2);
				{
				State = 897;
				Match(Url);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Var_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Var() { return GetToken(XCSSParser.Var, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WsContext[] ws() {
			return GetRuleContexts<WsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WsContext ws(int i) {
			return GetRuleContext<WsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Variable() { return GetToken(XCSSParser.Variable, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(XCSSParser.CloseParen, 0); }
		public Var_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXCSSParserVisitor<TResult> typedVisitor = visitor as IXCSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVar_(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Var_Context var_() {
		Var_Context _localctx = new Var_Context(Context, State);
		EnterRule(_localctx, 118, RULE_var_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 900;
			Match(Var);
			State = 901;
			ws();
			State = 902;
			Match(Variable);
			State = 903;
			ws();
			State = 904;
			Match(CloseParen);
			State = 905;
			ws();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CalcContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Calc() { return GetToken(XCSSParser.Calc, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WsContext[] ws() {
			return GetRuleContexts<WsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WsContext ws(int i) {
			return GetRuleContext<WsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CalcSumContext calcSum() {
			return GetRuleContext<CalcSumContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(XCSSParser.CloseParen, 0); }
		public CalcContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_calc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXCSSParserVisitor<TResult> typedVisitor = visitor as IXCSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCalc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CalcContext calc() {
		CalcContext _localctx = new CalcContext(Context, State);
		EnterRule(_localctx, 120, RULE_calc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 907;
			Match(Calc);
			State = 908;
			ws();
			State = 909;
			calcSum();
			State = 910;
			Match(CloseParen);
			State = 911;
			ws();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CalcSumContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CalcProductContext[] calcProduct() {
			return GetRuleContexts<CalcProductContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CalcProductContext calcProduct(int i) {
			return GetRuleContext<CalcProductContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Space() { return GetTokens(XCSSParser.Space); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Space(int i) {
			return GetToken(XCSSParser.Space, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WsContext[] ws() {
			return GetRuleContexts<WsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WsContext ws(int i) {
			return GetRuleContext<WsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Plus() { return GetTokens(XCSSParser.Plus); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus(int i) {
			return GetToken(XCSSParser.Plus, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Minus() { return GetTokens(XCSSParser.Minus); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus(int i) {
			return GetToken(XCSSParser.Minus, i);
		}
		public CalcSumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_calcSum; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXCSSParserVisitor<TResult> typedVisitor = visitor as IXCSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCalcSum(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CalcSumContext calcSum() {
		CalcSumContext _localctx = new CalcSumContext(Context, State);
		EnterRule(_localctx, 122, RULE_calcSum);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 913;
			calcProduct();
			State = 924;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Space) {
				{
				{
				State = 914;
				Match(Space);
				State = 915;
				ws();
				State = 916;
				_la = TokenStream.LA(1);
				if ( !(_la==Plus || _la==Minus) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 917;
				ws();
				State = 918;
				Match(Space);
				State = 919;
				ws();
				State = 920;
				calcProduct();
				}
				}
				State = 926;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CalcProductContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CalcValueContext[] calcValue() {
			return GetRuleContexts<CalcValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CalcValueContext calcValue(int i) {
			return GetRuleContext<CalcValueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Multiply() { return GetTokens(XCSSParser.Multiply); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Multiply(int i) {
			return GetToken(XCSSParser.Multiply, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WsContext[] ws() {
			return GetRuleContexts<WsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WsContext ws(int i) {
			return GetRuleContext<WsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Divide() { return GetTokens(XCSSParser.Divide); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Divide(int i) {
			return GetToken(XCSSParser.Divide, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext[] number() {
			return GetRuleContexts<NumberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number(int i) {
			return GetRuleContext<NumberContext>(i);
		}
		public CalcProductContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_calcProduct; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXCSSParserVisitor<TResult> typedVisitor = visitor as IXCSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCalcProduct(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CalcProductContext calcProduct() {
		CalcProductContext _localctx = new CalcProductContext(Context, State);
		EnterRule(_localctx, 124, RULE_calcProduct);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 927;
			calcValue();
			State = 939;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Multiply || _la==Divide) {
				{
				State = 937;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Multiply:
					{
					State = 928;
					Match(Multiply);
					State = 929;
					ws();
					State = 930;
					calcValue();
					}
					break;
				case Divide:
					{
					State = 932;
					Match(Divide);
					State = 933;
					ws();
					State = 934;
					number();
					State = 935;
					ws();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 941;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CalcValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WsContext[] ws() {
			return GetRuleContexts<WsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WsContext ws(int i) {
			return GetRuleContext<WsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DimensionContext dimension() {
			return GetRuleContext<DimensionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnknownDimensionContext unknownDimension() {
			return GetRuleContext<UnknownDimensionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PercentageContext percentage() {
			return GetRuleContext<PercentageContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParen() { return GetToken(XCSSParser.OpenParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CalcSumContext calcSum() {
			return GetRuleContext<CalcSumContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(XCSSParser.CloseParen, 0); }
		public CalcValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_calcValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXCSSParserVisitor<TResult> typedVisitor = visitor as IXCSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCalcValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CalcValueContext calcValue() {
		CalcValueContext _localctx = new CalcValueContext(Context, State);
		EnterRule(_localctx, 126, RULE_calcValue);
		try {
			State = 960;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,94,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 942;
				number();
				State = 943;
				ws();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 945;
				dimension();
				State = 946;
				ws();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 948;
				unknownDimension();
				State = 949;
				ws();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 951;
				percentage();
				State = 952;
				ws();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 954;
				Match(OpenParen);
				State = 955;
				ws();
				State = 956;
				calcSum();
				State = 957;
				Match(CloseParen);
				State = 958;
				ws();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FontFaceRuleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FontFace() { return GetToken(XCSSParser.FontFace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WsContext[] ws() {
			return GetRuleContexts<WsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WsContext ws(int i) {
			return GetRuleContext<WsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(XCSSParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(XCSSParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FontFaceDeclarationContext[] fontFaceDeclaration() {
			return GetRuleContexts<FontFaceDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FontFaceDeclarationContext fontFaceDeclaration(int i) {
			return GetRuleContext<FontFaceDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SemiColon() { return GetTokens(XCSSParser.SemiColon); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemiColon(int i) {
			return GetToken(XCSSParser.SemiColon, i);
		}
		public FontFaceRuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fontFaceRule; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXCSSParserVisitor<TResult> typedVisitor = visitor as IXCSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFontFaceRule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FontFaceRuleContext fontFaceRule() {
		FontFaceRuleContext _localctx = new FontFaceRuleContext(Context, State);
		EnterRule(_localctx, 128, RULE_fontFaceRule);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 962;
			Match(FontFace);
			State = 963;
			ws();
			State = 964;
			Match(OpenBrace);
			State = 965;
			ws();
			State = 967;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Multiply) | (1L << Underscore) | (1L << MediaOnly) | (1L << Not) | (1L << And) | (1L << Or) | (1L << From) | (1L << To) | (1L << Variable) | (1L << Ident))) != 0)) {
				{
				State = 966;
				fontFaceDeclaration();
				}
			}

			State = 976;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SemiColon) {
				{
				{
				State = 969;
				Match(SemiColon);
				State = 970;
				ws();
				State = 972;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Multiply) | (1L << Underscore) | (1L << MediaOnly) | (1L << Not) | (1L << And) | (1L << Or) | (1L << From) | (1L << To) | (1L << Variable) | (1L << Ident))) != 0)) {
					{
					State = 971;
					fontFaceDeclaration();
					}
				}

				}
				}
				State = 978;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 979;
			Match(CloseBrace);
			State = 980;
			ws();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FontFaceDeclarationContext : ParserRuleContext {
		public FontFaceDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fontFaceDeclaration; } }
	 
		public FontFaceDeclarationContext() { }
		public virtual void CopyFrom(FontFaceDeclarationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class KnownFontFaceDeclarationContext : FontFaceDeclarationContext {
		[System.Diagnostics.DebuggerNonUserCode] public Property_Context property_() {
			return GetRuleContext<Property_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(XCSSParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WsContext ws() {
			return GetRuleContext<WsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public KnownFontFaceDeclarationContext(FontFaceDeclarationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXCSSParserVisitor<TResult> typedVisitor = visitor as IXCSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKnownFontFaceDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnknownFontFaceDeclarationContext : FontFaceDeclarationContext {
		[System.Diagnostics.DebuggerNonUserCode] public Property_Context property_() {
			return GetRuleContext<Property_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(XCSSParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WsContext ws() {
			return GetRuleContext<WsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public UnknownFontFaceDeclarationContext(FontFaceDeclarationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXCSSParserVisitor<TResult> typedVisitor = visitor as IXCSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnknownFontFaceDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FontFaceDeclarationContext fontFaceDeclaration() {
		FontFaceDeclarationContext _localctx = new FontFaceDeclarationContext(Context, State);
		EnterRule(_localctx, 130, RULE_fontFaceDeclaration);
		try {
			State = 992;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,98,Context) ) {
			case 1:
				_localctx = new KnownFontFaceDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 982;
				property_();
				State = 983;
				Match(Colon);
				State = 984;
				ws();
				State = 985;
				expr();
				}
				break;
			case 2:
				_localctx = new UnknownFontFaceDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 987;
				property_();
				State = 988;
				Match(Colon);
				State = 989;
				ws();
				State = 990;
				value();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeyframesRuleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Keyframes() { return GetToken(XCSSParser.Keyframes, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WsContext[] ws() {
			return GetRuleContexts<WsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WsContext ws(int i) {
			return GetRuleContext<WsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Space() { return GetToken(XCSSParser.Space, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(XCSSParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(XCSSParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public KeyframeBlockContext[] keyframeBlock() {
			return GetRuleContexts<KeyframeBlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public KeyframeBlockContext keyframeBlock(int i) {
			return GetRuleContext<KeyframeBlockContext>(i);
		}
		public KeyframesRuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyframesRule; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXCSSParserVisitor<TResult> typedVisitor = visitor as IXCSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyframesRule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeyframesRuleContext keyframesRule() {
		KeyframesRuleContext _localctx = new KeyframesRuleContext(Context, State);
		EnterRule(_localctx, 132, RULE_keyframesRule);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 994;
			Match(Keyframes);
			State = 995;
			ws();
			State = 996;
			Match(Space);
			State = 997;
			ws();
			State = 998;
			ident();
			State = 999;
			ws();
			State = 1000;
			Match(OpenBrace);
			State = 1001;
			ws();
			State = 1005;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Percentage) | (1L << From) | (1L << To))) != 0)) {
				{
				{
				State = 1002;
				keyframeBlock();
				}
				}
				State = 1007;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1008;
			Match(CloseBrace);
			State = 1009;
			ws();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeyframeBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public KeyframeSelectorContext keyframeSelector() {
			return GetRuleContext<KeyframeSelectorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(XCSSParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WsContext[] ws() {
			return GetRuleContexts<WsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WsContext ws(int i) {
			return GetRuleContext<WsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(XCSSParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationListContext declarationList() {
			return GetRuleContext<DeclarationListContext>(0);
		}
		public KeyframeBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyframeBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXCSSParserVisitor<TResult> typedVisitor = visitor as IXCSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyframeBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeyframeBlockContext keyframeBlock() {
		KeyframeBlockContext _localctx = new KeyframeBlockContext(Context, State);
		EnterRule(_localctx, 134, RULE_keyframeBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 1011;
			keyframeSelector();
			State = 1012;
			Match(OpenBrace);
			State = 1013;
			ws();
			State = 1015;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SemiColon) | (1L << Multiply) | (1L << Underscore) | (1L << MediaOnly) | (1L << Not) | (1L << And) | (1L << Or) | (1L << From) | (1L << To) | (1L << Variable) | (1L << Ident))) != 0)) {
				{
				State = 1014;
				declarationList();
				}
			}

			State = 1017;
			Match(CloseBrace);
			State = 1018;
			ws();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeyframeSelectorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public WsContext[] ws() {
			return GetRuleContexts<WsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WsContext ws(int i) {
			return GetRuleContext<WsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] From() { return GetTokens(XCSSParser.From); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode From(int i) {
			return GetToken(XCSSParser.From, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] To() { return GetTokens(XCSSParser.To); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode To(int i) {
			return GetToken(XCSSParser.To, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Percentage() { return GetTokens(XCSSParser.Percentage); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Percentage(int i) {
			return GetToken(XCSSParser.Percentage, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(XCSSParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(XCSSParser.Comma, i);
		}
		public KeyframeSelectorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyframeSelector; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXCSSParserVisitor<TResult> typedVisitor = visitor as IXCSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyframeSelector(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeyframeSelectorContext keyframeSelector() {
		KeyframeSelectorContext _localctx = new KeyframeSelectorContext(Context, State);
		EnterRule(_localctx, 136, RULE_keyframeSelector);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1020;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Percentage) | (1L << From) | (1L << To))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1021;
			ws();
			State = 1029;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 1022;
				Match(Comma);
				State = 1023;
				ws();
				State = 1024;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Percentage) | (1L << From) | (1L << To))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1025;
				ws();
				}
				}
				State = 1031;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ViewportContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Viewport() { return GetToken(XCSSParser.Viewport, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WsContext[] ws() {
			return GetRuleContexts<WsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WsContext ws(int i) {
			return GetRuleContext<WsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(XCSSParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(XCSSParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationListContext declarationList() {
			return GetRuleContext<DeclarationListContext>(0);
		}
		public ViewportContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_viewport; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXCSSParserVisitor<TResult> typedVisitor = visitor as IXCSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitViewport(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ViewportContext viewport() {
		ViewportContext _localctx = new ViewportContext(Context, State);
		EnterRule(_localctx, 138, RULE_viewport);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1032;
			Match(Viewport);
			State = 1033;
			ws();
			State = 1034;
			Match(OpenBrace);
			State = 1035;
			ws();
			State = 1037;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SemiColon) | (1L << Multiply) | (1L << Underscore) | (1L << MediaOnly) | (1L << Not) | (1L << And) | (1L << Or) | (1L << From) | (1L << To) | (1L << Variable) | (1L << Ident))) != 0)) {
				{
				State = 1036;
				declarationList();
				}
			}

			State = 1039;
			Match(CloseBrace);
			State = 1040;
			ws();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CounterStyleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CounterStyle() { return GetToken(XCSSParser.CounterStyle, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WsContext[] ws() {
			return GetRuleContexts<WsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WsContext ws(int i) {
			return GetRuleContext<WsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(XCSSParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(XCSSParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationListContext declarationList() {
			return GetRuleContext<DeclarationListContext>(0);
		}
		public CounterStyleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_counterStyle; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXCSSParserVisitor<TResult> typedVisitor = visitor as IXCSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCounterStyle(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CounterStyleContext counterStyle() {
		CounterStyleContext _localctx = new CounterStyleContext(Context, State);
		EnterRule(_localctx, 140, RULE_counterStyle);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1042;
			Match(CounterStyle);
			State = 1043;
			ws();
			State = 1044;
			ident();
			State = 1045;
			ws();
			State = 1046;
			Match(OpenBrace);
			State = 1047;
			ws();
			State = 1049;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SemiColon) | (1L << Multiply) | (1L << Underscore) | (1L << MediaOnly) | (1L << Not) | (1L << And) | (1L << Or) | (1L << From) | (1L << To) | (1L << Variable) | (1L << Ident))) != 0)) {
				{
				State = 1048;
				declarationList();
				}
			}

			State = 1051;
			Match(CloseBrace);
			State = 1052;
			ws();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FontFeatureValuesRuleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FontFeatureValues() { return GetToken(XCSSParser.FontFeatureValues, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WsContext[] ws() {
			return GetRuleContexts<WsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WsContext ws(int i) {
			return GetRuleContext<WsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FontFamilyNameListContext fontFamilyNameList() {
			return GetRuleContext<FontFamilyNameListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(XCSSParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(XCSSParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FeatureValueBlockContext[] featureValueBlock() {
			return GetRuleContexts<FeatureValueBlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FeatureValueBlockContext featureValueBlock(int i) {
			return GetRuleContext<FeatureValueBlockContext>(i);
		}
		public FontFeatureValuesRuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fontFeatureValuesRule; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXCSSParserVisitor<TResult> typedVisitor = visitor as IXCSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFontFeatureValuesRule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FontFeatureValuesRuleContext fontFeatureValuesRule() {
		FontFeatureValuesRuleContext _localctx = new FontFeatureValuesRuleContext(Context, State);
		EnterRule(_localctx, 142, RULE_fontFeatureValuesRule);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1054;
			Match(FontFeatureValues);
			State = 1055;
			ws();
			State = 1056;
			fontFamilyNameList();
			State = 1057;
			ws();
			State = 1058;
			Match(OpenBrace);
			State = 1059;
			ws();
			State = 1063;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AtKeyword) {
				{
				{
				State = 1060;
				featureValueBlock();
				}
				}
				State = 1065;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1066;
			Match(CloseBrace);
			State = 1067;
			ws();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FontFamilyNameListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FontFamilyNameContext[] fontFamilyName() {
			return GetRuleContexts<FontFamilyNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FontFamilyNameContext fontFamilyName(int i) {
			return GetRuleContext<FontFamilyNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WsContext[] ws() {
			return GetRuleContexts<WsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WsContext ws(int i) {
			return GetRuleContext<WsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(XCSSParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(XCSSParser.Comma, i);
		}
		public FontFamilyNameListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fontFamilyNameList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXCSSParserVisitor<TResult> typedVisitor = visitor as IXCSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFontFamilyNameList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FontFamilyNameListContext fontFamilyNameList() {
		FontFamilyNameListContext _localctx = new FontFamilyNameListContext(Context, State);
		EnterRule(_localctx, 144, RULE_fontFamilyNameList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1069;
			fontFamilyName();
			State = 1077;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,105,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1070;
					ws();
					State = 1071;
					Match(Comma);
					State = 1072;
					ws();
					State = 1073;
					fontFamilyName();
					}
					} 
				}
				State = 1079;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,105,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FontFamilyNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String_() { return GetToken(XCSSParser.String_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext[] ident() {
			return GetRuleContexts<IdentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident(int i) {
			return GetRuleContext<IdentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WsContext[] ws() {
			return GetRuleContexts<WsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WsContext ws(int i) {
			return GetRuleContext<WsContext>(i);
		}
		public FontFamilyNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fontFamilyName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXCSSParserVisitor<TResult> typedVisitor = visitor as IXCSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFontFamilyName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FontFamilyNameContext fontFamilyName() {
		FontFamilyNameContext _localctx = new FontFamilyNameContext(Context, State);
		EnterRule(_localctx, 146, RULE_fontFamilyName);
		try {
			int _alt;
			State = 1090;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case String_:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1080;
				Match(String_);
				}
				break;
			case MediaOnly:
			case Not:
			case And:
			case Or:
			case From:
			case To:
			case Ident:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1081;
				ident();
				State = 1087;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,106,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1082;
						ws();
						State = 1083;
						ident();
						}
						} 
					}
					State = 1089;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,106,Context);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FeatureValueBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FeatureTypeContext featureType() {
			return GetRuleContext<FeatureTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WsContext[] ws() {
			return GetRuleContexts<WsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WsContext ws(int i) {
			return GetRuleContext<WsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(XCSSParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(XCSSParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FeatureValueDefinitionContext[] featureValueDefinition() {
			return GetRuleContexts<FeatureValueDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FeatureValueDefinitionContext featureValueDefinition(int i) {
			return GetRuleContext<FeatureValueDefinitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SemiColon() { return GetTokens(XCSSParser.SemiColon); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemiColon(int i) {
			return GetToken(XCSSParser.SemiColon, i);
		}
		public FeatureValueBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_featureValueBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXCSSParserVisitor<TResult> typedVisitor = visitor as IXCSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFeatureValueBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FeatureValueBlockContext featureValueBlock() {
		FeatureValueBlockContext _localctx = new FeatureValueBlockContext(Context, State);
		EnterRule(_localctx, 148, RULE_featureValueBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1092;
			featureType();
			State = 1093;
			ws();
			State = 1094;
			Match(OpenBrace);
			State = 1095;
			ws();
			State = 1097;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MediaOnly) | (1L << Not) | (1L << And) | (1L << Or) | (1L << From) | (1L << To) | (1L << Ident))) != 0)) {
				{
				State = 1096;
				featureValueDefinition();
				}
			}

			State = 1107;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SemiColon) | (1L << Comment) | (1L << Space))) != 0)) {
				{
				{
				State = 1099;
				ws();
				State = 1100;
				Match(SemiColon);
				State = 1101;
				ws();
				State = 1103;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MediaOnly) | (1L << Not) | (1L << And) | (1L << Or) | (1L << From) | (1L << To) | (1L << Ident))) != 0)) {
					{
					State = 1102;
					featureValueDefinition();
					}
				}

				}
				}
				State = 1109;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1110;
			Match(CloseBrace);
			State = 1111;
			ws();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FeatureTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AtKeyword() { return GetToken(XCSSParser.AtKeyword, 0); }
		public FeatureTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_featureType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXCSSParserVisitor<TResult> typedVisitor = visitor as IXCSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFeatureType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FeatureTypeContext featureType() {
		FeatureTypeContext _localctx = new FeatureTypeContext(Context, State);
		EnterRule(_localctx, 150, RULE_featureType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1113;
			Match(AtKeyword);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FeatureValueDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WsContext[] ws() {
			return GetRuleContexts<WsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WsContext ws(int i) {
			return GetRuleContext<WsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(XCSSParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext[] number() {
			return GetRuleContexts<NumberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumberContext number(int i) {
			return GetRuleContext<NumberContext>(i);
		}
		public FeatureValueDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_featureValueDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXCSSParserVisitor<TResult> typedVisitor = visitor as IXCSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFeatureValueDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FeatureValueDefinitionContext featureValueDefinition() {
		FeatureValueDefinitionContext _localctx = new FeatureValueDefinitionContext(Context, State);
		EnterRule(_localctx, 152, RULE_featureValueDefinition);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1115;
			ident();
			State = 1116;
			ws();
			State = 1117;
			Match(Colon);
			State = 1118;
			ws();
			State = 1119;
			number();
			State = 1125;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,111,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1120;
					ws();
					State = 1121;
					number();
					}
					} 
				}
				State = 1127;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,111,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ident() { return GetToken(XCSSParser.Ident, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MediaOnly() { return GetToken(XCSSParser.MediaOnly, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Not() { return GetToken(XCSSParser.Not, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode And() { return GetToken(XCSSParser.And, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Or() { return GetToken(XCSSParser.Or, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode From() { return GetToken(XCSSParser.From, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode To() { return GetToken(XCSSParser.To, 0); }
		public IdentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ident; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXCSSParserVisitor<TResult> typedVisitor = visitor as IXCSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentContext ident() {
		IdentContext _localctx = new IdentContext(Context, State);
		EnterRule(_localctx, 154, RULE_ident);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1128;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MediaOnly) | (1L << Not) | (1L << And) | (1L << Or) | (1L << From) | (1L << To) | (1L << Ident))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comment() { return GetTokens(XCSSParser.Comment); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comment(int i) {
			return GetToken(XCSSParser.Comment, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Space() { return GetTokens(XCSSParser.Space); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Space(int i) {
			return GetToken(XCSSParser.Space, i);
		}
		public WsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ws; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXCSSParserVisitor<TResult> typedVisitor = visitor as IXCSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WsContext ws() {
		WsContext _localctx = new WsContext(Context, State);
		EnterRule(_localctx, 156, RULE_ws);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1133;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,112,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1130;
					_la = TokenStream.LA(1);
					if ( !(_la==Comment || _la==Space) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					} 
				}
				State = 1135;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,112,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x42', '\x473', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x4', '/', '\t', '/', 
		'\x4', '\x30', '\t', '\x30', '\x4', '\x31', '\t', '\x31', '\x4', '\x32', 
		'\t', '\x32', '\x4', '\x33', '\t', '\x33', '\x4', '\x34', '\t', '\x34', 
		'\x4', '\x35', '\t', '\x35', '\x4', '\x36', '\t', '\x36', '\x4', '\x37', 
		'\t', '\x37', '\x4', '\x38', '\t', '\x38', '\x4', '\x39', '\t', '\x39', 
		'\x4', ':', '\t', ':', '\x4', ';', '\t', ';', '\x4', '<', '\t', '<', '\x4', 
		'=', '\t', '=', '\x4', '>', '\t', '>', '\x4', '?', '\t', '?', '\x4', '@', 
		'\t', '@', '\x4', '\x41', '\t', '\x41', '\x4', '\x42', '\t', '\x42', '\x4', 
		'\x43', '\t', '\x43', '\x4', '\x44', '\t', '\x44', '\x4', '\x45', '\t', 
		'\x45', '\x4', '\x46', '\t', '\x46', '\x4', 'G', '\t', 'G', '\x4', 'H', 
		'\t', 'H', '\x4', 'I', '\t', 'I', '\x4', 'J', '\t', 'J', '\x4', 'K', '\t', 
		'K', '\x4', 'L', '\t', 'L', '\x4', 'M', '\t', 'M', '\x4', 'N', '\t', 'N', 
		'\x4', 'O', '\t', 'O', '\x4', 'P', '\t', 'P', '\x3', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\a', '\x2', '\xA4', '\n', '\x2', '\f', '\x2', '\xE', '\x2', 
		'\xA7', '\v', '\x2', '\a', '\x2', '\xA9', '\n', '\x2', '\f', '\x2', '\xE', 
		'\x2', '\xAC', '\v', '\x2', '\x3', '\x2', '\x3', '\x2', '\a', '\x2', '\xB0', 
		'\n', '\x2', '\f', '\x2', '\xE', '\x2', '\xB3', '\v', '\x2', '\a', '\x2', 
		'\xB5', '\n', '\x2', '\f', '\x2', '\xE', '\x2', '\xB8', '\v', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\a', '\x2', '\xBC', '\n', '\x2', '\f', '\x2', '\xE', 
		'\x2', '\xBF', '\v', '\x2', '\a', '\x2', '\xC1', '\n', '\x2', '\f', '\x2', 
		'\xE', '\x2', '\xC4', '\v', '\x2', '\x3', '\x2', '\x3', '\x2', '\a', '\x2', 
		'\xC8', '\n', '\x2', '\f', '\x2', '\xE', '\x2', '\xCB', '\v', '\x2', '\a', 
		'\x2', '\xCD', '\n', '\x2', '\f', '\x2', '\xE', '\x2', '\xD0', '\v', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', 
		'\xE0', '\n', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x5', '\x4', '\xE6', '\n', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x5', '\x4', '\xF1', '\n', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', '\xFB', '\n', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x5', '\x4', '\x104', '\n', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x5', '\x4', '\x108', '\n', '\x4', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', 
		'\x10F', '\n', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '\x113', 
		'\n', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', 
		'\x5', '\x11E', '\n', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', 
		'\x122', '\n', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '\x126', 
		'\n', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\a', '\b', '\x135', '\n', '\b', 
		'\f', '\b', '\xE', '\b', '\x138', '\v', '\b', '\x5', '\b', '\x13A', '\n', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x5', '\t', '\x13F', '\n', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\a', '\t', '\x148', '\n', '\t', '\f', '\t', 
		'\xE', '\t', '\x14B', '\v', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\a', '\t', '\x152', '\n', '\t', '\f', '\t', 
		'\xE', '\t', '\x155', '\v', '\t', '\x5', '\t', '\x157', '\n', '\t', '\x3', 
		'\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x5', '\v', '\x162', '\n', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x5', '\r', '\x16D', '\n', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x5', '\r', '\x172', '\n', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x5', '\r', '\x177', '\n', 
		'\r', '\a', '\r', '\x179', '\n', '\r', '\f', '\r', '\xE', '\r', '\x17C', 
		'\v', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\a', '\xF', '\x18A', '\n', '\xF', 
		'\f', '\xF', '\xE', '\xF', '\x18D', '\v', '\xF', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\a', 
		'\x10', '\x195', '\n', '\x10', '\f', '\x10', '\xE', '\x10', '\x198', '\v', 
		'\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x5', '\x11', '\x1A2', 
		'\n', '\x11', '\x3', '\x12', '\x3', '\x12', '\x5', '\x12', '\x1A6', '\n', 
		'\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\a', '\x12', '\x1AD', '\n', '\x12', '\f', '\x12', '\xE', '\x12', 
		'\x1B0', '\v', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\x6', '\x12', '\x1B7', '\n', '\x12', '\r', '\x12', 
		'\xE', '\x12', '\x1B8', '\x5', '\x12', '\x1BB', '\n', '\x12', '\x3', '\x13', 
		'\x5', '\x13', '\x1BE', '\n', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x14', '\x3', '\x14', '\x5', '\x14', '\x1C4', '\n', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\x3', '\x15', '\x3', '\x15', '\x3', '\x16', '\x5', '\x16', 
		'\x1CB', '\n', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x5', 
		'\x18', '\x1D5', '\n', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', 
		'\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x5', '\x18', '\x1DD', '\n', 
		'\x18', '\x3', '\x18', '\x3', '\x18', '\x5', '\x18', '\x1E1', '\n', '\x18', 
		'\x3', '\x18', '\x3', '\x18', '\x3', '\x19', '\x3', '\x19', '\x5', '\x19', 
		'\x1E7', '\n', '\x19', '\x3', '\x19', '\x3', '\x19', '\x5', '\x19', '\x1EB', 
		'\n', '\x19', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', 
		'\x3', '\x1A', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', 
		'\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x5', '\x1B', '\x1F9', '\n', 
		'\x1B', '\x3', '\x1B', '\x6', '\x1B', '\x1FC', '\n', '\x1B', '\r', '\x1B', 
		'\xE', '\x1B', '\x1FD', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', 
		'\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1D', '\x3', '\x1D', '\x3', 
		'\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x5', '\x1D', '\x20C', 
		'\n', '\x1D', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', 
		'\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x5', '\x1E', 
		'\x216', '\n', '\x1E', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', 
		'\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', 
		'\x1F', '\x5', '\x1F', '\x221', '\n', '\x1F', '\x3', ' ', '\x3', ' ', 
		'\x3', ' ', '\x3', ' ', '\x5', ' ', '\x227', '\n', ' ', '\x3', ' ', '\x3', 
		' ', '\x3', ' ', '\x3', ' ', '\a', ' ', '\x22D', '\n', ' ', '\f', ' ', 
		'\xE', ' ', '\x230', '\v', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x5', 
		' ', '\x235', '\n', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x5', ' ', 
		'\x23A', '\n', ' ', '\x3', '!', '\x3', '!', '\a', '!', '\x23E', '\n', 
		'!', '\f', '!', '\xE', '!', '\x241', '\v', '!', '\x3', '!', '\x3', '!', 
		'\x3', '!', '\x3', '!', '\x3', '!', '\x5', '!', '\x248', '\n', '!', '\a', 
		'!', '\x24A', '\n', '!', '\f', '!', '\xE', '!', '\x24D', '\v', '!', '\x3', 
		'\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x5', '\"', 
		'\x254', '\n', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', 
		'\x3', '\"', '\x5', '\"', '\x25B', '\n', '\"', '\x3', '#', '\x3', '#', 
		'\x3', '#', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', '\x6', '$', 
		'\x264', '\n', '$', '\r', '$', '\xE', '$', '\x265', '\x3', '%', '\x3', 
		'%', '\x5', '%', '\x26A', '\n', '%', '\x3', '%', '\a', '%', '\x26D', '\n', 
		'%', '\f', '%', '\xE', '%', '\x270', '\v', '%', '\x3', '&', '\x3', '&', 
		'\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', 
		'\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', 
		'\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', 
		'\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', 
		'\x3', '&', '\x5', '&', '\x28D', '\n', '&', '\x3', '\'', '\x3', '\'', 
		'\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', '(', '\x3', 
		'(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', ')', '\x3', 
		')', '\x3', ')', '\x3', '*', '\x5', '*', '\x29F', '\n', '*', '\x3', '*', 
		'\x3', '*', '\x3', '+', '\x5', '+', '\x2A4', '\n', '+', '\x3', '+', '\x3', 
		'+', '\x3', ',', '\x5', ',', '\x2A9', '\n', ',', '\x3', ',', '\x3', ',', 
		'\x3', '-', '\x5', '-', '\x2AE', '\n', '-', '\x3', '-', '\x3', '-', '\x3', 
		'.', '\x3', '.', '\x3', '.', '\x3', '.', '\x3', '.', '\x3', '.', '\x3', 
		'.', '\x3', '.', '\x3', '.', '\x3', '.', '\x3', '.', '\x3', '.', '\x3', 
		'.', '\x3', '.', '\x3', '.', '\x3', '.', '\x3', '.', '\x3', '.', '\x3', 
		'.', '\x3', '.', '\x3', '.', '\x3', '.', '\x3', '.', '\x3', '.', '\x3', 
		'.', '\x3', '.', '\x3', '.', '\x3', '.', '\x3', '.', '\x3', '.', '\x3', 
		'.', '\x3', '.', '\x3', '.', '\x3', '.', '\a', '.', '\x2D4', '\n', '.', 
		'\f', '.', '\xE', '.', '\x2D7', '\v', '.', '\x3', '.', '\x3', '.', '\x3', 
		'.', '\x3', '.', '\x3', '.', '\x3', '.', '\x3', '.', '\a', '.', '\x2E0', 
		'\n', '.', '\f', '.', '\xE', '.', '\x2E3', '\v', '.', '\x3', '.', '\x3', 
		'.', '\x3', '.', '\x3', '.', '\x3', '.', '\x3', '.', '\x3', '.', '\a', 
		'.', '\x2EC', '\n', '.', '\f', '.', '\xE', '.', '\x2EF', '\v', '.', '\x3', 
		'.', '\x3', '.', '\x3', '.', '\x5', '.', '\x2F4', '\n', '.', '\x3', '/', 
		'\x3', '/', '\x3', '/', '\a', '/', '\x2F9', '\n', '/', '\f', '/', '\xE', 
		'/', '\x2FC', '\v', '/', '\x3', '/', '\x3', '/', '\x3', '/', '\x5', '/', 
		'\x301', '\n', '/', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', 
		'\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', 
		'\x30', '\x5', '\x30', '\x30C', '\n', '\x30', '\x3', '\x31', '\x3', '\x31', 
		'\x3', '\x31', '\x3', '\x31', '\x3', '\x31', '\x3', '\x31', '\x3', '\x31', 
		'\x3', '\x31', '\x3', '\x31', '\x3', '\x31', '\a', '\x31', '\x318', '\n', 
		'\x31', '\f', '\x31', '\xE', '\x31', '\x31B', '\v', '\x31', '\x3', '\x31', 
		'\x3', '\x31', '\x3', '\x31', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', 
		'\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', 
		'\x3', '\x32', '\x3', '\x32', '\x5', '\x32', '\x32A', '\n', '\x32', '\x3', 
		'\x33', '\x3', '\x33', '\x3', '\x33', '\a', '\x33', '\x32F', '\n', '\x33', 
		'\f', '\x33', '\xE', '\x33', '\x332', '\v', '\x33', '\x3', '\x33', '\x3', 
		'\x33', '\x3', '\x33', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', 
		'\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x35', '\x3', '\x35', '\x3', 
		'\x35', '\x3', '\x35', '\x5', '\x35', '\x341', '\n', '\x35', '\x3', '\x36', 
		'\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', 
		'\x3', '\x36', '\x3', '\x36', '\x5', '\x36', '\x34B', '\n', '\x36', '\x3', 
		'\x37', '\x3', '\x37', '\x3', '\x37', '\x3', '\x37', '\x3', '\x37', '\x3', 
		'\x37', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', '\x3', 
		'\x38', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', '\x3', 
		'\x38', '\x6', '\x38', '\x35D', '\n', '\x38', '\r', '\x38', '\xE', '\x38', 
		'\x35E', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', 
		'\x39', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', 
		'\x39', '\x6', '\x39', '\x36B', '\n', '\x39', '\r', '\x39', '\xE', '\x39', 
		'\x36C', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', 
		';', '\x3', ';', '\x3', ';', '\a', ';', '\x377', '\n', ';', '\f', ';', 
		'\xE', ';', '\x37A', '\v', ';', '\x3', ';', '\x3', ';', '\x3', '<', '\x3', 
		'<', '\x3', '<', '\x3', '<', '\x3', '<', '\x3', '<', '\x3', '<', '\x5', 
		'<', '\x385', '\n', '<', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', 
		'\x3', '=', '\x3', '=', '\x3', '=', '\x3', '>', '\x3', '>', '\x3', '>', 
		'\x3', '>', '\x3', '>', '\x3', '>', '\x3', '?', '\x3', '?', '\x3', '?', 
		'\x3', '?', '\x3', '?', '\x3', '?', '\x3', '?', '\x3', '?', '\x3', '?', 
		'\a', '?', '\x39D', '\n', '?', '\f', '?', '\xE', '?', '\x3A0', '\v', '?', 
		'\x3', '@', '\x3', '@', '\x3', '@', '\x3', '@', '\x3', '@', '\x3', '@', 
		'\x3', '@', '\x3', '@', '\x3', '@', '\x3', '@', '\a', '@', '\x3AC', '\n', 
		'@', '\f', '@', '\xE', '@', '\x3AF', '\v', '@', '\x3', '\x41', '\x3', 
		'\x41', '\x3', '\x41', '\x3', '\x41', '\x3', '\x41', '\x3', '\x41', '\x3', 
		'\x41', '\x3', '\x41', '\x3', '\x41', '\x3', '\x41', '\x3', '\x41', '\x3', 
		'\x41', '\x3', '\x41', '\x3', '\x41', '\x3', '\x41', '\x3', '\x41', '\x3', 
		'\x41', '\x3', '\x41', '\x5', '\x41', '\x3C3', '\n', '\x41', '\x3', '\x42', 
		'\x3', '\x42', '\x3', '\x42', '\x3', '\x42', '\x3', '\x42', '\x5', '\x42', 
		'\x3CA', '\n', '\x42', '\x3', '\x42', '\x3', '\x42', '\x3', '\x42', '\x5', 
		'\x42', '\x3CF', '\n', '\x42', '\a', '\x42', '\x3D1', '\n', '\x42', '\f', 
		'\x42', '\xE', '\x42', '\x3D4', '\v', '\x42', '\x3', '\x42', '\x3', '\x42', 
		'\x3', '\x42', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', 
		'\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', 
		'\x3', '\x43', '\x5', '\x43', '\x3E3', '\n', '\x43', '\x3', '\x44', '\x3', 
		'\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', 
		'\x44', '\x3', '\x44', '\x3', '\x44', '\a', '\x44', '\x3EE', '\n', '\x44', 
		'\f', '\x44', '\xE', '\x44', '\x3F1', '\v', '\x44', '\x3', '\x44', '\x3', 
		'\x44', '\x3', '\x44', '\x3', '\x45', '\x3', '\x45', '\x3', '\x45', '\x3', 
		'\x45', '\x5', '\x45', '\x3FA', '\n', '\x45', '\x3', '\x45', '\x3', '\x45', 
		'\x3', '\x45', '\x3', '\x46', '\x3', '\x46', '\x3', '\x46', '\x3', '\x46', 
		'\x3', '\x46', '\x3', '\x46', '\x3', '\x46', '\a', '\x46', '\x406', '\n', 
		'\x46', '\f', '\x46', '\xE', '\x46', '\x409', '\v', '\x46', '\x3', 'G', 
		'\x3', 'G', '\x3', 'G', '\x3', 'G', '\x3', 'G', '\x5', 'G', '\x410', '\n', 
		'G', '\x3', 'G', '\x3', 'G', '\x3', 'G', '\x3', 'H', '\x3', 'H', '\x3', 
		'H', '\x3', 'H', '\x3', 'H', '\x3', 'H', '\x3', 'H', '\x5', 'H', '\x41C', 
		'\n', 'H', '\x3', 'H', '\x3', 'H', '\x3', 'H', '\x3', 'I', '\x3', 'I', 
		'\x3', 'I', '\x3', 'I', '\x3', 'I', '\x3', 'I', '\x3', 'I', '\a', 'I', 
		'\x428', '\n', 'I', '\f', 'I', '\xE', 'I', '\x42B', '\v', 'I', '\x3', 
		'I', '\x3', 'I', '\x3', 'I', '\x3', 'J', '\x3', 'J', '\x3', 'J', '\x3', 
		'J', '\x3', 'J', '\x3', 'J', '\a', 'J', '\x436', '\n', 'J', '\f', 'J', 
		'\xE', 'J', '\x439', '\v', 'J', '\x3', 'K', '\x3', 'K', '\x3', 'K', '\x3', 
		'K', '\x3', 'K', '\a', 'K', '\x440', '\n', 'K', '\f', 'K', '\xE', 'K', 
		'\x443', '\v', 'K', '\x5', 'K', '\x445', '\n', 'K', '\x3', 'L', '\x3', 
		'L', '\x3', 'L', '\x3', 'L', '\x3', 'L', '\x5', 'L', '\x44C', '\n', 'L', 
		'\x3', 'L', '\x3', 'L', '\x3', 'L', '\x3', 'L', '\x5', 'L', '\x452', '\n', 
		'L', '\a', 'L', '\x454', '\n', 'L', '\f', 'L', '\xE', 'L', '\x457', '\v', 
		'L', '\x3', 'L', '\x3', 'L', '\x3', 'L', '\x3', 'M', '\x3', 'M', '\x3', 
		'N', '\x3', 'N', '\x3', 'N', '\x3', 'N', '\x3', 'N', '\x3', 'N', '\x3', 
		'N', '\x3', 'N', '\a', 'N', '\x466', '\n', 'N', '\f', 'N', '\xE', 'N', 
		'\x469', '\v', 'N', '\x3', 'O', '\x3', 'O', '\x3', 'P', '\a', 'P', '\x46E', 
		'\n', 'P', '\f', 'P', '\xE', 'P', '\x471', '\v', 'P', '\x3', 'P', '\x2', 
		'\x2', 'Q', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', 
		'\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', 
		'*', ',', '.', '\x30', '\x32', '\x34', '\x36', '\x38', ':', '<', '>', 
		'@', '\x42', '\x44', '\x46', 'H', 'J', 'L', 'N', 'P', 'R', 'T', 'V', 'X', 
		'Z', '\\', '^', '`', '\x62', '\x64', '\x66', 'h', 'j', 'l', 'n', 'p', 
		'r', 't', 'v', 'x', 'z', '|', '~', '\x80', '\x82', '\x84', '\x86', '\x88', 
		'\x8A', '\x8C', '\x8E', '\x90', '\x92', '\x94', '\x96', '\x98', '\x9A', 
		'\x9C', '\x9E', '\x2', '\n', '\x4', '\x2', '\x11', '\x11', '\x13', '\x15', 
		'\x3', '\x2', '\"', '#', '\x5', '\x2', '\n', '\n', '\x16', '\x17', '/', 
		'\x31', '\x3', '\x2', '\'', '(', '\x4', '\x2', '\x5', '\x5', '\x41', '\x41', 
		'\x4', '\x2', '\x1F', '\x1F', '\x36', '\x37', '\x6', '\x2', '\"', '$', 
		'\x34', '\x34', '\x36', '\x37', '@', '@', '\x4', '\x2', '\x11', '\x11', 
		'\x13', '\x13', '\x2', '\x4DA', '\x2', '\xA0', '\x3', '\x2', '\x2', '\x2', 
		'\x4', '\xDF', '\x3', '\x2', '\x2', '\x2', '\x6', '\x107', '\x3', '\x2', 
		'\x2', '\x2', '\b', '\x125', '\x3', '\x2', '\x2', '\x2', '\n', '\x127', 
		'\x3', '\x2', '\x2', '\x2', '\f', '\x129', '\x3', '\x2', '\x2', '\x2', 
		'\xE', '\x139', '\x3', '\x2', '\x2', '\x2', '\x10', '\x156', '\x3', '\x2', 
		'\x2', '\x2', '\x12', '\x158', '\x3', '\x2', '\x2', '\x2', '\x14', '\x15A', 
		'\x3', '\x2', '\x2', '\x2', '\x16', '\x166', '\x3', '\x2', '\x2', '\x2', 
		'\x18', '\x169', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x180', '\x3', '\x2', 
		'\x2', '\x2', '\x1C', '\x184', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x18E', 
		'\x3', '\x2', '\x2', '\x2', ' ', '\x1A1', '\x3', '\x2', '\x2', '\x2', 
		'\"', '\x1BA', '\x3', '\x2', '\x2', '\x2', '$', '\x1BD', '\x3', '\x2', 
		'\x2', '\x2', '&', '\x1C3', '\x3', '\x2', '\x2', '\x2', '(', '\x1C7', 
		'\x3', '\x2', '\x2', '\x2', '*', '\x1CA', '\x3', '\x2', '\x2', '\x2', 
		',', '\x1CE', '\x3', '\x2', '\x2', '\x2', '.', '\x1D1', '\x3', '\x2', 
		'\x2', '\x2', '\x30', '\x1E4', '\x3', '\x2', '\x2', '\x2', '\x32', '\x1EC', 
		'\x3', '\x2', '\x2', '\x2', '\x34', '\x1FB', '\x3', '\x2', '\x2', '\x2', 
		'\x36', '\x1FF', '\x3', '\x2', '\x2', '\x2', '\x38', '\x20B', '\x3', '\x2', 
		'\x2', '\x2', ':', '\x215', '\x3', '\x2', '\x2', '\x2', '<', '\x220', 
		'\x3', '\x2', '\x2', '\x2', '>', '\x239', '\x3', '\x2', '\x2', '\x2', 
		'@', '\x23F', '\x3', '\x2', '\x2', '\x2', '\x42', '\x25A', '\x3', '\x2', 
		'\x2', '\x2', '\x44', '\x25C', '\x3', '\x2', '\x2', '\x2', '\x46', '\x263', 
		'\x3', '\x2', '\x2', '\x2', 'H', '\x267', '\x3', '\x2', '\x2', '\x2', 
		'J', '\x28C', '\x3', '\x2', '\x2', '\x2', 'L', '\x28E', '\x3', '\x2', 
		'\x2', '\x2', 'N', '\x294', '\x3', '\x2', '\x2', '\x2', 'P', '\x29A', 
		'\x3', '\x2', '\x2', '\x2', 'R', '\x29E', '\x3', '\x2', '\x2', '\x2', 
		'T', '\x2A3', '\x3', '\x2', '\x2', '\x2', 'V', '\x2A8', '\x3', '\x2', 
		'\x2', '\x2', 'X', '\x2AD', '\x3', '\x2', '\x2', '\x2', 'Z', '\x2F3', 
		'\x3', '\x2', '\x2', '\x2', '\\', '\x2F5', '\x3', '\x2', '\x2', '\x2', 
		'^', '\x30B', '\x3', '\x2', '\x2', '\x2', '`', '\x30D', '\x3', '\x2', 
		'\x2', '\x2', '\x62', '\x329', '\x3', '\x2', '\x2', '\x2', '\x64', '\x32B', 
		'\x3', '\x2', '\x2', '\x2', '\x66', '\x336', '\x3', '\x2', '\x2', '\x2', 
		'h', '\x340', '\x3', '\x2', '\x2', '\x2', 'j', '\x34A', '\x3', '\x2', 
		'\x2', '\x2', 'l', '\x34C', '\x3', '\x2', '\x2', '\x2', 'n', '\x352', 
		'\x3', '\x2', '\x2', '\x2', 'p', '\x360', '\x3', '\x2', '\x2', '\x2', 
		'r', '\x36E', '\x3', '\x2', '\x2', '\x2', 't', '\x373', '\x3', '\x2', 
		'\x2', '\x2', 'v', '\x384', '\x3', '\x2', '\x2', '\x2', 'x', '\x386', 
		'\x3', '\x2', '\x2', '\x2', 'z', '\x38D', '\x3', '\x2', '\x2', '\x2', 
		'|', '\x393', '\x3', '\x2', '\x2', '\x2', '~', '\x3A1', '\x3', '\x2', 
		'\x2', '\x2', '\x80', '\x3C2', '\x3', '\x2', '\x2', '\x2', '\x82', '\x3C4', 
		'\x3', '\x2', '\x2', '\x2', '\x84', '\x3E2', '\x3', '\x2', '\x2', '\x2', 
		'\x86', '\x3E4', '\x3', '\x2', '\x2', '\x2', '\x88', '\x3F5', '\x3', '\x2', 
		'\x2', '\x2', '\x8A', '\x3FE', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x40A', 
		'\x3', '\x2', '\x2', '\x2', '\x8E', '\x414', '\x3', '\x2', '\x2', '\x2', 
		'\x90', '\x420', '\x3', '\x2', '\x2', '\x2', '\x92', '\x42F', '\x3', '\x2', 
		'\x2', '\x2', '\x94', '\x444', '\x3', '\x2', '\x2', '\x2', '\x96', '\x446', 
		'\x3', '\x2', '\x2', '\x2', '\x98', '\x45B', '\x3', '\x2', '\x2', '\x2', 
		'\x9A', '\x45D', '\x3', '\x2', '\x2', '\x2', '\x9C', '\x46A', '\x3', '\x2', 
		'\x2', '\x2', '\x9E', '\x46F', '\x3', '\x2', '\x2', '\x2', '\xA0', '\xAA', 
		'\x5', '\x9E', 'P', '\x2', '\xA1', '\xA5', '\x5', '\x4', '\x3', '\x2', 
		'\xA2', '\xA4', '\t', '\x2', '\x2', '\x2', '\xA3', '\xA2', '\x3', '\x2', 
		'\x2', '\x2', '\xA4', '\xA7', '\x3', '\x2', '\x2', '\x2', '\xA5', '\xA3', 
		'\x3', '\x2', '\x2', '\x2', '\xA5', '\xA6', '\x3', '\x2', '\x2', '\x2', 
		'\xA6', '\xA9', '\x3', '\x2', '\x2', '\x2', '\xA7', '\xA5', '\x3', '\x2', 
		'\x2', '\x2', '\xA8', '\xA1', '\x3', '\x2', '\x2', '\x2', '\xA9', '\xAC', 
		'\x3', '\x2', '\x2', '\x2', '\xAA', '\xA8', '\x3', '\x2', '\x2', '\x2', 
		'\xAA', '\xAB', '\x3', '\x2', '\x2', '\x2', '\xAB', '\xB6', '\x3', '\x2', 
		'\x2', '\x2', '\xAC', '\xAA', '\x3', '\x2', '\x2', '\x2', '\xAD', '\xB1', 
		'\x5', '\x6', '\x4', '\x2', '\xAE', '\xB0', '\t', '\x2', '\x2', '\x2', 
		'\xAF', '\xAE', '\x3', '\x2', '\x2', '\x2', '\xB0', '\xB3', '\x3', '\x2', 
		'\x2', '\x2', '\xB1', '\xAF', '\x3', '\x2', '\x2', '\x2', '\xB1', '\xB2', 
		'\x3', '\x2', '\x2', '\x2', '\xB2', '\xB5', '\x3', '\x2', '\x2', '\x2', 
		'\xB3', '\xB1', '\x3', '\x2', '\x2', '\x2', '\xB4', '\xAD', '\x3', '\x2', 
		'\x2', '\x2', '\xB5', '\xB8', '\x3', '\x2', '\x2', '\x2', '\xB6', '\xB4', 
		'\x3', '\x2', '\x2', '\x2', '\xB6', '\xB7', '\x3', '\x2', '\x2', '\x2', 
		'\xB7', '\xC2', '\x3', '\x2', '\x2', '\x2', '\xB8', '\xB6', '\x3', '\x2', 
		'\x2', '\x2', '\xB9', '\xBD', '\x5', '\b', '\x5', '\x2', '\xBA', '\xBC', 
		'\t', '\x2', '\x2', '\x2', '\xBB', '\xBA', '\x3', '\x2', '\x2', '\x2', 
		'\xBC', '\xBF', '\x3', '\x2', '\x2', '\x2', '\xBD', '\xBB', '\x3', '\x2', 
		'\x2', '\x2', '\xBD', '\xBE', '\x3', '\x2', '\x2', '\x2', '\xBE', '\xC1', 
		'\x3', '\x2', '\x2', '\x2', '\xBF', '\xBD', '\x3', '\x2', '\x2', '\x2', 
		'\xC0', '\xB9', '\x3', '\x2', '\x2', '\x2', '\xC1', '\xC4', '\x3', '\x2', 
		'\x2', '\x2', '\xC2', '\xC0', '\x3', '\x2', '\x2', '\x2', '\xC2', '\xC3', 
		'\x3', '\x2', '\x2', '\x2', '\xC3', '\xCE', '\x3', '\x2', '\x2', '\x2', 
		'\xC4', '\xC2', '\x3', '\x2', '\x2', '\x2', '\xC5', '\xC9', '\x5', '\x62', 
		'\x32', '\x2', '\xC6', '\xC8', '\t', '\x2', '\x2', '\x2', '\xC7', '\xC6', 
		'\x3', '\x2', '\x2', '\x2', '\xC8', '\xCB', '\x3', '\x2', '\x2', '\x2', 
		'\xC9', '\xC7', '\x3', '\x2', '\x2', '\x2', '\xC9', '\xCA', '\x3', '\x2', 
		'\x2', '\x2', '\xCA', '\xCD', '\x3', '\x2', '\x2', '\x2', '\xCB', '\xC9', 
		'\x3', '\x2', '\x2', '\x2', '\xCC', '\xC5', '\x3', '\x2', '\x2', '\x2', 
		'\xCD', '\xD0', '\x3', '\x2', '\x2', '\x2', '\xCE', '\xCC', '\x3', '\x2', 
		'\x2', '\x2', '\xCE', '\xCF', '\x3', '\x2', '\x2', '\x2', '\xCF', '\xD1', 
		'\x3', '\x2', '\x2', '\x2', '\xD0', '\xCE', '\x3', '\x2', '\x2', '\x2', 
		'\xD1', '\xD2', '\a', '\x2', '\x2', '\x3', '\xD2', '\x3', '\x3', '\x2', 
		'\x2', '\x2', '\xD3', '\xD4', '\a', '\x1D', '\x2', '\x2', '\xD4', '\xD5', 
		'\x5', '\x9E', 'P', '\x2', '\xD5', '\xD6', '\a', '.', '\x2', '\x2', '\xD6', 
		'\xD7', '\x5', '\x9E', 'P', '\x2', '\xD7', '\xD8', '\a', '\t', '\x2', 
		'\x2', '\xD8', '\xD9', '\x5', '\x9E', 'P', '\x2', '\xD9', '\xE0', '\x3', 
		'\x2', '\x2', '\x2', '\xDA', '\xDB', '\a', '\x1D', '\x2', '\x2', '\xDB', 
		'\xDC', '\x5', '\x9E', 'P', '\x2', '\xDC', '\xDD', '\a', '.', '\x2', '\x2', 
		'\xDD', '\xDE', '\x5', '\x9E', 'P', '\x2', '\xDE', '\xE0', '\x3', '\x2', 
		'\x2', '\x2', '\xDF', '\xD3', '\x3', '\x2', '\x2', '\x2', '\xDF', '\xDA', 
		'\x3', '\x2', '\x2', '\x2', '\xE0', '\x5', '\x3', '\x2', '\x2', '\x2', 
		'\xE1', '\xE2', '\a', '\x19', '\x2', '\x2', '\xE2', '\xE5', '\x5', '\x9E', 
		'P', '\x2', '\xE3', '\xE6', '\a', '.', '\x2', '\x2', '\xE4', '\xE6', '\x5', 
		'v', '<', '\x2', '\xE5', '\xE3', '\x3', '\x2', '\x2', '\x2', '\xE5', '\xE4', 
		'\x3', '\x2', '\x2', '\x2', '\xE6', '\xE7', '\x3', '\x2', '\x2', '\x2', 
		'\xE7', '\xE8', '\x5', '\x9E', 'P', '\x2', '\xE8', '\xE9', '\x5', '\xE', 
		'\b', '\x2', '\xE9', '\xEA', '\a', '\t', '\x2', '\x2', '\xEA', '\xEB', 
		'\x5', '\x9E', 'P', '\x2', '\xEB', '\x108', '\x3', '\x2', '\x2', '\x2', 
		'\xEC', '\xED', '\a', '\x19', '\x2', '\x2', '\xED', '\xF0', '\x5', '\x9E', 
		'P', '\x2', '\xEE', '\xF1', '\a', '.', '\x2', '\x2', '\xEF', '\xF1', '\x5', 
		'v', '<', '\x2', '\xF0', '\xEE', '\x3', '\x2', '\x2', '\x2', '\xF0', '\xEF', 
		'\x3', '\x2', '\x2', '\x2', '\xF1', '\xF2', '\x3', '\x2', '\x2', '\x2', 
		'\xF2', '\xF3', '\x5', '\x9E', 'P', '\x2', '\xF3', '\xF4', '\a', '\t', 
		'\x2', '\x2', '\xF4', '\xF5', '\x5', '\x9E', 'P', '\x2', '\xF5', '\x108', 
		'\x3', '\x2', '\x2', '\x2', '\xF6', '\xF7', '\a', '\x19', '\x2', '\x2', 
		'\xF7', '\xFA', '\x5', '\x9E', 'P', '\x2', '\xF8', '\xFB', '\a', '.', 
		'\x2', '\x2', '\xF9', '\xFB', '\x5', 'v', '<', '\x2', '\xFA', '\xF8', 
		'\x3', '\x2', '\x2', '\x2', '\xFA', '\xF9', '\x3', '\x2', '\x2', '\x2', 
		'\xFB', '\xFC', '\x3', '\x2', '\x2', '\x2', '\xFC', '\xFD', '\x5', '\x9E', 
		'P', '\x2', '\xFD', '\xFE', '\x5', '\xE', '\b', '\x2', '\xFE', '\x108', 
		'\x3', '\x2', '\x2', '\x2', '\xFF', '\x100', '\a', '\x19', '\x2', '\x2', 
		'\x100', '\x103', '\x5', '\x9E', 'P', '\x2', '\x101', '\x104', '\a', '.', 
		'\x2', '\x2', '\x102', '\x104', '\x5', 'v', '<', '\x2', '\x103', '\x101', 
		'\x3', '\x2', '\x2', '\x2', '\x103', '\x102', '\x3', '\x2', '\x2', '\x2', 
		'\x104', '\x105', '\x3', '\x2', '\x2', '\x2', '\x105', '\x106', '\x5', 
		'\x9E', 'P', '\x2', '\x106', '\x108', '\x3', '\x2', '\x2', '\x2', '\x107', 
		'\xE1', '\x3', '\x2', '\x2', '\x2', '\x107', '\xEC', '\x3', '\x2', '\x2', 
		'\x2', '\x107', '\xF6', '\x3', '\x2', '\x2', '\x2', '\x107', '\xFF', '\x3', 
		'\x2', '\x2', '\x2', '\x108', '\a', '\x3', '\x2', '\x2', '\x2', '\x109', 
		'\x10A', '\a', '\x1C', '\x2', '\x2', '\x10A', '\x10E', '\x5', '\x9E', 
		'P', '\x2', '\x10B', '\x10C', '\x5', '\n', '\x6', '\x2', '\x10C', '\x10D', 
		'\x5', '\x9E', 'P', '\x2', '\x10D', '\x10F', '\x3', '\x2', '\x2', '\x2', 
		'\x10E', '\x10B', '\x3', '\x2', '\x2', '\x2', '\x10E', '\x10F', '\x3', 
		'\x2', '\x2', '\x2', '\x10F', '\x112', '\x3', '\x2', '\x2', '\x2', '\x110', 
		'\x113', '\a', '.', '\x2', '\x2', '\x111', '\x113', '\x5', 'v', '<', '\x2', 
		'\x112', '\x110', '\x3', '\x2', '\x2', '\x2', '\x112', '\x111', '\x3', 
		'\x2', '\x2', '\x2', '\x113', '\x114', '\x3', '\x2', '\x2', '\x2', '\x114', 
		'\x115', '\x5', '\x9E', 'P', '\x2', '\x115', '\x116', '\a', '\t', '\x2', 
		'\x2', '\x116', '\x117', '\x5', '\x9E', 'P', '\x2', '\x117', '\x126', 
		'\x3', '\x2', '\x2', '\x2', '\x118', '\x119', '\a', '\x1C', '\x2', '\x2', 
		'\x119', '\x11D', '\x5', '\x9E', 'P', '\x2', '\x11A', '\x11B', '\x5', 
		'\n', '\x6', '\x2', '\x11B', '\x11C', '\x5', '\x9E', 'P', '\x2', '\x11C', 
		'\x11E', '\x3', '\x2', '\x2', '\x2', '\x11D', '\x11A', '\x3', '\x2', '\x2', 
		'\x2', '\x11D', '\x11E', '\x3', '\x2', '\x2', '\x2', '\x11E', '\x121', 
		'\x3', '\x2', '\x2', '\x2', '\x11F', '\x122', '\a', '.', '\x2', '\x2', 
		'\x120', '\x122', '\x5', 'v', '<', '\x2', '\x121', '\x11F', '\x3', '\x2', 
		'\x2', '\x2', '\x121', '\x120', '\x3', '\x2', '\x2', '\x2', '\x122', '\x123', 
		'\x3', '\x2', '\x2', '\x2', '\x123', '\x124', '\x5', '\x9E', 'P', '\x2', 
		'\x124', '\x126', '\x3', '\x2', '\x2', '\x2', '\x125', '\x109', '\x3', 
		'\x2', '\x2', '\x2', '\x125', '\x118', '\x3', '\x2', '\x2', '\x2', '\x126', 
		'\t', '\x3', '\x2', '\x2', '\x2', '\x127', '\x128', '\x5', '\x9C', 'O', 
		'\x2', '\x128', '\v', '\x3', '\x2', '\x2', '\x2', '\x129', '\x12A', '\a', 
		'\x1B', '\x2', '\x2', '\x12A', '\x12B', '\x5', '\x9E', 'P', '\x2', '\x12B', 
		'\x12C', '\x5', '\xE', '\b', '\x2', '\x12C', '\x12D', '\x5', '\x64', '\x33', 
		'\x2', '\x12D', '\x12E', '\x5', '\x9E', 'P', '\x2', '\x12E', '\r', '\x3', 
		'\x2', '\x2', '\x2', '\x12F', '\x136', '\x5', '\x10', '\t', '\x2', '\x130', 
		'\x131', '\a', '*', '\x2', '\x2', '\x131', '\x132', '\x5', '\x9E', 'P', 
		'\x2', '\x132', '\x133', '\x5', '\x10', '\t', '\x2', '\x133', '\x135', 
		'\x3', '\x2', '\x2', '\x2', '\x134', '\x130', '\x3', '\x2', '\x2', '\x2', 
		'\x135', '\x138', '\x3', '\x2', '\x2', '\x2', '\x136', '\x134', '\x3', 
		'\x2', '\x2', '\x2', '\x136', '\x137', '\x3', '\x2', '\x2', '\x2', '\x137', 
		'\x13A', '\x3', '\x2', '\x2', '\x2', '\x138', '\x136', '\x3', '\x2', '\x2', 
		'\x2', '\x139', '\x12F', '\x3', '\x2', '\x2', '\x2', '\x139', '\x13A', 
		'\x3', '\x2', '\x2', '\x2', '\x13A', '\x13B', '\x3', '\x2', '\x2', '\x2', 
		'\x13B', '\x13C', '\x5', '\x9E', 'P', '\x2', '\x13C', '\xF', '\x3', '\x2', 
		'\x2', '\x2', '\x13D', '\x13F', '\t', '\x3', '\x2', '\x2', '\x13E', '\x13D', 
		'\x3', '\x2', '\x2', '\x2', '\x13E', '\x13F', '\x3', '\x2', '\x2', '\x2', 
		'\x13F', '\x140', '\x3', '\x2', '\x2', '\x2', '\x140', '\x141', '\x5', 
		'\x9E', 'P', '\x2', '\x141', '\x142', '\x5', '\x12', '\n', '\x2', '\x142', 
		'\x149', '\x5', '\x9E', 'P', '\x2', '\x143', '\x144', '\a', '$', '\x2', 
		'\x2', '\x144', '\x145', '\x5', '\x9E', 'P', '\x2', '\x145', '\x146', 
		'\x5', '\x14', '\v', '\x2', '\x146', '\x148', '\x3', '\x2', '\x2', '\x2', 
		'\x147', '\x143', '\x3', '\x2', '\x2', '\x2', '\x148', '\x14B', '\x3', 
		'\x2', '\x2', '\x2', '\x149', '\x147', '\x3', '\x2', '\x2', '\x2', '\x149', 
		'\x14A', '\x3', '\x2', '\x2', '\x2', '\x14A', '\x157', '\x3', '\x2', '\x2', 
		'\x2', '\x14B', '\x149', '\x3', '\x2', '\x2', '\x2', '\x14C', '\x153', 
		'\x5', '\x14', '\v', '\x2', '\x14D', '\x14E', '\a', '$', '\x2', '\x2', 
		'\x14E', '\x14F', '\x5', '\x9E', 'P', '\x2', '\x14F', '\x150', '\x5', 
		'\x14', '\v', '\x2', '\x150', '\x152', '\x3', '\x2', '\x2', '\x2', '\x151', 
		'\x14D', '\x3', '\x2', '\x2', '\x2', '\x152', '\x155', '\x3', '\x2', '\x2', 
		'\x2', '\x153', '\x151', '\x3', '\x2', '\x2', '\x2', '\x153', '\x154', 
		'\x3', '\x2', '\x2', '\x2', '\x154', '\x157', '\x3', '\x2', '\x2', '\x2', 
		'\x155', '\x153', '\x3', '\x2', '\x2', '\x2', '\x156', '\x13E', '\x3', 
		'\x2', '\x2', '\x2', '\x156', '\x14C', '\x3', '\x2', '\x2', '\x2', '\x157', 
		'\x11', '\x3', '\x2', '\x2', '\x2', '\x158', '\x159', '\x5', '\x9C', 'O', 
		'\x2', '\x159', '\x13', '\x3', '\x2', '\x2', '\x2', '\x15A', '\x15B', 
		'\a', '\x5', '\x2', '\x2', '\x15B', '\x15C', '\x5', '\x9E', 'P', '\x2', 
		'\x15C', '\x161', '\x5', '\x16', '\f', '\x2', '\x15D', '\x15E', '\a', 
		'\v', '\x2', '\x2', '\x15E', '\x15F', '\x5', '\x9E', 'P', '\x2', '\x15F', 
		'\x160', '\x5', 'H', '%', '\x2', '\x160', '\x162', '\x3', '\x2', '\x2', 
		'\x2', '\x161', '\x15D', '\x3', '\x2', '\x2', '\x2', '\x161', '\x162', 
		'\x3', '\x2', '\x2', '\x2', '\x162', '\x163', '\x3', '\x2', '\x2', '\x2', 
		'\x163', '\x164', '\a', '\x6', '\x2', '\x2', '\x164', '\x165', '\x5', 
		'\x9E', 'P', '\x2', '\x165', '\x15', '\x3', '\x2', '\x2', '\x2', '\x166', 
		'\x167', '\x5', '\x9C', 'O', '\x2', '\x167', '\x168', '\x5', '\x9E', 'P', 
		'\x2', '\x168', '\x17', '\x3', '\x2', '\x2', '\x2', '\x169', '\x16A', 
		'\a', '\x1A', '\x2', '\x2', '\x16A', '\x16C', '\x5', '\x9E', 'P', '\x2', 
		'\x16B', '\x16D', '\x5', '\x1A', '\xE', '\x2', '\x16C', '\x16B', '\x3', 
		'\x2', '\x2', '\x2', '\x16C', '\x16D', '\x3', '\x2', '\x2', '\x2', '\x16D', 
		'\x16E', '\x3', '\x2', '\x2', '\x2', '\x16E', '\x16F', '\a', '\a', '\x2', 
		'\x2', '\x16F', '\x171', '\x5', '\x9E', 'P', '\x2', '\x170', '\x172', 
		'\x5', '\x42', '\"', '\x2', '\x171', '\x170', '\x3', '\x2', '\x2', '\x2', 
		'\x171', '\x172', '\x3', '\x2', '\x2', '\x2', '\x172', '\x17A', '\x3', 
		'\x2', '\x2', '\x2', '\x173', '\x174', '\a', '\t', '\x2', '\x2', '\x174', 
		'\x176', '\x5', '\x9E', 'P', '\x2', '\x175', '\x177', '\x5', '\x42', '\"', 
		'\x2', '\x176', '\x175', '\x3', '\x2', '\x2', '\x2', '\x176', '\x177', 
		'\x3', '\x2', '\x2', '\x2', '\x177', '\x179', '\x3', '\x2', '\x2', '\x2', 
		'\x178', '\x173', '\x3', '\x2', '\x2', '\x2', '\x179', '\x17C', '\x3', 
		'\x2', '\x2', '\x2', '\x17A', '\x178', '\x3', '\x2', '\x2', '\x2', '\x17A', 
		'\x17B', '\x3', '\x2', '\x2', '\x2', '\x17B', '\x17D', '\x3', '\x2', '\x2', 
		'\x2', '\x17C', '\x17A', '\x3', '\x2', '\x2', '\x2', '\x17D', '\x17E', 
		'\a', '\b', '\x2', '\x2', '\x17E', '\x17F', '\x5', '\x9E', 'P', '\x2', 
		'\x17F', '\x19', '\x3', '\x2', '\x2', '\x2', '\x180', '\x181', '\a', '\v', 
		'\x2', '\x2', '\x181', '\x182', '\x5', '\x9C', 'O', '\x2', '\x182', '\x183', 
		'\x5', '\x9E', 'P', '\x2', '\x183', '\x1B', '\x3', '\x2', '\x2', '\x2', 
		'\x184', '\x18B', '\x5', '\x1E', '\x10', '\x2', '\x185', '\x186', '\a', 
		'*', '\x2', '\x2', '\x186', '\x187', '\x5', '\x9E', 'P', '\x2', '\x187', 
		'\x188', '\x5', '\x1E', '\x10', '\x2', '\x188', '\x18A', '\x3', '\x2', 
		'\x2', '\x2', '\x189', '\x185', '\x3', '\x2', '\x2', '\x2', '\x18A', '\x18D', 
		'\x3', '\x2', '\x2', '\x2', '\x18B', '\x189', '\x3', '\x2', '\x2', '\x2', 
		'\x18B', '\x18C', '\x3', '\x2', '\x2', '\x2', '\x18C', '\x1D', '\x3', 
		'\x2', '\x2', '\x2', '\x18D', '\x18B', '\x3', '\x2', '\x2', '\x2', '\x18E', 
		'\x18F', '\x5', '\"', '\x12', '\x2', '\x18F', '\x196', '\x5', '\x9E', 
		'P', '\x2', '\x190', '\x191', '\x5', ' ', '\x11', '\x2', '\x191', '\x192', 
		'\x5', '\"', '\x12', '\x2', '\x192', '\x193', '\x5', '\x9E', 'P', '\x2', 
		'\x193', '\x195', '\x3', '\x2', '\x2', '\x2', '\x194', '\x190', '\x3', 
		'\x2', '\x2', '\x2', '\x195', '\x198', '\x3', '\x2', '\x2', '\x2', '\x196', 
		'\x194', '\x3', '\x2', '\x2', '\x2', '\x196', '\x197', '\x3', '\x2', '\x2', 
		'\x2', '\x197', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x198', '\x196', 
		'\x3', '\x2', '\x2', '\x2', '\x199', '\x19A', '\a', '\'', '\x2', '\x2', 
		'\x19A', '\x1A2', '\x5', '\x9E', 'P', '\x2', '\x19B', '\x19C', '\a', ')', 
		'\x2', '\x2', '\x19C', '\x1A2', '\x5', '\x9E', 'P', '\x2', '\x19D', '\x19E', 
		'\a', '+', '\x2', '\x2', '\x19E', '\x1A2', '\x5', '\x9E', 'P', '\x2', 
		'\x19F', '\x1A0', '\a', '\x13', '\x2', '\x2', '\x1A0', '\x1A2', '\x5', 
		'\x9E', 'P', '\x2', '\x1A1', '\x199', '\x3', '\x2', '\x2', '\x2', '\x1A1', 
		'\x19B', '\x3', '\x2', '\x2', '\x2', '\x1A1', '\x19D', '\x3', '\x2', '\x2', 
		'\x2', '\x1A1', '\x19F', '\x3', '\x2', '\x2', '\x2', '\x1A2', '!', '\x3', 
		'\x2', '\x2', '\x2', '\x1A3', '\x1A6', '\x5', '$', '\x13', '\x2', '\x1A4', 
		'\x1A6', '\x5', '*', '\x16', '\x2', '\x1A5', '\x1A3', '\x3', '\x2', '\x2', 
		'\x2', '\x1A5', '\x1A4', '\x3', '\x2', '\x2', '\x2', '\x1A6', '\x1AE', 
		'\x3', '\x2', '\x2', '\x2', '\x1A7', '\x1AD', '\a', '\x18', '\x2', '\x2', 
		'\x1A8', '\x1AD', '\x5', ',', '\x17', '\x2', '\x1A9', '\x1AD', '\x5', 
		'.', '\x18', '\x2', '\x1AA', '\x1AD', '\x5', '\x30', '\x19', '\x2', '\x1AB', 
		'\x1AD', '\x5', '\x36', '\x1C', '\x2', '\x1AC', '\x1A7', '\x3', '\x2', 
		'\x2', '\x2', '\x1AC', '\x1A8', '\x3', '\x2', '\x2', '\x2', '\x1AC', '\x1A9', 
		'\x3', '\x2', '\x2', '\x2', '\x1AC', '\x1AA', '\x3', '\x2', '\x2', '\x2', 
		'\x1AC', '\x1AB', '\x3', '\x2', '\x2', '\x2', '\x1AD', '\x1B0', '\x3', 
		'\x2', '\x2', '\x2', '\x1AE', '\x1AC', '\x3', '\x2', '\x2', '\x2', '\x1AE', 
		'\x1AF', '\x3', '\x2', '\x2', '\x2', '\x1AF', '\x1BB', '\x3', '\x2', '\x2', 
		'\x2', '\x1B0', '\x1AE', '\x3', '\x2', '\x2', '\x2', '\x1B1', '\x1B7', 
		'\a', '\x18', '\x2', '\x2', '\x1B2', '\x1B7', '\x5', ',', '\x17', '\x2', 
		'\x1B3', '\x1B7', '\x5', '.', '\x18', '\x2', '\x1B4', '\x1B7', '\x5', 
		'\x30', '\x19', '\x2', '\x1B5', '\x1B7', '\x5', '\x36', '\x1C', '\x2', 
		'\x1B6', '\x1B1', '\x3', '\x2', '\x2', '\x2', '\x1B6', '\x1B2', '\x3', 
		'\x2', '\x2', '\x2', '\x1B6', '\x1B3', '\x3', '\x2', '\x2', '\x2', '\x1B6', 
		'\x1B4', '\x3', '\x2', '\x2', '\x2', '\x1B6', '\x1B5', '\x3', '\x2', '\x2', 
		'\x2', '\x1B7', '\x1B8', '\x3', '\x2', '\x2', '\x2', '\x1B8', '\x1B6', 
		'\x3', '\x2', '\x2', '\x2', '\x1B8', '\x1B9', '\x3', '\x2', '\x2', '\x2', 
		'\x1B9', '\x1BB', '\x3', '\x2', '\x2', '\x2', '\x1BA', '\x1A5', '\x3', 
		'\x2', '\x2', '\x2', '\x1BA', '\x1B6', '\x3', '\x2', '\x2', '\x2', '\x1BB', 
		'#', '\x3', '\x2', '\x2', '\x2', '\x1BC', '\x1BE', '\x5', '&', '\x14', 
		'\x2', '\x1BD', '\x1BC', '\x3', '\x2', '\x2', '\x2', '\x1BD', '\x1BE', 
		'\x3', '\x2', '\x2', '\x2', '\x1BE', '\x1BF', '\x3', '\x2', '\x2', '\x2', 
		'\x1BF', '\x1C0', '\x5', '(', '\x15', '\x2', '\x1C0', '%', '\x3', '\x2', 
		'\x2', '\x2', '\x1C1', '\x1C4', '\x5', '\x9C', 'O', '\x2', '\x1C2', '\x1C4', 
		'\a', '\r', '\x2', '\x2', '\x1C3', '\x1C1', '\x3', '\x2', '\x2', '\x2', 
		'\x1C3', '\x1C2', '\x3', '\x2', '\x2', '\x2', '\x1C3', '\x1C4', '\x3', 
		'\x2', '\x2', '\x2', '\x1C4', '\x1C5', '\x3', '\x2', '\x2', '\x2', '\x1C5', 
		'\x1C6', '\a', '\xF', '\x2', '\x2', '\x1C6', '\'', '\x3', '\x2', '\x2', 
		'\x2', '\x1C7', '\x1C8', '\x5', '\x9C', 'O', '\x2', '\x1C8', ')', '\x3', 
		'\x2', '\x2', '\x2', '\x1C9', '\x1CB', '\x5', '&', '\x14', '\x2', '\x1CA', 
		'\x1C9', '\x3', '\x2', '\x2', '\x2', '\x1CA', '\x1CB', '\x3', '\x2', '\x2', 
		'\x2', '\x1CB', '\x1CC', '\x3', '\x2', '\x2', '\x2', '\x1CC', '\x1CD', 
		'\a', '\r', '\x2', '\x2', '\x1CD', '+', '\x3', '\x2', '\x2', '\x2', '\x1CE', 
		'\x1CF', '\a', '\f', '\x2', '\x2', '\x1CF', '\x1D0', '\x5', '\x9C', 'O', 
		'\x2', '\x1D0', '-', '\x3', '\x2', '\x2', '\x2', '\x1D1', '\x1D2', '\a', 
		'\x3', '\x2', '\x2', '\x1D2', '\x1D4', '\x5', '\x9E', 'P', '\x2', '\x1D3', 
		'\x1D5', '\x5', '&', '\x14', '\x2', '\x1D4', '\x1D3', '\x3', '\x2', '\x2', 
		'\x2', '\x1D4', '\x1D5', '\x3', '\x2', '\x2', '\x2', '\x1D5', '\x1D6', 
		'\x3', '\x2', '\x2', '\x2', '\x1D6', '\x1D7', '\x5', '\x9C', 'O', '\x2', 
		'\x1D7', '\x1E0', '\x5', '\x9E', 'P', '\x2', '\x1D8', '\x1D9', '\t', '\x4', 
		'\x2', '\x2', '\x1D9', '\x1DC', '\x5', '\x9E', 'P', '\x2', '\x1DA', '\x1DD', 
		'\x5', '\x9C', 'O', '\x2', '\x1DB', '\x1DD', '\a', '.', '\x2', '\x2', 
		'\x1DC', '\x1DA', '\x3', '\x2', '\x2', '\x2', '\x1DC', '\x1DB', '\x3', 
		'\x2', '\x2', '\x2', '\x1DD', '\x1DE', '\x3', '\x2', '\x2', '\x2', '\x1DE', 
		'\x1DF', '\x5', '\x9E', 'P', '\x2', '\x1DF', '\x1E1', '\x3', '\x2', '\x2', 
		'\x2', '\x1E0', '\x1D8', '\x3', '\x2', '\x2', '\x2', '\x1E0', '\x1E1', 
		'\x3', '\x2', '\x2', '\x2', '\x1E1', '\x1E2', '\x3', '\x2', '\x2', '\x2', 
		'\x1E2', '\x1E3', '\a', '\x4', '\x2', '\x2', '\x1E3', '/', '\x3', '\x2', 
		'\x2', '\x2', '\x1E4', '\x1E6', '\a', '\v', '\x2', '\x2', '\x1E5', '\x1E7', 
		'\a', '\v', '\x2', '\x2', '\x1E6', '\x1E5', '\x3', '\x2', '\x2', '\x2', 
		'\x1E6', '\x1E7', '\x3', '\x2', '\x2', '\x2', '\x1E7', '\x1EA', '\x3', 
		'\x2', '\x2', '\x2', '\x1E8', '\x1EB', '\x5', '\x9C', 'O', '\x2', '\x1E9', 
		'\x1EB', '\x5', '\x32', '\x1A', '\x2', '\x1EA', '\x1E8', '\x3', '\x2', 
		'\x2', '\x2', '\x1EA', '\x1E9', '\x3', '\x2', '\x2', '\x2', '\x1EB', '\x31', 
		'\x3', '\x2', '\x2', '\x2', '\x1EC', '\x1ED', '\a', '\x41', '\x2', '\x2', 
		'\x1ED', '\x1EE', '\x5', '\x9E', 'P', '\x2', '\x1EE', '\x1EF', '\x5', 
		'\x34', '\x1B', '\x2', '\x1EF', '\x1F0', '\a', '\x6', '\x2', '\x2', '\x1F0', 
		'\x33', '\x3', '\x2', '\x2', '\x2', '\x1F1', '\x1F9', '\a', '\'', '\x2', 
		'\x2', '\x1F2', '\x1F9', '\a', '(', '\x2', '\x2', '\x1F3', '\x1F9', '\a', 
		'%', '\x2', '\x2', '\x1F4', '\x1F9', '\a', '&', '\x2', '\x2', '\x1F5', 
		'\x1F9', '\a', '-', '\x2', '\x2', '\x1F6', '\x1F9', '\a', '.', '\x2', 
		'\x2', '\x1F7', '\x1F9', '\x5', '\x9C', 'O', '\x2', '\x1F8', '\x1F1', 
		'\x3', '\x2', '\x2', '\x2', '\x1F8', '\x1F2', '\x3', '\x2', '\x2', '\x2', 
		'\x1F8', '\x1F3', '\x3', '\x2', '\x2', '\x2', '\x1F8', '\x1F4', '\x3', 
		'\x2', '\x2', '\x2', '\x1F8', '\x1F5', '\x3', '\x2', '\x2', '\x2', '\x1F8', 
		'\x1F6', '\x3', '\x2', '\x2', '\x2', '\x1F8', '\x1F7', '\x3', '\x2', '\x2', 
		'\x2', '\x1F9', '\x1FA', '\x3', '\x2', '\x2', '\x2', '\x1FA', '\x1FC', 
		'\x5', '\x9E', 'P', '\x2', '\x1FB', '\x1F8', '\x3', '\x2', '\x2', '\x2', 
		'\x1FC', '\x1FD', '\x3', '\x2', '\x2', '\x2', '\x1FD', '\x1FB', '\x3', 
		'\x2', '\x2', '\x2', '\x1FD', '\x1FE', '\x3', '\x2', '\x2', '\x2', '\x1FE', 
		'\x35', '\x3', '\x2', '\x2', '\x2', '\x1FF', '\x200', '\a', ',', '\x2', 
		'\x2', '\x200', '\x201', '\x5', '\x9E', 'P', '\x2', '\x201', '\x202', 
		'\x5', '\x38', '\x1D', '\x2', '\x202', '\x203', '\x5', '\x9E', 'P', '\x2', 
		'\x203', '\x204', '\a', '\x6', '\x2', '\x2', '\x204', '\x37', '\x3', '\x2', 
		'\x2', '\x2', '\x205', '\x20C', '\x5', '$', '\x13', '\x2', '\x206', '\x20C', 
		'\x5', '*', '\x16', '\x2', '\x207', '\x20C', '\a', '\x18', '\x2', '\x2', 
		'\x208', '\x20C', '\x5', ',', '\x17', '\x2', '\x209', '\x20C', '\x5', 
		'.', '\x18', '\x2', '\x20A', '\x20C', '\x5', '\x30', '\x19', '\x2', '\x20B', 
		'\x205', '\x3', '\x2', '\x2', '\x2', '\x20B', '\x206', '\x3', '\x2', '\x2', 
		'\x2', '\x20B', '\x207', '\x3', '\x2', '\x2', '\x2', '\x20B', '\x208', 
		'\x3', '\x2', '\x2', '\x2', '\x20B', '\x209', '\x3', '\x2', '\x2', '\x2', 
		'\x20B', '\x20A', '\x3', '\x2', '\x2', '\x2', '\x20C', '\x39', '\x3', 
		'\x2', '\x2', '\x2', '\x20D', '\x20E', '\a', '\xE', '\x2', '\x2', '\x20E', 
		'\x216', '\x5', '\x9E', 'P', '\x2', '\x20F', '\x210', '\a', '*', '\x2', 
		'\x2', '\x210', '\x216', '\x5', '\x9E', 'P', '\x2', '\x211', '\x212', 
		'\a', '\x13', '\x2', '\x2', '\x212', '\x216', '\x5', '\x9E', 'P', '\x2', 
		'\x213', '\x214', '\a', '\n', '\x2', '\x2', '\x214', '\x216', '\x5', '\x9E', 
		'P', '\x2', '\x215', '\x20D', '\x3', '\x2', '\x2', '\x2', '\x215', '\x20F', 
		'\x3', '\x2', '\x2', '\x2', '\x215', '\x211', '\x3', '\x2', '\x2', '\x2', 
		'\x215', '\x213', '\x3', '\x2', '\x2', '\x2', '\x216', ';', '\x3', '\x2', 
		'\x2', '\x2', '\x217', '\x218', '\x5', '\x9C', 'O', '\x2', '\x218', '\x219', 
		'\x5', '\x9E', 'P', '\x2', '\x219', '\x221', '\x3', '\x2', '\x2', '\x2', 
		'\x21A', '\x21B', '\a', '>', '\x2', '\x2', '\x21B', '\x221', '\x5', '\x9E', 
		'P', '\x2', '\x21C', '\x21D', '\a', '\r', '\x2', '\x2', '\x21D', '\x221', 
		'\x5', '\x9C', 'O', '\x2', '\x21E', '\x21F', '\a', '\x10', '\x2', '\x2', 
		'\x21F', '\x221', '\x5', '\x9C', 'O', '\x2', '\x220', '\x217', '\x3', 
		'\x2', '\x2', '\x2', '\x220', '\x21A', '\x3', '\x2', '\x2', '\x2', '\x220', 
		'\x21C', '\x3', '\x2', '\x2', '\x2', '\x220', '\x21E', '\x3', '\x2', '\x2', 
		'\x2', '\x221', '=', '\x3', '\x2', '\x2', '\x2', '\x222', '\x223', '\x5', 
		'\x1C', '\xF', '\x2', '\x223', '\x224', '\a', '\a', '\x2', '\x2', '\x224', 
		'\x226', '\x5', '\x9E', 'P', '\x2', '\x225', '\x227', '\x5', '@', '!', 
		'\x2', '\x226', '\x225', '\x3', '\x2', '\x2', '\x2', '\x226', '\x227', 
		'\x3', '\x2', '\x2', '\x2', '\x227', '\x228', '\x3', '\x2', '\x2', '\x2', 
		'\x228', '\x229', '\a', '\b', '\x2', '\x2', '\x229', '\x22A', '\x5', '\x9E', 
		'P', '\x2', '\x22A', '\x23A', '\x3', '\x2', '\x2', '\x2', '\x22B', '\x22D', 
		'\x5', 'Z', '.', '\x2', '\x22C', '\x22B', '\x3', '\x2', '\x2', '\x2', 
		'\x22D', '\x230', '\x3', '\x2', '\x2', '\x2', '\x22E', '\x22C', '\x3', 
		'\x2', '\x2', '\x2', '\x22E', '\x22F', '\x3', '\x2', '\x2', '\x2', '\x22F', 
		'\x231', '\x3', '\x2', '\x2', '\x2', '\x230', '\x22E', '\x3', '\x2', '\x2', 
		'\x2', '\x231', '\x232', '\a', '\a', '\x2', '\x2', '\x232', '\x234', '\x5', 
		'\x9E', 'P', '\x2', '\x233', '\x235', '\x5', '@', '!', '\x2', '\x234', 
		'\x233', '\x3', '\x2', '\x2', '\x2', '\x234', '\x235', '\x3', '\x2', '\x2', 
		'\x2', '\x235', '\x236', '\x3', '\x2', '\x2', '\x2', '\x236', '\x237', 
		'\a', '\b', '\x2', '\x2', '\x237', '\x238', '\x5', '\x9E', 'P', '\x2', 
		'\x238', '\x23A', '\x3', '\x2', '\x2', '\x2', '\x239', '\x222', '\x3', 
		'\x2', '\x2', '\x2', '\x239', '\x22E', '\x3', '\x2', '\x2', '\x2', '\x23A', 
		'?', '\x3', '\x2', '\x2', '\x2', '\x23B', '\x23C', '\a', '\t', '\x2', 
		'\x2', '\x23C', '\x23E', '\x5', '\x9E', 'P', '\x2', '\x23D', '\x23B', 
		'\x3', '\x2', '\x2', '\x2', '\x23E', '\x241', '\x3', '\x2', '\x2', '\x2', 
		'\x23F', '\x23D', '\x3', '\x2', '\x2', '\x2', '\x23F', '\x240', '\x3', 
		'\x2', '\x2', '\x2', '\x240', '\x242', '\x3', '\x2', '\x2', '\x2', '\x241', 
		'\x23F', '\x3', '\x2', '\x2', '\x2', '\x242', '\x243', '\x5', '\x42', 
		'\"', '\x2', '\x243', '\x24B', '\x5', '\x9E', 'P', '\x2', '\x244', '\x245', 
		'\a', '\t', '\x2', '\x2', '\x245', '\x247', '\x5', '\x9E', 'P', '\x2', 
		'\x246', '\x248', '\x5', '\x42', '\"', '\x2', '\x247', '\x246', '\x3', 
		'\x2', '\x2', '\x2', '\x247', '\x248', '\x3', '\x2', '\x2', '\x2', '\x248', 
		'\x24A', '\x3', '\x2', '\x2', '\x2', '\x249', '\x244', '\x3', '\x2', '\x2', 
		'\x2', '\x24A', '\x24D', '\x3', '\x2', '\x2', '\x2', '\x24B', '\x249', 
		'\x3', '\x2', '\x2', '\x2', '\x24B', '\x24C', '\x3', '\x2', '\x2', '\x2', 
		'\x24C', '\x41', '\x3', '\x2', '\x2', '\x2', '\x24D', '\x24B', '\x3', 
		'\x2', '\x2', '\x2', '\x24E', '\x24F', '\x5', '<', '\x1F', '\x2', '\x24F', 
		'\x250', '\a', '\v', '\x2', '\x2', '\x250', '\x251', '\x5', '\x9E', 'P', 
		'\x2', '\x251', '\x253', '\x5', 'H', '%', '\x2', '\x252', '\x254', '\x5', 
		'\x44', '#', '\x2', '\x253', '\x252', '\x3', '\x2', '\x2', '\x2', '\x253', 
		'\x254', '\x3', '\x2', '\x2', '\x2', '\x254', '\x25B', '\x3', '\x2', '\x2', 
		'\x2', '\x255', '\x256', '\x5', '<', '\x1F', '\x2', '\x256', '\x257', 
		'\a', '\v', '\x2', '\x2', '\x257', '\x258', '\x5', '\x9E', 'P', '\x2', 
		'\x258', '\x259', '\x5', '\x46', '$', '\x2', '\x259', '\x25B', '\x3', 
		'\x2', '\x2', '\x2', '\x25A', '\x24E', '\x3', '\x2', '\x2', '\x2', '\x25A', 
		'\x255', '\x3', '\x2', '\x2', '\x2', '\x25B', '\x43', '\x3', '\x2', '\x2', 
		'\x2', '\x25C', '\x25D', '\a', '\x1E', '\x2', '\x2', '\x25D', '\x25E', 
		'\x5', '\x9E', 'P', '\x2', '\x25E', '\x45', '\x3', '\x2', '\x2', '\x2', 
		'\x25F', '\x264', '\x5', 'Z', '.', '\x2', '\x260', '\x264', '\x5', '`', 
		'\x31', '\x2', '\x261', '\x262', '\a', '=', '\x2', '\x2', '\x262', '\x264', 
		'\x5', '\x9E', 'P', '\x2', '\x263', '\x25F', '\x3', '\x2', '\x2', '\x2', 
		'\x263', '\x260', '\x3', '\x2', '\x2', '\x2', '\x263', '\x261', '\x3', 
		'\x2', '\x2', '\x2', '\x264', '\x265', '\x3', '\x2', '\x2', '\x2', '\x265', 
		'\x263', '\x3', '\x2', '\x2', '\x2', '\x265', '\x266', '\x3', '\x2', '\x2', 
		'\x2', '\x266', 'G', '\x3', '\x2', '\x2', '\x2', '\x267', '\x26E', '\x5', 
		'J', '&', '\x2', '\x268', '\x26A', '\x5', ':', '\x1E', '\x2', '\x269', 
		'\x268', '\x3', '\x2', '\x2', '\x2', '\x269', '\x26A', '\x3', '\x2', '\x2', 
		'\x2', '\x26A', '\x26B', '\x3', '\x2', '\x2', '\x2', '\x26B', '\x26D', 
		'\x5', 'J', '&', '\x2', '\x26C', '\x269', '\x3', '\x2', '\x2', '\x2', 
		'\x26D', '\x270', '\x3', '\x2', '\x2', '\x2', '\x26E', '\x26C', '\x3', 
		'\x2', '\x2', '\x2', '\x26E', '\x26F', '\x3', '\x2', '\x2', '\x2', '\x26F', 
		'I', '\x3', '\x2', '\x2', '\x2', '\x270', '\x26E', '\x3', '\x2', '\x2', 
		'\x2', '\x271', '\x272', '\x5', 'R', '*', '\x2', '\x272', '\x273', '\x5', 
		'\x9E', 'P', '\x2', '\x273', '\x28D', '\x3', '\x2', '\x2', '\x2', '\x274', 
		'\x275', '\x5', 'T', '+', '\x2', '\x275', '\x276', '\x5', '\x9E', 'P', 
		'\x2', '\x276', '\x28D', '\x3', '\x2', '\x2', '\x2', '\x277', '\x278', 
		'\x5', 'V', ',', '\x2', '\x278', '\x279', '\x5', '\x9E', 'P', '\x2', '\x279', 
		'\x28D', '\x3', '\x2', '\x2', '\x2', '\x27A', '\x27B', '\a', '.', '\x2', 
		'\x2', '\x27B', '\x28D', '\x5', '\x9E', 'P', '\x2', '\x27C', '\x27D', 
		'\a', '!', '\x2', '\x2', '\x27D', '\x28D', '\x5', '\x9E', 'P', '\x2', 
		'\x27E', '\x27F', '\x5', '\x9C', 'O', '\x2', '\x27F', '\x280', '\x5', 
		'\x9E', 'P', '\x2', '\x280', '\x28D', '\x3', '\x2', '\x2', '\x2', '\x281', 
		'\x28D', '\x5', 'x', '=', '\x2', '\x282', '\x283', '\x5', 'v', '<', '\x2', 
		'\x283', '\x284', '\x5', '\x9E', 'P', '\x2', '\x284', '\x28D', '\x3', 
		'\x2', '\x2', '\x2', '\x285', '\x28D', '\x5', 'P', ')', '\x2', '\x286', 
		'\x28D', '\x5', 'z', '>', '\x2', '\x287', '\x28D', '\x5', 'L', '\'', '\x2', 
		'\x288', '\x289', '\x5', 'X', '-', '\x2', '\x289', '\x28A', '\x5', '\x9E', 
		'P', '\x2', '\x28A', '\x28D', '\x3', '\x2', '\x2', '\x2', '\x28B', '\x28D', 
		'\x5', 'N', '(', '\x2', '\x28C', '\x271', '\x3', '\x2', '\x2', '\x2', 
		'\x28C', '\x274', '\x3', '\x2', '\x2', '\x2', '\x28C', '\x277', '\x3', 
		'\x2', '\x2', '\x2', '\x28C', '\x27A', '\x3', '\x2', '\x2', '\x2', '\x28C', 
		'\x27C', '\x3', '\x2', '\x2', '\x2', '\x28C', '\x27E', '\x3', '\x2', '\x2', 
		'\x2', '\x28C', '\x281', '\x3', '\x2', '\x2', '\x2', '\x28C', '\x282', 
		'\x3', '\x2', '\x2', '\x2', '\x28C', '\x285', '\x3', '\x2', '\x2', '\x2', 
		'\x28C', '\x286', '\x3', '\x2', '\x2', '\x2', '\x28C', '\x287', '\x3', 
		'\x2', '\x2', '\x2', '\x28C', '\x288', '\x3', '\x2', '\x2', '\x2', '\x28C', 
		'\x28B', '\x3', '\x2', '\x2', '\x2', '\x28D', 'K', '\x3', '\x2', '\x2', 
		'\x2', '\x28E', '\x28F', '\a', '\x41', '\x2', '\x2', '\x28F', '\x290', 
		'\x5', '\x9E', 'P', '\x2', '\x290', '\x291', '\x5', 'H', '%', '\x2', '\x291', 
		'\x292', '\a', '\x6', '\x2', '\x2', '\x292', '\x293', '\x5', '\x9E', 'P', 
		'\x2', '\x293', 'M', '\x3', '\x2', '\x2', '\x2', '\x294', '\x295', '\a', 
		'<', '\x2', '\x2', '\x295', '\x296', '\x5', '\x9E', 'P', '\x2', '\x296', 
		'\x297', '\x5', 'H', '%', '\x2', '\x297', '\x298', '\a', '\x6', '\x2', 
		'\x2', '\x298', '\x299', '\x5', '\x9E', 'P', '\x2', '\x299', 'O', '\x3', 
		'\x2', '\x2', '\x2', '\x29A', '\x29B', '\a', '\x18', '\x2', '\x2', '\x29B', 
		'\x29C', '\x5', '\x9E', 'P', '\x2', '\x29C', 'Q', '\x3', '\x2', '\x2', 
		'\x2', '\x29D', '\x29F', '\t', '\x5', '\x2', '\x2', '\x29E', '\x29D', 
		'\x3', '\x2', '\x2', '\x2', '\x29E', '\x29F', '\x3', '\x2', '\x2', '\x2', 
		'\x29F', '\x2A0', '\x3', '\x2', '\x2', '\x2', '\x2A0', '\x2A1', '\a', 
		'-', '\x2', '\x2', '\x2A1', 'S', '\x3', '\x2', '\x2', '\x2', '\x2A2', 
		'\x2A4', '\t', '\x5', '\x2', '\x2', '\x2A3', '\x2A2', '\x3', '\x2', '\x2', 
		'\x2', '\x2A3', '\x2A4', '\x3', '\x2', '\x2', '\x2', '\x2A4', '\x2A5', 
		'\x3', '\x2', '\x2', '\x2', '\x2A5', '\x2A6', '\a', '\x1F', '\x2', '\x2', 
		'\x2A6', 'U', '\x3', '\x2', '\x2', '\x2', '\x2A7', '\x2A9', '\t', '\x5', 
		'\x2', '\x2', '\x2A8', '\x2A7', '\x3', '\x2', '\x2', '\x2', '\x2A8', '\x2A9', 
		'\x3', '\x2', '\x2', '\x2', '\x2A9', '\x2AA', '\x3', '\x2', '\x2', '\x2', 
		'\x2AA', '\x2AB', '\a', '%', '\x2', '\x2', '\x2AB', 'W', '\x3', '\x2', 
		'\x2', '\x2', '\x2AC', '\x2AE', '\t', '\x5', '\x2', '\x2', '\x2AD', '\x2AC', 
		'\x3', '\x2', '\x2', '\x2', '\x2AD', '\x2AE', '\x3', '\x2', '\x2', '\x2', 
		'\x2AE', '\x2AF', '\x3', '\x2', '\x2', '\x2', '\x2AF', '\x2B0', '\a', 
		'&', '\x2', '\x2', '\x2B0', 'Y', '\x3', '\x2', '\x2', '\x2', '\x2B1', 
		'\x2B2', '\x5', '\x9C', 'O', '\x2', '\x2B2', '\x2B3', '\x5', '\x9E', 'P', 
		'\x2', '\x2B3', '\x2F4', '\x3', '\x2', '\x2', '\x2', '\x2B4', '\x2B5', 
		'\x5', 'R', '*', '\x2', '\x2B5', '\x2B6', '\x5', '\x9E', 'P', '\x2', '\x2B6', 
		'\x2F4', '\x3', '\x2', '\x2', '\x2', '\x2B7', '\x2B8', '\x5', 'T', '+', 
		'\x2', '\x2B8', '\x2B9', '\x5', '\x9E', 'P', '\x2', '\x2B9', '\x2F4', 
		'\x3', '\x2', '\x2', '\x2', '\x2BA', '\x2BB', '\x5', 'V', ',', '\x2', 
		'\x2BB', '\x2BC', '\x5', '\x9E', 'P', '\x2', '\x2BC', '\x2F4', '\x3', 
		'\x2', '\x2', '\x2', '\x2BD', '\x2BE', '\x5', 'X', '-', '\x2', '\x2BE', 
		'\x2BF', '\x5', '\x9E', 'P', '\x2', '\x2BF', '\x2F4', '\x3', '\x2', '\x2', 
		'\x2', '\x2C0', '\x2C1', '\a', '.', '\x2', '\x2', '\x2C1', '\x2F4', '\x5', 
		'\x9E', 'P', '\x2', '\x2C2', '\x2C3', '\x5', 'v', '<', '\x2', '\x2C3', 
		'\x2C4', '\x5', '\x9E', 'P', '\x2', '\x2C4', '\x2F4', '\x3', '\x2', '\x2', 
		'\x2', '\x2C5', '\x2C6', '\a', '\x18', '\x2', '\x2', '\x2C6', '\x2F4', 
		'\x5', '\x9E', 'P', '\x2', '\x2C7', '\x2C8', '\a', '!', '\x2', '\x2', 
		'\x2C8', '\x2F4', '\x5', '\x9E', 'P', '\x2', '\x2C9', '\x2CA', '\a', '\x16', 
		'\x2', '\x2', '\x2CA', '\x2F4', '\x5', '\x9E', 'P', '\x2', '\x2CB', '\x2CC', 
		'\a', '\x17', '\x2', '\x2', '\x2CC', '\x2F4', '\x5', '\x9E', 'P', '\x2', 
		'\x2CD', '\x2CE', '\a', '\v', '\x2', '\x2', '\x2CE', '\x2F4', '\x5', '\x9E', 
		'P', '\x2', '\x2CF', '\x2D0', '\a', '\x41', '\x2', '\x2', '\x2D0', '\x2D5', 
		'\x5', '\x9E', 'P', '\x2', '\x2D1', '\x2D4', '\x5', 'Z', '.', '\x2', '\x2D2', 
		'\x2D4', '\x5', '^', '\x30', '\x2', '\x2D3', '\x2D1', '\x3', '\x2', '\x2', 
		'\x2', '\x2D3', '\x2D2', '\x3', '\x2', '\x2', '\x2', '\x2D4', '\x2D7', 
		'\x3', '\x2', '\x2', '\x2', '\x2D5', '\x2D3', '\x3', '\x2', '\x2', '\x2', 
		'\x2D5', '\x2D6', '\x3', '\x2', '\x2', '\x2', '\x2D6', '\x2D8', '\x3', 
		'\x2', '\x2', '\x2', '\x2D7', '\x2D5', '\x3', '\x2', '\x2', '\x2', '\x2D8', 
		'\x2D9', '\a', '\x6', '\x2', '\x2', '\x2D9', '\x2DA', '\x5', '\x9E', 'P', 
		'\x2', '\x2DA', '\x2F4', '\x3', '\x2', '\x2', '\x2', '\x2DB', '\x2DC', 
		'\a', '\x5', '\x2', '\x2', '\x2DC', '\x2E1', '\x5', '\x9E', 'P', '\x2', 
		'\x2DD', '\x2E0', '\x5', 'Z', '.', '\x2', '\x2DE', '\x2E0', '\x5', '^', 
		'\x30', '\x2', '\x2DF', '\x2DD', '\x3', '\x2', '\x2', '\x2', '\x2DF', 
		'\x2DE', '\x3', '\x2', '\x2', '\x2', '\x2E0', '\x2E3', '\x3', '\x2', '\x2', 
		'\x2', '\x2E1', '\x2DF', '\x3', '\x2', '\x2', '\x2', '\x2E1', '\x2E2', 
		'\x3', '\x2', '\x2', '\x2', '\x2E2', '\x2E4', '\x3', '\x2', '\x2', '\x2', 
		'\x2E3', '\x2E1', '\x3', '\x2', '\x2', '\x2', '\x2E4', '\x2E5', '\a', 
		'\x6', '\x2', '\x2', '\x2E5', '\x2E6', '\x5', '\x9E', 'P', '\x2', '\x2E6', 
		'\x2F4', '\x3', '\x2', '\x2', '\x2', '\x2E7', '\x2E8', '\a', '\x3', '\x2', 
		'\x2', '\x2E8', '\x2ED', '\x5', '\x9E', 'P', '\x2', '\x2E9', '\x2EC', 
		'\x5', 'Z', '.', '\x2', '\x2EA', '\x2EC', '\x5', '^', '\x30', '\x2', '\x2EB', 
		'\x2E9', '\x3', '\x2', '\x2', '\x2', '\x2EB', '\x2EA', '\x3', '\x2', '\x2', 
		'\x2', '\x2EC', '\x2EF', '\x3', '\x2', '\x2', '\x2', '\x2ED', '\x2EB', 
		'\x3', '\x2', '\x2', '\x2', '\x2ED', '\x2EE', '\x3', '\x2', '\x2', '\x2', 
		'\x2EE', '\x2F0', '\x3', '\x2', '\x2', '\x2', '\x2EF', '\x2ED', '\x3', 
		'\x2', '\x2', '\x2', '\x2F0', '\x2F1', '\a', '\x4', '\x2', '\x2', '\x2F1', 
		'\x2F2', '\x5', '\x9E', 'P', '\x2', '\x2F2', '\x2F4', '\x3', '\x2', '\x2', 
		'\x2', '\x2F3', '\x2B1', '\x3', '\x2', '\x2', '\x2', '\x2F3', '\x2B4', 
		'\x3', '\x2', '\x2', '\x2', '\x2F3', '\x2B7', '\x3', '\x2', '\x2', '\x2', 
		'\x2F3', '\x2BA', '\x3', '\x2', '\x2', '\x2', '\x2F3', '\x2BD', '\x3', 
		'\x2', '\x2', '\x2', '\x2F3', '\x2C0', '\x3', '\x2', '\x2', '\x2', '\x2F3', 
		'\x2C2', '\x3', '\x2', '\x2', '\x2', '\x2F3', '\x2C5', '\x3', '\x2', '\x2', 
		'\x2', '\x2F3', '\x2C7', '\x3', '\x2', '\x2', '\x2', '\x2F3', '\x2C9', 
		'\x3', '\x2', '\x2', '\x2', '\x2F3', '\x2CB', '\x3', '\x2', '\x2', '\x2', 
		'\x2F3', '\x2CD', '\x3', '\x2', '\x2', '\x2', '\x2F3', '\x2CF', '\x3', 
		'\x2', '\x2', '\x2', '\x2F3', '\x2DB', '\x3', '\x2', '\x2', '\x2', '\x2F3', 
		'\x2E7', '\x3', '\x2', '\x2', '\x2', '\x2F4', '[', '\x3', '\x2', '\x2', 
		'\x2', '\x2F5', '\x2F6', '\a', '=', '\x2', '\x2', '\x2F6', '\x2FA', '\x5', 
		'\x9E', 'P', '\x2', '\x2F7', '\x2F9', '\x5', 'Z', '.', '\x2', '\x2F8', 
		'\x2F7', '\x3', '\x2', '\x2', '\x2', '\x2F9', '\x2FC', '\x3', '\x2', '\x2', 
		'\x2', '\x2FA', '\x2F8', '\x3', '\x2', '\x2', '\x2', '\x2FA', '\x2FB', 
		'\x3', '\x2', '\x2', '\x2', '\x2FB', '\x300', '\x3', '\x2', '\x2', '\x2', 
		'\x2FC', '\x2FA', '\x3', '\x2', '\x2', '\x2', '\x2FD', '\x301', '\x5', 
		'`', '\x31', '\x2', '\x2FE', '\x2FF', '\a', '\t', '\x2', '\x2', '\x2FF', 
		'\x301', '\x5', '\x9E', 'P', '\x2', '\x300', '\x2FD', '\x3', '\x2', '\x2', 
		'\x2', '\x300', '\x2FE', '\x3', '\x2', '\x2', '\x2', '\x301', ']', '\x3', 
		'\x2', '\x2', '\x2', '\x302', '\x30C', '\x5', '`', '\x31', '\x2', '\x303', 
		'\x304', '\a', '=', '\x2', '\x2', '\x304', '\x30C', '\x5', '\x9E', 'P', 
		'\x2', '\x305', '\x306', '\a', '\t', '\x2', '\x2', '\x306', '\x30C', '\x5', 
		'\x9E', 'P', '\x2', '\x307', '\x308', '\a', '\x14', '\x2', '\x2', '\x308', 
		'\x30C', '\x5', '\x9E', 'P', '\x2', '\x309', '\x30A', '\a', '\x15', '\x2', 
		'\x2', '\x30A', '\x30C', '\x5', '\x9E', 'P', '\x2', '\x30B', '\x302', 
		'\x3', '\x2', '\x2', '\x2', '\x30B', '\x303', '\x3', '\x2', '\x2', '\x2', 
		'\x30B', '\x305', '\x3', '\x2', '\x2', '\x2', '\x30B', '\x307', '\x3', 
		'\x2', '\x2', '\x2', '\x30B', '\x309', '\x3', '\x2', '\x2', '\x2', '\x30C', 
		'_', '\x3', '\x2', '\x2', '\x2', '\x30D', '\x30E', '\a', '\a', '\x2', 
		'\x2', '\x30E', '\x319', '\x5', '\x9E', 'P', '\x2', '\x30F', '\x318', 
		'\x5', '@', '!', '\x2', '\x310', '\x318', '\x5', '\x62', '\x32', '\x2', 
		'\x311', '\x318', '\x5', 'Z', '.', '\x2', '\x312', '\x318', '\x5', '`', 
		'\x31', '\x2', '\x313', '\x314', '\a', '=', '\x2', '\x2', '\x314', '\x318', 
		'\x5', '\x9E', 'P', '\x2', '\x315', '\x316', '\a', '\t', '\x2', '\x2', 
		'\x316', '\x318', '\x5', '\x9E', 'P', '\x2', '\x317', '\x30F', '\x3', 
		'\x2', '\x2', '\x2', '\x317', '\x310', '\x3', '\x2', '\x2', '\x2', '\x317', 
		'\x311', '\x3', '\x2', '\x2', '\x2', '\x317', '\x312', '\x3', '\x2', '\x2', 
		'\x2', '\x317', '\x313', '\x3', '\x2', '\x2', '\x2', '\x317', '\x315', 
		'\x3', '\x2', '\x2', '\x2', '\x318', '\x31B', '\x3', '\x2', '\x2', '\x2', 
		'\x319', '\x317', '\x3', '\x2', '\x2', '\x2', '\x319', '\x31A', '\x3', 
		'\x2', '\x2', '\x2', '\x31A', '\x31C', '\x3', '\x2', '\x2', '\x2', '\x31B', 
		'\x319', '\x3', '\x2', '\x2', '\x2', '\x31C', '\x31D', '\a', '\b', '\x2', 
		'\x2', '\x31D', '\x31E', '\x5', '\x9E', 'P', '\x2', '\x31E', '\x61', '\x3', 
		'\x2', '\x2', '\x2', '\x31F', '\x32A', '\x5', '>', ' ', '\x2', '\x320', 
		'\x32A', '\x5', '\f', '\a', '\x2', '\x321', '\x32A', '\x5', '\x18', '\r', 
		'\x2', '\x322', '\x32A', '\x5', '\x82', '\x42', '\x2', '\x323', '\x32A', 
		'\x5', '\x86', '\x44', '\x2', '\x324', '\x32A', '\x5', '\x66', '\x34', 
		'\x2', '\x325', '\x32A', '\x5', '\x8C', 'G', '\x2', '\x326', '\x32A', 
		'\x5', '\x8E', 'H', '\x2', '\x327', '\x32A', '\x5', '\x90', 'I', '\x2', 
		'\x328', '\x32A', '\x5', '\\', '/', '\x2', '\x329', '\x31F', '\x3', '\x2', 
		'\x2', '\x2', '\x329', '\x320', '\x3', '\x2', '\x2', '\x2', '\x329', '\x321', 
		'\x3', '\x2', '\x2', '\x2', '\x329', '\x322', '\x3', '\x2', '\x2', '\x2', 
		'\x329', '\x323', '\x3', '\x2', '\x2', '\x2', '\x329', '\x324', '\x3', 
		'\x2', '\x2', '\x2', '\x329', '\x325', '\x3', '\x2', '\x2', '\x2', '\x329', 
		'\x326', '\x3', '\x2', '\x2', '\x2', '\x329', '\x327', '\x3', '\x2', '\x2', 
		'\x2', '\x329', '\x328', '\x3', '\x2', '\x2', '\x2', '\x32A', '\x63', 
		'\x3', '\x2', '\x2', '\x2', '\x32B', '\x32C', '\a', '\a', '\x2', '\x2', 
		'\x32C', '\x330', '\x5', '\x9E', 'P', '\x2', '\x32D', '\x32F', '\x5', 
		'\x62', '\x32', '\x2', '\x32E', '\x32D', '\x3', '\x2', '\x2', '\x2', '\x32F', 
		'\x332', '\x3', '\x2', '\x2', '\x2', '\x330', '\x32E', '\x3', '\x2', '\x2', 
		'\x2', '\x330', '\x331', '\x3', '\x2', '\x2', '\x2', '\x331', '\x333', 
		'\x3', '\x2', '\x2', '\x2', '\x332', '\x330', '\x3', '\x2', '\x2', '\x2', 
		'\x333', '\x334', '\a', '\b', '\x2', '\x2', '\x334', '\x335', '\x5', '\x9E', 
		'P', '\x2', '\x335', '\x65', '\x3', '\x2', '\x2', '\x2', '\x336', '\x337', 
		'\a', '\x33', '\x2', '\x2', '\x337', '\x338', '\x5', '\x9E', 'P', '\x2', 
		'\x338', '\x339', '\x5', 'h', '\x35', '\x2', '\x339', '\x33A', '\x5', 
		'\x9E', 'P', '\x2', '\x33A', '\x33B', '\x5', '\x64', '\x33', '\x2', '\x33B', 
		'g', '\x3', '\x2', '\x2', '\x2', '\x33C', '\x341', '\x5', 'l', '\x37', 
		'\x2', '\x33D', '\x341', '\x5', 'n', '\x38', '\x2', '\x33E', '\x341', 
		'\x5', 'p', '\x39', '\x2', '\x33F', '\x341', '\x5', 'j', '\x36', '\x2', 
		'\x340', '\x33C', '\x3', '\x2', '\x2', '\x2', '\x340', '\x33D', '\x3', 
		'\x2', '\x2', '\x2', '\x340', '\x33E', '\x3', '\x2', '\x2', '\x2', '\x340', 
		'\x33F', '\x3', '\x2', '\x2', '\x2', '\x341', 'i', '\x3', '\x2', '\x2', 
		'\x2', '\x342', '\x343', '\a', '\x5', '\x2', '\x2', '\x343', '\x344', 
		'\x5', '\x9E', 'P', '\x2', '\x344', '\x345', '\x5', 'h', '\x35', '\x2', 
		'\x345', '\x346', '\x5', '\x9E', 'P', '\x2', '\x346', '\x347', '\a', '\x6', 
		'\x2', '\x2', '\x347', '\x34B', '\x3', '\x2', '\x2', '\x2', '\x348', '\x34B', 
		'\x5', 'r', ':', '\x2', '\x349', '\x34B', '\x5', 't', ';', '\x2', '\x34A', 
		'\x342', '\x3', '\x2', '\x2', '\x2', '\x34A', '\x348', '\x3', '\x2', '\x2', 
		'\x2', '\x34A', '\x349', '\x3', '\x2', '\x2', '\x2', '\x34B', 'k', '\x3', 
		'\x2', '\x2', '\x2', '\x34C', '\x34D', '\a', '#', '\x2', '\x2', '\x34D', 
		'\x34E', '\x5', '\x9E', 'P', '\x2', '\x34E', '\x34F', '\a', '\x13', '\x2', 
		'\x2', '\x34F', '\x350', '\x5', '\x9E', 'P', '\x2', '\x350', '\x351', 
		'\x5', 'j', '\x36', '\x2', '\x351', 'm', '\x3', '\x2', '\x2', '\x2', '\x352', 
		'\x35C', '\x5', 'j', '\x36', '\x2', '\x353', '\x354', '\x5', '\x9E', 'P', 
		'\x2', '\x354', '\x355', '\a', '\x13', '\x2', '\x2', '\x355', '\x356', 
		'\x5', '\x9E', 'P', '\x2', '\x356', '\x357', '\a', '$', '\x2', '\x2', 
		'\x357', '\x358', '\x5', '\x9E', 'P', '\x2', '\x358', '\x359', '\a', '\x13', 
		'\x2', '\x2', '\x359', '\x35A', '\x5', '\x9E', 'P', '\x2', '\x35A', '\x35B', 
		'\x5', 'j', '\x36', '\x2', '\x35B', '\x35D', '\x3', '\x2', '\x2', '\x2', 
		'\x35C', '\x353', '\x3', '\x2', '\x2', '\x2', '\x35D', '\x35E', '\x3', 
		'\x2', '\x2', '\x2', '\x35E', '\x35C', '\x3', '\x2', '\x2', '\x2', '\x35E', 
		'\x35F', '\x3', '\x2', '\x2', '\x2', '\x35F', 'o', '\x3', '\x2', '\x2', 
		'\x2', '\x360', '\x36A', '\x5', 'j', '\x36', '\x2', '\x361', '\x362', 
		'\x5', '\x9E', 'P', '\x2', '\x362', '\x363', '\a', '\x13', '\x2', '\x2', 
		'\x363', '\x364', '\x5', '\x9E', 'P', '\x2', '\x364', '\x365', '\a', '\x34', 
		'\x2', '\x2', '\x365', '\x366', '\x5', '\x9E', 'P', '\x2', '\x366', '\x367', 
		'\a', '\x13', '\x2', '\x2', '\x367', '\x368', '\x5', '\x9E', 'P', '\x2', 
		'\x368', '\x369', '\x5', 'j', '\x36', '\x2', '\x369', '\x36B', '\x3', 
		'\x2', '\x2', '\x2', '\x36A', '\x361', '\x3', '\x2', '\x2', '\x2', '\x36B', 
		'\x36C', '\x3', '\x2', '\x2', '\x2', '\x36C', '\x36A', '\x3', '\x2', '\x2', 
		'\x2', '\x36C', '\x36D', '\x3', '\x2', '\x2', '\x2', '\x36D', 'q', '\x3', 
		'\x2', '\x2', '\x2', '\x36E', '\x36F', '\a', '\x5', '\x2', '\x2', '\x36F', 
		'\x370', '\x5', '\x9E', 'P', '\x2', '\x370', '\x371', '\x5', '\x42', '\"', 
		'\x2', '\x371', '\x372', '\a', '\x6', '\x2', '\x2', '\x372', 's', '\x3', 
		'\x2', '\x2', '\x2', '\x373', '\x378', '\t', '\x6', '\x2', '\x2', '\x374', 
		'\x377', '\x5', 'Z', '.', '\x2', '\x375', '\x377', '\x5', '^', '\x30', 
		'\x2', '\x376', '\x374', '\x3', '\x2', '\x2', '\x2', '\x376', '\x375', 
		'\x3', '\x2', '\x2', '\x2', '\x377', '\x37A', '\x3', '\x2', '\x2', '\x2', 
		'\x378', '\x376', '\x3', '\x2', '\x2', '\x2', '\x378', '\x379', '\x3', 
		'\x2', '\x2', '\x2', '\x379', '\x37B', '\x3', '\x2', '\x2', '\x2', '\x37A', 
		'\x378', '\x3', '\x2', '\x2', '\x2', '\x37B', '\x37C', '\a', '\x6', '\x2', 
		'\x2', '\x37C', 'u', '\x3', '\x2', '\x2', '\x2', '\x37D', '\x37E', '\a', 
		' ', '\x2', '\x2', '\x37E', '\x37F', '\x5', '\x9E', 'P', '\x2', '\x37F', 
		'\x380', '\a', '.', '\x2', '\x2', '\x380', '\x381', '\x5', '\x9E', 'P', 
		'\x2', '\x381', '\x382', '\a', '\x6', '\x2', '\x2', '\x382', '\x385', 
		'\x3', '\x2', '\x2', '\x2', '\x383', '\x385', '\a', '\x12', '\x2', '\x2', 
		'\x384', '\x37D', '\x3', '\x2', '\x2', '\x2', '\x384', '\x383', '\x3', 
		'\x2', '\x2', '\x2', '\x385', 'w', '\x3', '\x2', '\x2', '\x2', '\x386', 
		'\x387', '\a', '?', '\x2', '\x2', '\x387', '\x388', '\x5', '\x9E', 'P', 
		'\x2', '\x388', '\x389', '\a', '>', '\x2', '\x2', '\x389', '\x38A', '\x5', 
		'\x9E', 'P', '\x2', '\x38A', '\x38B', '\a', '\x6', '\x2', '\x2', '\x38B', 
		'\x38C', '\x5', '\x9E', 'P', '\x2', '\x38C', 'y', '\x3', '\x2', '\x2', 
		'\x2', '\x38D', '\x38E', '\a', '\x38', '\x2', '\x2', '\x38E', '\x38F', 
		'\x5', '\x9E', 'P', '\x2', '\x38F', '\x390', '\x5', '|', '?', '\x2', '\x390', 
		'\x391', '\a', '\x6', '\x2', '\x2', '\x391', '\x392', '\x5', '\x9E', 'P', 
		'\x2', '\x392', '{', '\x3', '\x2', '\x2', '\x2', '\x393', '\x39E', '\x5', 
		'~', '@', '\x2', '\x394', '\x395', '\a', '\x13', '\x2', '\x2', '\x395', 
		'\x396', '\x5', '\x9E', 'P', '\x2', '\x396', '\x397', '\t', '\x5', '\x2', 
		'\x2', '\x397', '\x398', '\x5', '\x9E', 'P', '\x2', '\x398', '\x399', 
		'\a', '\x13', '\x2', '\x2', '\x399', '\x39A', '\x5', '\x9E', 'P', '\x2', 
		'\x39A', '\x39B', '\x5', '~', '@', '\x2', '\x39B', '\x39D', '\x3', '\x2', 
		'\x2', '\x2', '\x39C', '\x394', '\x3', '\x2', '\x2', '\x2', '\x39D', '\x3A0', 
		'\x3', '\x2', '\x2', '\x2', '\x39E', '\x39C', '\x3', '\x2', '\x2', '\x2', 
		'\x39E', '\x39F', '\x3', '\x2', '\x2', '\x2', '\x39F', '}', '\x3', '\x2', 
		'\x2', '\x2', '\x3A0', '\x39E', '\x3', '\x2', '\x2', '\x2', '\x3A1', '\x3AD', 
		'\x5', '\x80', '\x41', '\x2', '\x3A2', '\x3A3', '\a', '\r', '\x2', '\x2', 
		'\x3A3', '\x3A4', '\x5', '\x9E', 'P', '\x2', '\x3A4', '\x3A5', '\x5', 
		'\x80', '\x41', '\x2', '\x3A5', '\x3AC', '\x3', '\x2', '\x2', '\x2', '\x3A6', 
		'\x3A7', '\a', '\xE', '\x2', '\x2', '\x3A7', '\x3A8', '\x5', '\x9E', 'P', 
		'\x2', '\x3A8', '\x3A9', '\x5', 'R', '*', '\x2', '\x3A9', '\x3AA', '\x5', 
		'\x9E', 'P', '\x2', '\x3AA', '\x3AC', '\x3', '\x2', '\x2', '\x2', '\x3AB', 
		'\x3A2', '\x3', '\x2', '\x2', '\x2', '\x3AB', '\x3A6', '\x3', '\x2', '\x2', 
		'\x2', '\x3AC', '\x3AF', '\x3', '\x2', '\x2', '\x2', '\x3AD', '\x3AB', 
		'\x3', '\x2', '\x2', '\x2', '\x3AD', '\x3AE', '\x3', '\x2', '\x2', '\x2', 
		'\x3AE', '\x7F', '\x3', '\x2', '\x2', '\x2', '\x3AF', '\x3AD', '\x3', 
		'\x2', '\x2', '\x2', '\x3B0', '\x3B1', '\x5', 'R', '*', '\x2', '\x3B1', 
		'\x3B2', '\x5', '\x9E', 'P', '\x2', '\x3B2', '\x3C3', '\x3', '\x2', '\x2', 
		'\x2', '\x3B3', '\x3B4', '\x5', 'V', ',', '\x2', '\x3B4', '\x3B5', '\x5', 
		'\x9E', 'P', '\x2', '\x3B5', '\x3C3', '\x3', '\x2', '\x2', '\x2', '\x3B6', 
		'\x3B7', '\x5', 'X', '-', '\x2', '\x3B7', '\x3B8', '\x5', '\x9E', 'P', 
		'\x2', '\x3B8', '\x3C3', '\x3', '\x2', '\x2', '\x2', '\x3B9', '\x3BA', 
		'\x5', 'T', '+', '\x2', '\x3BA', '\x3BB', '\x5', '\x9E', 'P', '\x2', '\x3BB', 
		'\x3C3', '\x3', '\x2', '\x2', '\x2', '\x3BC', '\x3BD', '\a', '\x5', '\x2', 
		'\x2', '\x3BD', '\x3BE', '\x5', '\x9E', 'P', '\x2', '\x3BE', '\x3BF', 
		'\x5', '|', '?', '\x2', '\x3BF', '\x3C0', '\a', '\x6', '\x2', '\x2', '\x3C0', 
		'\x3C1', '\x5', '\x9E', 'P', '\x2', '\x3C1', '\x3C3', '\x3', '\x2', '\x2', 
		'\x2', '\x3C2', '\x3B0', '\x3', '\x2', '\x2', '\x2', '\x3C2', '\x3B3', 
		'\x3', '\x2', '\x2', '\x2', '\x3C2', '\x3B6', '\x3', '\x2', '\x2', '\x2', 
		'\x3C2', '\x3B9', '\x3', '\x2', '\x2', '\x2', '\x3C2', '\x3BC', '\x3', 
		'\x2', '\x2', '\x2', '\x3C3', '\x81', '\x3', '\x2', '\x2', '\x2', '\x3C4', 
		'\x3C5', '\a', '\x32', '\x2', '\x2', '\x3C5', '\x3C6', '\x5', '\x9E', 
		'P', '\x2', '\x3C6', '\x3C7', '\a', '\a', '\x2', '\x2', '\x3C7', '\x3C9', 
		'\x5', '\x9E', 'P', '\x2', '\x3C8', '\x3CA', '\x5', '\x84', '\x43', '\x2', 
		'\x3C9', '\x3C8', '\x3', '\x2', '\x2', '\x2', '\x3C9', '\x3CA', '\x3', 
		'\x2', '\x2', '\x2', '\x3CA', '\x3D2', '\x3', '\x2', '\x2', '\x2', '\x3CB', 
		'\x3CC', '\a', '\t', '\x2', '\x2', '\x3CC', '\x3CE', '\x5', '\x9E', 'P', 
		'\x2', '\x3CD', '\x3CF', '\x5', '\x84', '\x43', '\x2', '\x3CE', '\x3CD', 
		'\x3', '\x2', '\x2', '\x2', '\x3CE', '\x3CF', '\x3', '\x2', '\x2', '\x2', 
		'\x3CF', '\x3D1', '\x3', '\x2', '\x2', '\x2', '\x3D0', '\x3CB', '\x3', 
		'\x2', '\x2', '\x2', '\x3D1', '\x3D4', '\x3', '\x2', '\x2', '\x2', '\x3D2', 
		'\x3D0', '\x3', '\x2', '\x2', '\x2', '\x3D2', '\x3D3', '\x3', '\x2', '\x2', 
		'\x2', '\x3D3', '\x3D5', '\x3', '\x2', '\x2', '\x2', '\x3D4', '\x3D2', 
		'\x3', '\x2', '\x2', '\x2', '\x3D5', '\x3D6', '\a', '\b', '\x2', '\x2', 
		'\x3D6', '\x3D7', '\x5', '\x9E', 'P', '\x2', '\x3D7', '\x83', '\x3', '\x2', 
		'\x2', '\x2', '\x3D8', '\x3D9', '\x5', '<', '\x1F', '\x2', '\x3D9', '\x3DA', 
		'\a', '\v', '\x2', '\x2', '\x3DA', '\x3DB', '\x5', '\x9E', 'P', '\x2', 
		'\x3DB', '\x3DC', '\x5', 'H', '%', '\x2', '\x3DC', '\x3E3', '\x3', '\x2', 
		'\x2', '\x2', '\x3DD', '\x3DE', '\x5', '<', '\x1F', '\x2', '\x3DE', '\x3DF', 
		'\a', '\v', '\x2', '\x2', '\x3DF', '\x3E0', '\x5', '\x9E', 'P', '\x2', 
		'\x3E0', '\x3E1', '\x5', '\x46', '$', '\x2', '\x3E1', '\x3E3', '\x3', 
		'\x2', '\x2', '\x2', '\x3E2', '\x3D8', '\x3', '\x2', '\x2', '\x2', '\x3E2', 
		'\x3DD', '\x3', '\x2', '\x2', '\x2', '\x3E3', '\x85', '\x3', '\x2', '\x2', 
		'\x2', '\x3E4', '\x3E5', '\a', '\x35', '\x2', '\x2', '\x3E5', '\x3E6', 
		'\x5', '\x9E', 'P', '\x2', '\x3E6', '\x3E7', '\a', '\x13', '\x2', '\x2', 
		'\x3E7', '\x3E8', '\x5', '\x9E', 'P', '\x2', '\x3E8', '\x3E9', '\x5', 
		'\x9C', 'O', '\x2', '\x3E9', '\x3EA', '\x5', '\x9E', 'P', '\x2', '\x3EA', 
		'\x3EB', '\a', '\a', '\x2', '\x2', '\x3EB', '\x3EF', '\x5', '\x9E', 'P', 
		'\x2', '\x3EC', '\x3EE', '\x5', '\x88', '\x45', '\x2', '\x3ED', '\x3EC', 
		'\x3', '\x2', '\x2', '\x2', '\x3EE', '\x3F1', '\x3', '\x2', '\x2', '\x2', 
		'\x3EF', '\x3ED', '\x3', '\x2', '\x2', '\x2', '\x3EF', '\x3F0', '\x3', 
		'\x2', '\x2', '\x2', '\x3F0', '\x3F2', '\x3', '\x2', '\x2', '\x2', '\x3F1', 
		'\x3EF', '\x3', '\x2', '\x2', '\x2', '\x3F2', '\x3F3', '\a', '\b', '\x2', 
		'\x2', '\x3F3', '\x3F4', '\x5', '\x9E', 'P', '\x2', '\x3F4', '\x87', '\x3', 
		'\x2', '\x2', '\x2', '\x3F5', '\x3F6', '\x5', '\x8A', '\x46', '\x2', '\x3F6', 
		'\x3F7', '\a', '\a', '\x2', '\x2', '\x3F7', '\x3F9', '\x5', '\x9E', 'P', 
		'\x2', '\x3F8', '\x3FA', '\x5', '@', '!', '\x2', '\x3F9', '\x3F8', '\x3', 
		'\x2', '\x2', '\x2', '\x3F9', '\x3FA', '\x3', '\x2', '\x2', '\x2', '\x3FA', 
		'\x3FB', '\x3', '\x2', '\x2', '\x2', '\x3FB', '\x3FC', '\a', '\b', '\x2', 
		'\x2', '\x3FC', '\x3FD', '\x5', '\x9E', 'P', '\x2', '\x3FD', '\x89', '\x3', 
		'\x2', '\x2', '\x2', '\x3FE', '\x3FF', '\t', '\a', '\x2', '\x2', '\x3FF', 
		'\x407', '\x5', '\x9E', 'P', '\x2', '\x400', '\x401', '\a', '*', '\x2', 
		'\x2', '\x401', '\x402', '\x5', '\x9E', 'P', '\x2', '\x402', '\x403', 
		'\t', '\a', '\x2', '\x2', '\x403', '\x404', '\x5', '\x9E', 'P', '\x2', 
		'\x404', '\x406', '\x3', '\x2', '\x2', '\x2', '\x405', '\x400', '\x3', 
		'\x2', '\x2', '\x2', '\x406', '\x409', '\x3', '\x2', '\x2', '\x2', '\x407', 
		'\x405', '\x3', '\x2', '\x2', '\x2', '\x407', '\x408', '\x3', '\x2', '\x2', 
		'\x2', '\x408', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x409', '\x407', 
		'\x3', '\x2', '\x2', '\x2', '\x40A', '\x40B', '\a', '\x39', '\x2', '\x2', 
		'\x40B', '\x40C', '\x5', '\x9E', 'P', '\x2', '\x40C', '\x40D', '\a', '\a', 
		'\x2', '\x2', '\x40D', '\x40F', '\x5', '\x9E', 'P', '\x2', '\x40E', '\x410', 
		'\x5', '@', '!', '\x2', '\x40F', '\x40E', '\x3', '\x2', '\x2', '\x2', 
		'\x40F', '\x410', '\x3', '\x2', '\x2', '\x2', '\x410', '\x411', '\x3', 
		'\x2', '\x2', '\x2', '\x411', '\x412', '\a', '\b', '\x2', '\x2', '\x412', 
		'\x413', '\x5', '\x9E', 'P', '\x2', '\x413', '\x8D', '\x3', '\x2', '\x2', 
		'\x2', '\x414', '\x415', '\a', ':', '\x2', '\x2', '\x415', '\x416', '\x5', 
		'\x9E', 'P', '\x2', '\x416', '\x417', '\x5', '\x9C', 'O', '\x2', '\x417', 
		'\x418', '\x5', '\x9E', 'P', '\x2', '\x418', '\x419', '\a', '\a', '\x2', 
		'\x2', '\x419', '\x41B', '\x5', '\x9E', 'P', '\x2', '\x41A', '\x41C', 
		'\x5', '@', '!', '\x2', '\x41B', '\x41A', '\x3', '\x2', '\x2', '\x2', 
		'\x41B', '\x41C', '\x3', '\x2', '\x2', '\x2', '\x41C', '\x41D', '\x3', 
		'\x2', '\x2', '\x2', '\x41D', '\x41E', '\a', '\b', '\x2', '\x2', '\x41E', 
		'\x41F', '\x5', '\x9E', 'P', '\x2', '\x41F', '\x8F', '\x3', '\x2', '\x2', 
		'\x2', '\x420', '\x421', '\a', ';', '\x2', '\x2', '\x421', '\x422', '\x5', 
		'\x9E', 'P', '\x2', '\x422', '\x423', '\x5', '\x92', 'J', '\x2', '\x423', 
		'\x424', '\x5', '\x9E', 'P', '\x2', '\x424', '\x425', '\a', '\a', '\x2', 
		'\x2', '\x425', '\x429', '\x5', '\x9E', 'P', '\x2', '\x426', '\x428', 
		'\x5', '\x96', 'L', '\x2', '\x427', '\x426', '\x3', '\x2', '\x2', '\x2', 
		'\x428', '\x42B', '\x3', '\x2', '\x2', '\x2', '\x429', '\x427', '\x3', 
		'\x2', '\x2', '\x2', '\x429', '\x42A', '\x3', '\x2', '\x2', '\x2', '\x42A', 
		'\x42C', '\x3', '\x2', '\x2', '\x2', '\x42B', '\x429', '\x3', '\x2', '\x2', 
		'\x2', '\x42C', '\x42D', '\a', '\b', '\x2', '\x2', '\x42D', '\x42E', '\x5', 
		'\x9E', 'P', '\x2', '\x42E', '\x91', '\x3', '\x2', '\x2', '\x2', '\x42F', 
		'\x437', '\x5', '\x94', 'K', '\x2', '\x430', '\x431', '\x5', '\x9E', 'P', 
		'\x2', '\x431', '\x432', '\a', '*', '\x2', '\x2', '\x432', '\x433', '\x5', 
		'\x9E', 'P', '\x2', '\x433', '\x434', '\x5', '\x94', 'K', '\x2', '\x434', 
		'\x436', '\x3', '\x2', '\x2', '\x2', '\x435', '\x430', '\x3', '\x2', '\x2', 
		'\x2', '\x436', '\x439', '\x3', '\x2', '\x2', '\x2', '\x437', '\x435', 
		'\x3', '\x2', '\x2', '\x2', '\x437', '\x438', '\x3', '\x2', '\x2', '\x2', 
		'\x438', '\x93', '\x3', '\x2', '\x2', '\x2', '\x439', '\x437', '\x3', 
		'\x2', '\x2', '\x2', '\x43A', '\x445', '\a', '.', '\x2', '\x2', '\x43B', 
		'\x441', '\x5', '\x9C', 'O', '\x2', '\x43C', '\x43D', '\x5', '\x9E', 'P', 
		'\x2', '\x43D', '\x43E', '\x5', '\x9C', 'O', '\x2', '\x43E', '\x440', 
		'\x3', '\x2', '\x2', '\x2', '\x43F', '\x43C', '\x3', '\x2', '\x2', '\x2', 
		'\x440', '\x443', '\x3', '\x2', '\x2', '\x2', '\x441', '\x43F', '\x3', 
		'\x2', '\x2', '\x2', '\x441', '\x442', '\x3', '\x2', '\x2', '\x2', '\x442', 
		'\x445', '\x3', '\x2', '\x2', '\x2', '\x443', '\x441', '\x3', '\x2', '\x2', 
		'\x2', '\x444', '\x43A', '\x3', '\x2', '\x2', '\x2', '\x444', '\x43B', 
		'\x3', '\x2', '\x2', '\x2', '\x445', '\x95', '\x3', '\x2', '\x2', '\x2', 
		'\x446', '\x447', '\x5', '\x98', 'M', '\x2', '\x447', '\x448', '\x5', 
		'\x9E', 'P', '\x2', '\x448', '\x449', '\a', '\a', '\x2', '\x2', '\x449', 
		'\x44B', '\x5', '\x9E', 'P', '\x2', '\x44A', '\x44C', '\x5', '\x9A', 'N', 
		'\x2', '\x44B', '\x44A', '\x3', '\x2', '\x2', '\x2', '\x44B', '\x44C', 
		'\x3', '\x2', '\x2', '\x2', '\x44C', '\x455', '\x3', '\x2', '\x2', '\x2', 
		'\x44D', '\x44E', '\x5', '\x9E', 'P', '\x2', '\x44E', '\x44F', '\a', '\t', 
		'\x2', '\x2', '\x44F', '\x451', '\x5', '\x9E', 'P', '\x2', '\x450', '\x452', 
		'\x5', '\x9A', 'N', '\x2', '\x451', '\x450', '\x3', '\x2', '\x2', '\x2', 
		'\x451', '\x452', '\x3', '\x2', '\x2', '\x2', '\x452', '\x454', '\x3', 
		'\x2', '\x2', '\x2', '\x453', '\x44D', '\x3', '\x2', '\x2', '\x2', '\x454', 
		'\x457', '\x3', '\x2', '\x2', '\x2', '\x455', '\x453', '\x3', '\x2', '\x2', 
		'\x2', '\x455', '\x456', '\x3', '\x2', '\x2', '\x2', '\x456', '\x458', 
		'\x3', '\x2', '\x2', '\x2', '\x457', '\x455', '\x3', '\x2', '\x2', '\x2', 
		'\x458', '\x459', '\a', '\b', '\x2', '\x2', '\x459', '\x45A', '\x5', '\x9E', 
		'P', '\x2', '\x45A', '\x97', '\x3', '\x2', '\x2', '\x2', '\x45B', '\x45C', 
		'\a', '=', '\x2', '\x2', '\x45C', '\x99', '\x3', '\x2', '\x2', '\x2', 
		'\x45D', '\x45E', '\x5', '\x9C', 'O', '\x2', '\x45E', '\x45F', '\x5', 
		'\x9E', 'P', '\x2', '\x45F', '\x460', '\a', '\v', '\x2', '\x2', '\x460', 
		'\x461', '\x5', '\x9E', 'P', '\x2', '\x461', '\x467', '\x5', 'R', '*', 
		'\x2', '\x462', '\x463', '\x5', '\x9E', 'P', '\x2', '\x463', '\x464', 
		'\x5', 'R', '*', '\x2', '\x464', '\x466', '\x3', '\x2', '\x2', '\x2', 
		'\x465', '\x462', '\x3', '\x2', '\x2', '\x2', '\x466', '\x469', '\x3', 
		'\x2', '\x2', '\x2', '\x467', '\x465', '\x3', '\x2', '\x2', '\x2', '\x467', 
		'\x468', '\x3', '\x2', '\x2', '\x2', '\x468', '\x9B', '\x3', '\x2', '\x2', 
		'\x2', '\x469', '\x467', '\x3', '\x2', '\x2', '\x2', '\x46A', '\x46B', 
		'\t', '\b', '\x2', '\x2', '\x46B', '\x9D', '\x3', '\x2', '\x2', '\x2', 
		'\x46C', '\x46E', '\t', '\t', '\x2', '\x2', '\x46D', '\x46C', '\x3', '\x2', 
		'\x2', '\x2', '\x46E', '\x471', '\x3', '\x2', '\x2', '\x2', '\x46F', '\x46D', 
		'\x3', '\x2', '\x2', '\x2', '\x46F', '\x470', '\x3', '\x2', '\x2', '\x2', 
		'\x470', '\x9F', '\x3', '\x2', '\x2', '\x2', '\x471', '\x46F', '\x3', 
		'\x2', '\x2', '\x2', 's', '\xA5', '\xAA', '\xB1', '\xB6', '\xBD', '\xC2', 
		'\xC9', '\xCE', '\xDF', '\xE5', '\xF0', '\xFA', '\x103', '\x107', '\x10E', 
		'\x112', '\x11D', '\x121', '\x125', '\x136', '\x139', '\x13E', '\x149', 
		'\x153', '\x156', '\x161', '\x16C', '\x171', '\x176', '\x17A', '\x18B', 
		'\x196', '\x1A1', '\x1A5', '\x1AC', '\x1AE', '\x1B6', '\x1B8', '\x1BA', 
		'\x1BD', '\x1C3', '\x1CA', '\x1D4', '\x1DC', '\x1E0', '\x1E6', '\x1EA', 
		'\x1F8', '\x1FD', '\x20B', '\x215', '\x220', '\x226', '\x22E', '\x234', 
		'\x239', '\x23F', '\x247', '\x24B', '\x253', '\x25A', '\x263', '\x265', 
		'\x269', '\x26E', '\x28C', '\x29E', '\x2A3', '\x2A8', '\x2AD', '\x2D3', 
		'\x2D5', '\x2DF', '\x2E1', '\x2EB', '\x2ED', '\x2F3', '\x2FA', '\x300', 
		'\x30B', '\x317', '\x319', '\x329', '\x330', '\x340', '\x34A', '\x35E', 
		'\x36C', '\x376', '\x378', '\x384', '\x39E', '\x3AB', '\x3AD', '\x3C2', 
		'\x3C9', '\x3CE', '\x3D2', '\x3E2', '\x3EF', '\x3F9', '\x407', '\x40F', 
		'\x41B', '\x429', '\x437', '\x441', '\x444', '\x44B', '\x451', '\x455', 
		'\x467', '\x46F',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
