//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\dev\xcss-parser-csharp\AntlrCSharp\XCSSParser.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class XCSSParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		OpenBracket=1, CloseBracket=2, OpenParen=3, CloseParen=4, OpenBrace=5, 
		CloseBrace=6, SemiColon=7, Equal=8, Colon=9, Dot=10, Multiply=11, Divide=12, 
		Pipe=13, Underscore=14, Comment=15, Url=16, Space=17, Cdo=18, Cdc=19, 
		Includes=20, DashMatch=21, Hash=22, Import=23, Page=24, Media=25, Namespace=26, 
		Charset=27, Important=28, Percentage=29, Url_=30, UnicodeRange=31, MediaOnly=32, 
		Not=33, And=34, Dimension=35, UnknownDimension=36, Plus=37, Minus=38, 
		Greater=39, Comma=40, Tilde=41, PseudoNot=42, Number=43, String_=44, PrefixMatch=45, 
		SuffixMatch=46, SubstringMatch=47, FontFace=48, Supports=49, Or=50, Keyframes=51, 
		From=52, To=53, Calc=54, Viewport=55, CounterStyle=56, FontFeatureValues=57, 
		DxImageTransform=58, AtKeyword=59, Variable=60, Var=61, Ident=62, Function_=63, 
		UnexpectedCharacter=64;
	public const int
		RULE_selectorGroup = 0, RULE_selector = 1, RULE_combinator = 2, RULE_simpleSelectorSequence = 3, 
		RULE_typeSelector = 4, RULE_typeNamespacePrefix = 5, RULE_elementName = 6, 
		RULE_universal = 7, RULE_className = 8, RULE_attrib = 9, RULE_pseudo = 10, 
		RULE_functionalPseudo = 11, RULE_expression = 12, RULE_negation = 13, 
		RULE_negationArg = 14, RULE_ident = 15, RULE_ws = 16;
	public static readonly string[] ruleNames = {
		"selectorGroup", "selector", "combinator", "simpleSelectorSequence", "typeSelector", 
		"typeNamespacePrefix", "elementName", "universal", "className", "attrib", 
		"pseudo", "functionalPseudo", "expression", "negation", "negationArg", 
		"ident", "ws"
	};

	private static readonly string[] _LiteralNames = {
		null, "'['", "']'", "'('", "')'", "'{'", "'}'", "';'", "'='", "':'", "'.'", 
		"'*'", "'/'", "'|'", "'_'", null, null, null, "'<!--'", "'-->'", "'~='", 
		"'|='", null, null, null, null, null, "'@charset '", null, null, "'url('", 
		null, null, null, null, null, null, "'+'", "'-'", "'>'", "','", "'~'", 
		null, null, null, "'^='", "'$='", "'*='", null, null, null, null, null, 
		null, "'calc('", null, null, null, null, null, null, "'var('"
	};
	private static readonly string[] _SymbolicNames = {
		null, "OpenBracket", "CloseBracket", "OpenParen", "CloseParen", "OpenBrace", 
		"CloseBrace", "SemiColon", "Equal", "Colon", "Dot", "Multiply", "Divide", 
		"Pipe", "Underscore", "Comment", "Url", "Space", "Cdo", "Cdc", "Includes", 
		"DashMatch", "Hash", "Import", "Page", "Media", "Namespace", "Charset", 
		"Important", "Percentage", "Url_", "UnicodeRange", "MediaOnly", "Not", 
		"And", "Dimension", "UnknownDimension", "Plus", "Minus", "Greater", "Comma", 
		"Tilde", "PseudoNot", "Number", "String_", "PrefixMatch", "SuffixMatch", 
		"SubstringMatch", "FontFace", "Supports", "Or", "Keyframes", "From", "To", 
		"Calc", "Viewport", "CounterStyle", "FontFeatureValues", "DxImageTransform", 
		"AtKeyword", "Variable", "Var", "Ident", "Function_", "UnexpectedCharacter"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "XCSSParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static XCSSParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public XCSSParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public XCSSParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class SelectorGroupContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SelectorContext[] selector() {
			return GetRuleContexts<SelectorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectorContext selector(int i) {
			return GetRuleContext<SelectorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(XCSSParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(XCSSParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WsContext[] ws() {
			return GetRuleContexts<WsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WsContext ws(int i) {
			return GetRuleContext<WsContext>(i);
		}
		public SelectorGroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectorGroup; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXCSSParserVisitor<TResult> typedVisitor = visitor as IXCSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectorGroup(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectorGroupContext selectorGroup() {
		SelectorGroupContext _localctx = new SelectorGroupContext(Context, State);
		EnterRule(_localctx, 0, RULE_selectorGroup);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 34;
			selector();
			State = 41;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 35;
				Match(Comma);
				State = 36;
				ws();
				State = 37;
				selector();
				}
				}
				State = 43;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleSelectorSequenceContext[] simpleSelectorSequence() {
			return GetRuleContexts<SimpleSelectorSequenceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleSelectorSequenceContext simpleSelectorSequence(int i) {
			return GetRuleContext<SimpleSelectorSequenceContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WsContext[] ws() {
			return GetRuleContexts<WsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WsContext ws(int i) {
			return GetRuleContext<WsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CombinatorContext[] combinator() {
			return GetRuleContexts<CombinatorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CombinatorContext combinator(int i) {
			return GetRuleContext<CombinatorContext>(i);
		}
		public SelectorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selector; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXCSSParserVisitor<TResult> typedVisitor = visitor as IXCSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelector(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectorContext selector() {
		SelectorContext _localctx = new SelectorContext(Context, State);
		EnterRule(_localctx, 2, RULE_selector);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 44;
			simpleSelectorSequence();
			State = 45;
			ws();
			State = 52;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Space) | (1L << Plus) | (1L << Greater) | (1L << Tilde))) != 0)) {
				{
				{
				State = 46;
				combinator();
				State = 47;
				simpleSelectorSequence();
				State = 48;
				ws();
				}
				}
				State = 54;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CombinatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus() { return GetToken(XCSSParser.Plus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WsContext ws() {
			return GetRuleContext<WsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Greater() { return GetToken(XCSSParser.Greater, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Tilde() { return GetToken(XCSSParser.Tilde, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Space() { return GetToken(XCSSParser.Space, 0); }
		public CombinatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_combinator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXCSSParserVisitor<TResult> typedVisitor = visitor as IXCSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCombinator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CombinatorContext combinator() {
		CombinatorContext _localctx = new CombinatorContext(Context, State);
		EnterRule(_localctx, 4, RULE_combinator);
		try {
			State = 63;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Plus:
				EnterOuterAlt(_localctx, 1);
				{
				State = 55;
				Match(Plus);
				State = 56;
				ws();
				}
				break;
			case Greater:
				EnterOuterAlt(_localctx, 2);
				{
				State = 57;
				Match(Greater);
				State = 58;
				ws();
				}
				break;
			case Tilde:
				EnterOuterAlt(_localctx, 3);
				{
				State = 59;
				Match(Tilde);
				State = 60;
				ws();
				}
				break;
			case Space:
				EnterOuterAlt(_localctx, 4);
				{
				State = 61;
				Match(Space);
				State = 62;
				ws();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleSelectorSequenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeSelectorContext typeSelector() {
			return GetRuleContext<TypeSelectorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UniversalContext universal() {
			return GetRuleContext<UniversalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Hash() { return GetTokens(XCSSParser.Hash); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Hash(int i) {
			return GetToken(XCSSParser.Hash, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassNameContext[] className() {
			return GetRuleContexts<ClassNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassNameContext className(int i) {
			return GetRuleContext<ClassNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttribContext[] attrib() {
			return GetRuleContexts<AttribContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttribContext attrib(int i) {
			return GetRuleContext<AttribContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PseudoContext[] pseudo() {
			return GetRuleContexts<PseudoContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PseudoContext pseudo(int i) {
			return GetRuleContext<PseudoContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NegationContext[] negation() {
			return GetRuleContexts<NegationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NegationContext negation(int i) {
			return GetRuleContext<NegationContext>(i);
		}
		public SimpleSelectorSequenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleSelectorSequence; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXCSSParserVisitor<TResult> typedVisitor = visitor as IXCSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleSelectorSequence(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleSelectorSequenceContext simpleSelectorSequence() {
		SimpleSelectorSequenceContext _localctx = new SimpleSelectorSequenceContext(Context, State);
		EnterRule(_localctx, 6, RULE_simpleSelectorSequence);
		int _la;
		try {
			State = 88;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Multiply:
			case Pipe:
			case MediaOnly:
			case Not:
			case And:
			case Or:
			case From:
			case To:
			case Ident:
				EnterOuterAlt(_localctx, 1);
				{
				State = 67;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
				case 1:
					{
					State = 65;
					typeSelector();
					}
					break;
				case 2:
					{
					State = 66;
					universal();
					}
					break;
				}
				State = 76;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OpenBracket) | (1L << Colon) | (1L << Dot) | (1L << Hash) | (1L << PseudoNot))) != 0)) {
					{
					State = 74;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case Hash:
						{
						State = 69;
						Match(Hash);
						}
						break;
					case Dot:
						{
						State = 70;
						className();
						}
						break;
					case OpenBracket:
						{
						State = 71;
						attrib();
						}
						break;
					case Colon:
						{
						State = 72;
						pseudo();
						}
						break;
					case PseudoNot:
						{
						State = 73;
						negation();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					State = 78;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case OpenBracket:
			case Colon:
			case Dot:
			case Hash:
			case PseudoNot:
				EnterOuterAlt(_localctx, 2);
				{
				State = 84;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					State = 84;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case Hash:
						{
						State = 79;
						Match(Hash);
						}
						break;
					case Dot:
						{
						State = 80;
						className();
						}
						break;
					case OpenBracket:
						{
						State = 81;
						attrib();
						}
						break;
					case Colon:
						{
						State = 82;
						pseudo();
						}
						break;
					case PseudoNot:
						{
						State = 83;
						negation();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					State = 86;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OpenBracket) | (1L << Colon) | (1L << Dot) | (1L << Hash) | (1L << PseudoNot))) != 0) );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeSelectorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ElementNameContext elementName() {
			return GetRuleContext<ElementNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeNamespacePrefixContext typeNamespacePrefix() {
			return GetRuleContext<TypeNamespacePrefixContext>(0);
		}
		public TypeSelectorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeSelector; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXCSSParserVisitor<TResult> typedVisitor = visitor as IXCSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeSelector(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeSelectorContext typeSelector() {
		TypeSelectorContext _localctx = new TypeSelectorContext(Context, State);
		EnterRule(_localctx, 8, RULE_typeSelector);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 91;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				{
				State = 90;
				typeNamespacePrefix();
				}
				break;
			}
			State = 93;
			elementName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeNamespacePrefixContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Pipe() { return GetToken(XCSSParser.Pipe, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Multiply() { return GetToken(XCSSParser.Multiply, 0); }
		public TypeNamespacePrefixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeNamespacePrefix; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXCSSParserVisitor<TResult> typedVisitor = visitor as IXCSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeNamespacePrefix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeNamespacePrefixContext typeNamespacePrefix() {
		TypeNamespacePrefixContext _localctx = new TypeNamespacePrefixContext(Context, State);
		EnterRule(_localctx, 10, RULE_typeNamespacePrefix);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 97;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MediaOnly:
			case Not:
			case And:
			case Or:
			case From:
			case To:
			case Ident:
				{
				State = 95;
				ident();
				}
				break;
			case Multiply:
				{
				State = 96;
				Match(Multiply);
				}
				break;
			case Pipe:
				break;
			default:
				break;
			}
			State = 99;
			Match(Pipe);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		public ElementNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXCSSParserVisitor<TResult> typedVisitor = visitor as IXCSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElementName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementNameContext elementName() {
		ElementNameContext _localctx = new ElementNameContext(Context, State);
		EnterRule(_localctx, 12, RULE_elementName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 101;
			ident();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UniversalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Multiply() { return GetToken(XCSSParser.Multiply, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeNamespacePrefixContext typeNamespacePrefix() {
			return GetRuleContext<TypeNamespacePrefixContext>(0);
		}
		public UniversalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_universal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXCSSParserVisitor<TResult> typedVisitor = visitor as IXCSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUniversal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UniversalContext universal() {
		UniversalContext _localctx = new UniversalContext(Context, State);
		EnterRule(_localctx, 14, RULE_universal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 104;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				{
				State = 103;
				typeNamespacePrefix();
				}
				break;
			}
			State = 106;
			Match(Multiply);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot() { return GetToken(XCSSParser.Dot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		public ClassNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_className; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXCSSParserVisitor<TResult> typedVisitor = visitor as IXCSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassNameContext className() {
		ClassNameContext _localctx = new ClassNameContext(Context, State);
		EnterRule(_localctx, 16, RULE_className);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 108;
			Match(Dot);
			State = 109;
			ident();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttribContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBracket() { return GetToken(XCSSParser.OpenBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WsContext[] ws() {
			return GetRuleContexts<WsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WsContext ws(int i) {
			return GetRuleContext<WsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext[] ident() {
			return GetRuleContexts<IdentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident(int i) {
			return GetRuleContext<IdentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBracket() { return GetToken(XCSSParser.CloseBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeNamespacePrefixContext typeNamespacePrefix() {
			return GetRuleContext<TypeNamespacePrefixContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PrefixMatch() { return GetToken(XCSSParser.PrefixMatch, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SuffixMatch() { return GetToken(XCSSParser.SuffixMatch, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SubstringMatch() { return GetToken(XCSSParser.SubstringMatch, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equal() { return GetToken(XCSSParser.Equal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Includes() { return GetToken(XCSSParser.Includes, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DashMatch() { return GetToken(XCSSParser.DashMatch, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String_() { return GetToken(XCSSParser.String_, 0); }
		public AttribContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attrib; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXCSSParserVisitor<TResult> typedVisitor = visitor as IXCSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttrib(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttribContext attrib() {
		AttribContext _localctx = new AttribContext(Context, State);
		EnterRule(_localctx, 18, RULE_attrib);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 111;
			Match(OpenBracket);
			State = 112;
			ws();
			State = 114;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				{
				State = 113;
				typeNamespacePrefix();
				}
				break;
			}
			State = 116;
			ident();
			State = 117;
			ws();
			State = 126;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Equal) | (1L << Includes) | (1L << DashMatch) | (1L << PrefixMatch) | (1L << SuffixMatch) | (1L << SubstringMatch))) != 0)) {
				{
				State = 118;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Equal) | (1L << Includes) | (1L << DashMatch) | (1L << PrefixMatch) | (1L << SuffixMatch) | (1L << SubstringMatch))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 119;
				ws();
				State = 122;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case MediaOnly:
				case Not:
				case And:
				case Or:
				case From:
				case To:
				case Ident:
					{
					State = 120;
					ident();
					}
					break;
				case String_:
					{
					State = 121;
					Match(String_);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 124;
				ws();
				}
			}

			State = 128;
			Match(CloseBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PseudoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Colon() { return GetTokens(XCSSParser.Colon); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon(int i) {
			return GetToken(XCSSParser.Colon, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionalPseudoContext functionalPseudo() {
			return GetRuleContext<FunctionalPseudoContext>(0);
		}
		public PseudoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pseudo; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXCSSParserVisitor<TResult> typedVisitor = visitor as IXCSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPseudo(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PseudoContext pseudo() {
		PseudoContext _localctx = new PseudoContext(Context, State);
		EnterRule(_localctx, 20, RULE_pseudo);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 130;
			Match(Colon);
			State = 132;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Colon) {
				{
				State = 131;
				Match(Colon);
				}
			}

			State = 136;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MediaOnly:
			case Not:
			case And:
			case Or:
			case From:
			case To:
			case Ident:
				{
				State = 134;
				ident();
				}
				break;
			case Function_:
				{
				State = 135;
				functionalPseudo();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionalPseudoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Function_() { return GetToken(XCSSParser.Function_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WsContext ws() {
			return GetRuleContext<WsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(XCSSParser.CloseParen, 0); }
		public FunctionalPseudoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionalPseudo; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXCSSParserVisitor<TResult> typedVisitor = visitor as IXCSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionalPseudo(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionalPseudoContext functionalPseudo() {
		FunctionalPseudoContext _localctx = new FunctionalPseudoContext(Context, State);
		EnterRule(_localctx, 22, RULE_functionalPseudo);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 138;
			Match(Function_);
			State = 139;
			ws();
			State = 140;
			expression();
			State = 141;
			Match(CloseParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public WsContext[] ws() {
			return GetRuleContexts<WsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WsContext ws(int i) {
			return GetRuleContext<WsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Plus() { return GetTokens(XCSSParser.Plus); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus(int i) {
			return GetToken(XCSSParser.Plus, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Minus() { return GetTokens(XCSSParser.Minus); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus(int i) {
			return GetToken(XCSSParser.Minus, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Dimension() { return GetTokens(XCSSParser.Dimension); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dimension(int i) {
			return GetToken(XCSSParser.Dimension, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] UnknownDimension() { return GetTokens(XCSSParser.UnknownDimension); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UnknownDimension(int i) {
			return GetToken(XCSSParser.UnknownDimension, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Number() { return GetTokens(XCSSParser.Number); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Number(int i) {
			return GetToken(XCSSParser.Number, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] String_() { return GetTokens(XCSSParser.String_); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String_(int i) {
			return GetToken(XCSSParser.String_, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext[] ident() {
			return GetRuleContexts<IdentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident(int i) {
			return GetRuleContext<IdentContext>(i);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXCSSParserVisitor<TResult> typedVisitor = visitor as IXCSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 24, RULE_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 153;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 150;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Plus:
					{
					State = 143;
					Match(Plus);
					}
					break;
				case Minus:
					{
					State = 144;
					Match(Minus);
					}
					break;
				case Dimension:
					{
					State = 145;
					Match(Dimension);
					}
					break;
				case UnknownDimension:
					{
					State = 146;
					Match(UnknownDimension);
					}
					break;
				case Number:
					{
					State = 147;
					Match(Number);
					}
					break;
				case String_:
					{
					State = 148;
					Match(String_);
					}
					break;
				case MediaOnly:
				case Not:
				case And:
				case Or:
				case From:
				case To:
				case Ident:
					{
					State = 149;
					ident();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 152;
				ws();
				}
				}
				State = 155;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MediaOnly) | (1L << Not) | (1L << And) | (1L << Dimension) | (1L << UnknownDimension) | (1L << Plus) | (1L << Minus) | (1L << Number) | (1L << String_) | (1L << Or) | (1L << From) | (1L << To) | (1L << Ident))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NegationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PseudoNot() { return GetToken(XCSSParser.PseudoNot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WsContext[] ws() {
			return GetRuleContexts<WsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WsContext ws(int i) {
			return GetRuleContext<WsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NegationArgContext negationArg() {
			return GetRuleContext<NegationArgContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(XCSSParser.CloseParen, 0); }
		public NegationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_negation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXCSSParserVisitor<TResult> typedVisitor = visitor as IXCSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNegation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NegationContext negation() {
		NegationContext _localctx = new NegationContext(Context, State);
		EnterRule(_localctx, 26, RULE_negation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 157;
			Match(PseudoNot);
			State = 158;
			ws();
			State = 159;
			negationArg();
			State = 160;
			ws();
			State = 161;
			Match(CloseParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NegationArgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeSelectorContext typeSelector() {
			return GetRuleContext<TypeSelectorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UniversalContext universal() {
			return GetRuleContext<UniversalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Hash() { return GetToken(XCSSParser.Hash, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassNameContext className() {
			return GetRuleContext<ClassNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttribContext attrib() {
			return GetRuleContext<AttribContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PseudoContext pseudo() {
			return GetRuleContext<PseudoContext>(0);
		}
		public NegationArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_negationArg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXCSSParserVisitor<TResult> typedVisitor = visitor as IXCSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNegationArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NegationArgContext negationArg() {
		NegationArgContext _localctx = new NegationArgContext(Context, State);
		EnterRule(_localctx, 28, RULE_negationArg);
		try {
			State = 169;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 163;
				typeSelector();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 164;
				universal();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 165;
				Match(Hash);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 166;
				className();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 167;
				attrib();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 168;
				pseudo();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ident() { return GetToken(XCSSParser.Ident, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MediaOnly() { return GetToken(XCSSParser.MediaOnly, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Not() { return GetToken(XCSSParser.Not, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode And() { return GetToken(XCSSParser.And, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Or() { return GetToken(XCSSParser.Or, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode From() { return GetToken(XCSSParser.From, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode To() { return GetToken(XCSSParser.To, 0); }
		public IdentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ident; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXCSSParserVisitor<TResult> typedVisitor = visitor as IXCSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentContext ident() {
		IdentContext _localctx = new IdentContext(Context, State);
		EnterRule(_localctx, 30, RULE_ident);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 171;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MediaOnly) | (1L << Not) | (1L << And) | (1L << Or) | (1L << From) | (1L << To) | (1L << Ident))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comment() { return GetTokens(XCSSParser.Comment); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comment(int i) {
			return GetToken(XCSSParser.Comment, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Space() { return GetTokens(XCSSParser.Space); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Space(int i) {
			return GetToken(XCSSParser.Space, i);
		}
		public WsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ws; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXCSSParserVisitor<TResult> typedVisitor = visitor as IXCSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WsContext ws() {
		WsContext _localctx = new WsContext(Context, State);
		EnterRule(_localctx, 32, RULE_ws);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 176;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 173;
					_la = TokenStream.LA(1);
					if ( !(_la==Comment || _la==Space) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					} 
				}
				State = 178;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x42', '\xB6', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\a', '\x2', '*', '\n', 
		'\x2', '\f', '\x2', '\xE', '\x2', '-', '\v', '\x2', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\a', '\x3', 
		'\x35', '\n', '\x3', '\f', '\x3', '\xE', '\x3', '\x38', '\v', '\x3', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', '\x42', '\n', '\x4', 
		'\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '\x46', '\n', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\a', '\x5', 
		'M', '\n', '\x5', '\f', '\x5', '\xE', '\x5', 'P', '\v', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x6', 
		'\x5', 'W', '\n', '\x5', '\r', '\x5', '\xE', '\x5', 'X', '\x5', '\x5', 
		'[', '\n', '\x5', '\x3', '\x6', '\x5', '\x6', '^', '\n', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\x64', '\n', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\t', 
		'\x5', '\t', 'k', '\n', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x5', '\v', 
		'u', '\n', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x5', '\v', '}', '\n', '\v', '\x3', '\v', '\x3', '\v', 
		'\x5', '\v', '\x81', '\n', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\f', 
		'\x3', '\f', '\x5', '\f', '\x87', '\n', '\f', '\x3', '\f', '\x3', '\f', 
		'\x5', '\f', '\x8B', '\n', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', '\x99', 
		'\n', '\xE', '\x3', '\xE', '\x6', '\xE', '\x9C', '\n', '\xE', '\r', '\xE', 
		'\xE', '\xE', '\x9D', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', '\xAC', 
		'\n', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x12', '\a', '\x12', 
		'\xB1', '\n', '\x12', '\f', '\x12', '\xE', '\x12', '\xB4', '\v', '\x12', 
		'\x3', '\x12', '\x2', '\x2', '\x13', '\x2', '\x4', '\x6', '\b', '\n', 
		'\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', 
		' ', '\"', '\x2', '\x5', '\x5', '\x2', '\n', '\n', '\x16', '\x17', '/', 
		'\x31', '\x6', '\x2', '\"', '$', '\x34', '\x34', '\x36', '\x37', '@', 
		'@', '\x4', '\x2', '\x11', '\x11', '\x13', '\x13', '\x2', '\xCB', '\x2', 
		'$', '\x3', '\x2', '\x2', '\x2', '\x4', '.', '\x3', '\x2', '\x2', '\x2', 
		'\x6', '\x41', '\x3', '\x2', '\x2', '\x2', '\b', 'Z', '\x3', '\x2', '\x2', 
		'\x2', '\n', ']', '\x3', '\x2', '\x2', '\x2', '\f', '\x63', '\x3', '\x2', 
		'\x2', '\x2', '\xE', 'g', '\x3', '\x2', '\x2', '\x2', '\x10', 'j', '\x3', 
		'\x2', '\x2', '\x2', '\x12', 'n', '\x3', '\x2', '\x2', '\x2', '\x14', 
		'q', '\x3', '\x2', '\x2', '\x2', '\x16', '\x84', '\x3', '\x2', '\x2', 
		'\x2', '\x18', '\x8C', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x9B', '\x3', 
		'\x2', '\x2', '\x2', '\x1C', '\x9F', '\x3', '\x2', '\x2', '\x2', '\x1E', 
		'\xAB', '\x3', '\x2', '\x2', '\x2', ' ', '\xAD', '\x3', '\x2', '\x2', 
		'\x2', '\"', '\xB2', '\x3', '\x2', '\x2', '\x2', '$', '+', '\x5', '\x4', 
		'\x3', '\x2', '%', '&', '\a', '*', '\x2', '\x2', '&', '\'', '\x5', '\"', 
		'\x12', '\x2', '\'', '(', '\x5', '\x4', '\x3', '\x2', '(', '*', '\x3', 
		'\x2', '\x2', '\x2', ')', '%', '\x3', '\x2', '\x2', '\x2', '*', '-', '\x3', 
		'\x2', '\x2', '\x2', '+', ')', '\x3', '\x2', '\x2', '\x2', '+', ',', '\x3', 
		'\x2', '\x2', '\x2', ',', '\x3', '\x3', '\x2', '\x2', '\x2', '-', '+', 
		'\x3', '\x2', '\x2', '\x2', '.', '/', '\x5', '\b', '\x5', '\x2', '/', 
		'\x36', '\x5', '\"', '\x12', '\x2', '\x30', '\x31', '\x5', '\x6', '\x4', 
		'\x2', '\x31', '\x32', '\x5', '\b', '\x5', '\x2', '\x32', '\x33', '\x5', 
		'\"', '\x12', '\x2', '\x33', '\x35', '\x3', '\x2', '\x2', '\x2', '\x34', 
		'\x30', '\x3', '\x2', '\x2', '\x2', '\x35', '\x38', '\x3', '\x2', '\x2', 
		'\x2', '\x36', '\x34', '\x3', '\x2', '\x2', '\x2', '\x36', '\x37', '\x3', 
		'\x2', '\x2', '\x2', '\x37', '\x5', '\x3', '\x2', '\x2', '\x2', '\x38', 
		'\x36', '\x3', '\x2', '\x2', '\x2', '\x39', ':', '\a', '\'', '\x2', '\x2', 
		':', '\x42', '\x5', '\"', '\x12', '\x2', ';', '<', '\a', ')', '\x2', '\x2', 
		'<', '\x42', '\x5', '\"', '\x12', '\x2', '=', '>', '\a', '+', '\x2', '\x2', 
		'>', '\x42', '\x5', '\"', '\x12', '\x2', '?', '@', '\a', '\x13', '\x2', 
		'\x2', '@', '\x42', '\x5', '\"', '\x12', '\x2', '\x41', '\x39', '\x3', 
		'\x2', '\x2', '\x2', '\x41', ';', '\x3', '\x2', '\x2', '\x2', '\x41', 
		'=', '\x3', '\x2', '\x2', '\x2', '\x41', '?', '\x3', '\x2', '\x2', '\x2', 
		'\x42', '\a', '\x3', '\x2', '\x2', '\x2', '\x43', '\x46', '\x5', '\n', 
		'\x6', '\x2', '\x44', '\x46', '\x5', '\x10', '\t', '\x2', '\x45', '\x43', 
		'\x3', '\x2', '\x2', '\x2', '\x45', '\x44', '\x3', '\x2', '\x2', '\x2', 
		'\x46', 'N', '\x3', '\x2', '\x2', '\x2', 'G', 'M', '\a', '\x18', '\x2', 
		'\x2', 'H', 'M', '\x5', '\x12', '\n', '\x2', 'I', 'M', '\x5', '\x14', 
		'\v', '\x2', 'J', 'M', '\x5', '\x16', '\f', '\x2', 'K', 'M', '\x5', '\x1C', 
		'\xF', '\x2', 'L', 'G', '\x3', '\x2', '\x2', '\x2', 'L', 'H', '\x3', '\x2', 
		'\x2', '\x2', 'L', 'I', '\x3', '\x2', '\x2', '\x2', 'L', 'J', '\x3', '\x2', 
		'\x2', '\x2', 'L', 'K', '\x3', '\x2', '\x2', '\x2', 'M', 'P', '\x3', '\x2', 
		'\x2', '\x2', 'N', 'L', '\x3', '\x2', '\x2', '\x2', 'N', 'O', '\x3', '\x2', 
		'\x2', '\x2', 'O', '[', '\x3', '\x2', '\x2', '\x2', 'P', 'N', '\x3', '\x2', 
		'\x2', '\x2', 'Q', 'W', '\a', '\x18', '\x2', '\x2', 'R', 'W', '\x5', '\x12', 
		'\n', '\x2', 'S', 'W', '\x5', '\x14', '\v', '\x2', 'T', 'W', '\x5', '\x16', 
		'\f', '\x2', 'U', 'W', '\x5', '\x1C', '\xF', '\x2', 'V', 'Q', '\x3', '\x2', 
		'\x2', '\x2', 'V', 'R', '\x3', '\x2', '\x2', '\x2', 'V', 'S', '\x3', '\x2', 
		'\x2', '\x2', 'V', 'T', '\x3', '\x2', '\x2', '\x2', 'V', 'U', '\x3', '\x2', 
		'\x2', '\x2', 'W', 'X', '\x3', '\x2', '\x2', '\x2', 'X', 'V', '\x3', '\x2', 
		'\x2', '\x2', 'X', 'Y', '\x3', '\x2', '\x2', '\x2', 'Y', '[', '\x3', '\x2', 
		'\x2', '\x2', 'Z', '\x45', '\x3', '\x2', '\x2', '\x2', 'Z', 'V', '\x3', 
		'\x2', '\x2', '\x2', '[', '\t', '\x3', '\x2', '\x2', '\x2', '\\', '^', 
		'\x5', '\f', '\a', '\x2', ']', '\\', '\x3', '\x2', '\x2', '\x2', ']', 
		'^', '\x3', '\x2', '\x2', '\x2', '^', '_', '\x3', '\x2', '\x2', '\x2', 
		'_', '`', '\x5', '\xE', '\b', '\x2', '`', '\v', '\x3', '\x2', '\x2', '\x2', 
		'\x61', '\x64', '\x5', ' ', '\x11', '\x2', '\x62', '\x64', '\a', '\r', 
		'\x2', '\x2', '\x63', '\x61', '\x3', '\x2', '\x2', '\x2', '\x63', '\x62', 
		'\x3', '\x2', '\x2', '\x2', '\x63', '\x64', '\x3', '\x2', '\x2', '\x2', 
		'\x64', '\x65', '\x3', '\x2', '\x2', '\x2', '\x65', '\x66', '\a', '\xF', 
		'\x2', '\x2', '\x66', '\r', '\x3', '\x2', '\x2', '\x2', 'g', 'h', '\x5', 
		' ', '\x11', '\x2', 'h', '\xF', '\x3', '\x2', '\x2', '\x2', 'i', 'k', 
		'\x5', '\f', '\a', '\x2', 'j', 'i', '\x3', '\x2', '\x2', '\x2', 'j', 'k', 
		'\x3', '\x2', '\x2', '\x2', 'k', 'l', '\x3', '\x2', '\x2', '\x2', 'l', 
		'm', '\a', '\r', '\x2', '\x2', 'm', '\x11', '\x3', '\x2', '\x2', '\x2', 
		'n', 'o', '\a', '\f', '\x2', '\x2', 'o', 'p', '\x5', ' ', '\x11', '\x2', 
		'p', '\x13', '\x3', '\x2', '\x2', '\x2', 'q', 'r', '\a', '\x3', '\x2', 
		'\x2', 'r', 't', '\x5', '\"', '\x12', '\x2', 's', 'u', '\x5', '\f', '\a', 
		'\x2', 't', 's', '\x3', '\x2', '\x2', '\x2', 't', 'u', '\x3', '\x2', '\x2', 
		'\x2', 'u', 'v', '\x3', '\x2', '\x2', '\x2', 'v', 'w', '\x5', ' ', '\x11', 
		'\x2', 'w', '\x80', '\x5', '\"', '\x12', '\x2', 'x', 'y', '\t', '\x2', 
		'\x2', '\x2', 'y', '|', '\x5', '\"', '\x12', '\x2', 'z', '}', '\x5', ' ', 
		'\x11', '\x2', '{', '}', '\a', '.', '\x2', '\x2', '|', 'z', '\x3', '\x2', 
		'\x2', '\x2', '|', '{', '\x3', '\x2', '\x2', '\x2', '}', '~', '\x3', '\x2', 
		'\x2', '\x2', '~', '\x7F', '\x5', '\"', '\x12', '\x2', '\x7F', '\x81', 
		'\x3', '\x2', '\x2', '\x2', '\x80', 'x', '\x3', '\x2', '\x2', '\x2', '\x80', 
		'\x81', '\x3', '\x2', '\x2', '\x2', '\x81', '\x82', '\x3', '\x2', '\x2', 
		'\x2', '\x82', '\x83', '\a', '\x4', '\x2', '\x2', '\x83', '\x15', '\x3', 
		'\x2', '\x2', '\x2', '\x84', '\x86', '\a', '\v', '\x2', '\x2', '\x85', 
		'\x87', '\a', '\v', '\x2', '\x2', '\x86', '\x85', '\x3', '\x2', '\x2', 
		'\x2', '\x86', '\x87', '\x3', '\x2', '\x2', '\x2', '\x87', '\x8A', '\x3', 
		'\x2', '\x2', '\x2', '\x88', '\x8B', '\x5', ' ', '\x11', '\x2', '\x89', 
		'\x8B', '\x5', '\x18', '\r', '\x2', '\x8A', '\x88', '\x3', '\x2', '\x2', 
		'\x2', '\x8A', '\x89', '\x3', '\x2', '\x2', '\x2', '\x8B', '\x17', '\x3', 
		'\x2', '\x2', '\x2', '\x8C', '\x8D', '\a', '\x41', '\x2', '\x2', '\x8D', 
		'\x8E', '\x5', '\"', '\x12', '\x2', '\x8E', '\x8F', '\x5', '\x1A', '\xE', 
		'\x2', '\x8F', '\x90', '\a', '\x6', '\x2', '\x2', '\x90', '\x19', '\x3', 
		'\x2', '\x2', '\x2', '\x91', '\x99', '\a', '\'', '\x2', '\x2', '\x92', 
		'\x99', '\a', '(', '\x2', '\x2', '\x93', '\x99', '\a', '%', '\x2', '\x2', 
		'\x94', '\x99', '\a', '&', '\x2', '\x2', '\x95', '\x99', '\a', '-', '\x2', 
		'\x2', '\x96', '\x99', '\a', '.', '\x2', '\x2', '\x97', '\x99', '\x5', 
		' ', '\x11', '\x2', '\x98', '\x91', '\x3', '\x2', '\x2', '\x2', '\x98', 
		'\x92', '\x3', '\x2', '\x2', '\x2', '\x98', '\x93', '\x3', '\x2', '\x2', 
		'\x2', '\x98', '\x94', '\x3', '\x2', '\x2', '\x2', '\x98', '\x95', '\x3', 
		'\x2', '\x2', '\x2', '\x98', '\x96', '\x3', '\x2', '\x2', '\x2', '\x98', 
		'\x97', '\x3', '\x2', '\x2', '\x2', '\x99', '\x9A', '\x3', '\x2', '\x2', 
		'\x2', '\x9A', '\x9C', '\x5', '\"', '\x12', '\x2', '\x9B', '\x98', '\x3', 
		'\x2', '\x2', '\x2', '\x9C', '\x9D', '\x3', '\x2', '\x2', '\x2', '\x9D', 
		'\x9B', '\x3', '\x2', '\x2', '\x2', '\x9D', '\x9E', '\x3', '\x2', '\x2', 
		'\x2', '\x9E', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x9F', '\xA0', '\a', 
		',', '\x2', '\x2', '\xA0', '\xA1', '\x5', '\"', '\x12', '\x2', '\xA1', 
		'\xA2', '\x5', '\x1E', '\x10', '\x2', '\xA2', '\xA3', '\x5', '\"', '\x12', 
		'\x2', '\xA3', '\xA4', '\a', '\x6', '\x2', '\x2', '\xA4', '\x1D', '\x3', 
		'\x2', '\x2', '\x2', '\xA5', '\xAC', '\x5', '\n', '\x6', '\x2', '\xA6', 
		'\xAC', '\x5', '\x10', '\t', '\x2', '\xA7', '\xAC', '\a', '\x18', '\x2', 
		'\x2', '\xA8', '\xAC', '\x5', '\x12', '\n', '\x2', '\xA9', '\xAC', '\x5', 
		'\x14', '\v', '\x2', '\xAA', '\xAC', '\x5', '\x16', '\f', '\x2', '\xAB', 
		'\xA5', '\x3', '\x2', '\x2', '\x2', '\xAB', '\xA6', '\x3', '\x2', '\x2', 
		'\x2', '\xAB', '\xA7', '\x3', '\x2', '\x2', '\x2', '\xAB', '\xA8', '\x3', 
		'\x2', '\x2', '\x2', '\xAB', '\xA9', '\x3', '\x2', '\x2', '\x2', '\xAB', 
		'\xAA', '\x3', '\x2', '\x2', '\x2', '\xAC', '\x1F', '\x3', '\x2', '\x2', 
		'\x2', '\xAD', '\xAE', '\t', '\x3', '\x2', '\x2', '\xAE', '!', '\x3', 
		'\x2', '\x2', '\x2', '\xAF', '\xB1', '\t', '\x4', '\x2', '\x2', '\xB0', 
		'\xAF', '\x3', '\x2', '\x2', '\x2', '\xB1', '\xB4', '\x3', '\x2', '\x2', 
		'\x2', '\xB2', '\xB0', '\x3', '\x2', '\x2', '\x2', '\xB2', '\xB3', '\x3', 
		'\x2', '\x2', '\x2', '\xB3', '#', '\x3', '\x2', '\x2', '\x2', '\xB4', 
		'\xB2', '\x3', '\x2', '\x2', '\x2', '\x17', '+', '\x36', '\x41', '\x45', 
		'L', 'N', 'V', 'X', 'Z', ']', '\x63', 'j', 't', '|', '\x80', '\x86', '\x8A', 
		'\x98', '\x9D', '\xAB', '\xB2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
