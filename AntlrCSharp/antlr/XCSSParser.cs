//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\dev\xcss-parser-csharp\AntlrCSharp\antlr\XCSSParser.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class XCSSParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		OpenBracket=1, CloseBracket=2, OpenParen=3, CloseParen=4, OpenBrace=5, 
		CloseBrace=6, SemiColon=7, Equal=8, Colon=9, Dot=10, Multiply=11, Divide=12, 
		Pipe=13, Underscore=14, Comment=15, Url=16, Space=17, Cdo=18, Cdc=19, 
		Includes=20, DashMatch=21, Hash=22, Import=23, Page=24, Media=25, Namespace=26, 
		Charset=27, Important=28, Percentage=29, Url_=30, UnicodeRange=31, MediaOnly=32, 
		Not=33, And=34, Dimension=35, UnknownDimension=36, Plus=37, Minus=38, 
		Greater=39, Comma=40, Tilde=41, PseudoNot=42, Number=43, String_=44, PrefixMatch=45, 
		SuffixMatch=46, SubstringMatch=47, FontFace=48, Supports=49, Or=50, Keyframes=51, 
		From=52, To=53, Calc=54, Viewport=55, CounterStyle=56, FontFeatureValues=57, 
		DxImageTransform=58, AtKeyword=59, Variable=60, Var=61, Ident=62, Function_=63, 
		UnexpectedCharacter=64;
	public const int
		RULE_parse = 0, RULE_selectorGroup = 1, RULE_selector = 2, RULE_combinator = 3, 
		RULE_simpleSelectorSequence = 4, RULE_typeSelector = 5, RULE_typeNamespacePrefix = 6, 
		RULE_elementName = 7, RULE_universal = 8, RULE_className = 9, RULE_attrib = 10, 
		RULE_pseudo = 11, RULE_functionalPseudo = 12, RULE_expression = 13, RULE_negation = 14, 
		RULE_negationArg = 15, RULE_ident = 16, RULE_ws = 17;
	public static readonly string[] ruleNames = {
		"parse", "selectorGroup", "selector", "combinator", "simpleSelectorSequence", 
		"typeSelector", "typeNamespacePrefix", "elementName", "universal", "className", 
		"attrib", "pseudo", "functionalPseudo", "expression", "negation", "negationArg", 
		"ident", "ws"
	};

	private static readonly string[] _LiteralNames = {
		null, "'['", "']'", "'('", "')'", "'{'", "'}'", "';'", "'='", "':'", "'.'", 
		"'*'", "'/'", "'|'", "'_'", null, null, null, "'<!--'", "'-->'", "'~='", 
		"'|='", null, null, null, null, null, "'@charset '", null, null, "'url('", 
		null, null, null, null, null, null, "'+'", "'-'", "'>'", "','", "'~'", 
		null, null, null, "'^='", "'$='", "'*='", null, null, null, null, null, 
		null, "'calc('", null, null, null, null, null, null, "'var('"
	};
	private static readonly string[] _SymbolicNames = {
		null, "OpenBracket", "CloseBracket", "OpenParen", "CloseParen", "OpenBrace", 
		"CloseBrace", "SemiColon", "Equal", "Colon", "Dot", "Multiply", "Divide", 
		"Pipe", "Underscore", "Comment", "Url", "Space", "Cdo", "Cdc", "Includes", 
		"DashMatch", "Hash", "Import", "Page", "Media", "Namespace", "Charset", 
		"Important", "Percentage", "Url_", "UnicodeRange", "MediaOnly", "Not", 
		"And", "Dimension", "UnknownDimension", "Plus", "Minus", "Greater", "Comma", 
		"Tilde", "PseudoNot", "Number", "String_", "PrefixMatch", "SuffixMatch", 
		"SubstringMatch", "FontFace", "Supports", "Or", "Keyframes", "From", "To", 
		"Calc", "Viewport", "CounterStyle", "FontFeatureValues", "DxImageTransform", 
		"AtKeyword", "Variable", "Var", "Ident", "Function_", "UnexpectedCharacter"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "XCSSParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static XCSSParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public XCSSParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public XCSSParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ParseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SelectorGroupContext selectorGroup() {
			return GetRuleContext<SelectorGroupContext>(0);
		}
		public ParseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parse; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IXCSSParserListener typedListener = listener as IXCSSParserListener;
			if (typedListener != null) typedListener.EnterParse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IXCSSParserListener typedListener = listener as IXCSSParserListener;
			if (typedListener != null) typedListener.ExitParse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXCSSParserVisitor<TResult> typedVisitor = visitor as IXCSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParseContext parse() {
		ParseContext _localctx = new ParseContext(Context, State);
		EnterRule(_localctx, 0, RULE_parse);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 36;
			selectorGroup();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectorGroupContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SelectorContext[] selector() {
			return GetRuleContexts<SelectorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectorContext selector(int i) {
			return GetRuleContext<SelectorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(XCSSParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(XCSSParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WsContext[] ws() {
			return GetRuleContexts<WsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WsContext ws(int i) {
			return GetRuleContext<WsContext>(i);
		}
		public SelectorGroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectorGroup; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IXCSSParserListener typedListener = listener as IXCSSParserListener;
			if (typedListener != null) typedListener.EnterSelectorGroup(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IXCSSParserListener typedListener = listener as IXCSSParserListener;
			if (typedListener != null) typedListener.ExitSelectorGroup(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXCSSParserVisitor<TResult> typedVisitor = visitor as IXCSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelectorGroup(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectorGroupContext selectorGroup() {
		SelectorGroupContext _localctx = new SelectorGroupContext(Context, State);
		EnterRule(_localctx, 2, RULE_selectorGroup);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 38;
			selector();
			State = 45;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 39;
				Match(Comma);
				State = 40;
				ws();
				State = 41;
				selector();
				}
				}
				State = 47;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleSelectorSequenceContext[] simpleSelectorSequence() {
			return GetRuleContexts<SimpleSelectorSequenceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleSelectorSequenceContext simpleSelectorSequence(int i) {
			return GetRuleContext<SimpleSelectorSequenceContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WsContext[] ws() {
			return GetRuleContexts<WsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WsContext ws(int i) {
			return GetRuleContext<WsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CombinatorContext[] combinator() {
			return GetRuleContexts<CombinatorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CombinatorContext combinator(int i) {
			return GetRuleContext<CombinatorContext>(i);
		}
		public SelectorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selector; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IXCSSParserListener typedListener = listener as IXCSSParserListener;
			if (typedListener != null) typedListener.EnterSelector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IXCSSParserListener typedListener = listener as IXCSSParserListener;
			if (typedListener != null) typedListener.ExitSelector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXCSSParserVisitor<TResult> typedVisitor = visitor as IXCSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelector(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectorContext selector() {
		SelectorContext _localctx = new SelectorContext(Context, State);
		EnterRule(_localctx, 4, RULE_selector);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 48;
			simpleSelectorSequence();
			State = 49;
			ws();
			State = 56;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Space) | (1L << Plus) | (1L << Greater) | (1L << Tilde))) != 0)) {
				{
				{
				State = 50;
				combinator();
				State = 51;
				simpleSelectorSequence();
				State = 52;
				ws();
				}
				}
				State = 58;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CombinatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus() { return GetToken(XCSSParser.Plus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WsContext ws() {
			return GetRuleContext<WsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Greater() { return GetToken(XCSSParser.Greater, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Tilde() { return GetToken(XCSSParser.Tilde, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Space() { return GetToken(XCSSParser.Space, 0); }
		public CombinatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_combinator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IXCSSParserListener typedListener = listener as IXCSSParserListener;
			if (typedListener != null) typedListener.EnterCombinator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IXCSSParserListener typedListener = listener as IXCSSParserListener;
			if (typedListener != null) typedListener.ExitCombinator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXCSSParserVisitor<TResult> typedVisitor = visitor as IXCSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCombinator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CombinatorContext combinator() {
		CombinatorContext _localctx = new CombinatorContext(Context, State);
		EnterRule(_localctx, 6, RULE_combinator);
		try {
			State = 67;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Plus:
				EnterOuterAlt(_localctx, 1);
				{
				State = 59;
				Match(Plus);
				State = 60;
				ws();
				}
				break;
			case Greater:
				EnterOuterAlt(_localctx, 2);
				{
				State = 61;
				Match(Greater);
				State = 62;
				ws();
				}
				break;
			case Tilde:
				EnterOuterAlt(_localctx, 3);
				{
				State = 63;
				Match(Tilde);
				State = 64;
				ws();
				}
				break;
			case Space:
				EnterOuterAlt(_localctx, 4);
				{
				State = 65;
				Match(Space);
				State = 66;
				ws();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleSelectorSequenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeSelectorContext typeSelector() {
			return GetRuleContext<TypeSelectorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UniversalContext universal() {
			return GetRuleContext<UniversalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Hash() { return GetTokens(XCSSParser.Hash); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Hash(int i) {
			return GetToken(XCSSParser.Hash, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassNameContext[] className() {
			return GetRuleContexts<ClassNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassNameContext className(int i) {
			return GetRuleContext<ClassNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttribContext[] attrib() {
			return GetRuleContexts<AttribContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttribContext attrib(int i) {
			return GetRuleContext<AttribContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PseudoContext[] pseudo() {
			return GetRuleContexts<PseudoContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PseudoContext pseudo(int i) {
			return GetRuleContext<PseudoContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NegationContext[] negation() {
			return GetRuleContexts<NegationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NegationContext negation(int i) {
			return GetRuleContext<NegationContext>(i);
		}
		public SimpleSelectorSequenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleSelectorSequence; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IXCSSParserListener typedListener = listener as IXCSSParserListener;
			if (typedListener != null) typedListener.EnterSimpleSelectorSequence(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IXCSSParserListener typedListener = listener as IXCSSParserListener;
			if (typedListener != null) typedListener.ExitSimpleSelectorSequence(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXCSSParserVisitor<TResult> typedVisitor = visitor as IXCSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleSelectorSequence(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleSelectorSequenceContext simpleSelectorSequence() {
		SimpleSelectorSequenceContext _localctx = new SimpleSelectorSequenceContext(Context, State);
		EnterRule(_localctx, 8, RULE_simpleSelectorSequence);
		int _la;
		try {
			State = 92;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Multiply:
			case Pipe:
			case MediaOnly:
			case Not:
			case And:
			case Or:
			case From:
			case To:
			case Ident:
				EnterOuterAlt(_localctx, 1);
				{
				State = 71;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
				case 1:
					{
					State = 69;
					typeSelector();
					}
					break;
				case 2:
					{
					State = 70;
					universal();
					}
					break;
				}
				State = 80;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OpenBracket) | (1L << Colon) | (1L << Dot) | (1L << Hash) | (1L << PseudoNot))) != 0)) {
					{
					State = 78;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case Hash:
						{
						State = 73;
						Match(Hash);
						}
						break;
					case Dot:
						{
						State = 74;
						className();
						}
						break;
					case OpenBracket:
						{
						State = 75;
						attrib();
						}
						break;
					case Colon:
						{
						State = 76;
						pseudo();
						}
						break;
					case PseudoNot:
						{
						State = 77;
						negation();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					State = 82;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case OpenBracket:
			case Colon:
			case Dot:
			case Hash:
			case PseudoNot:
				EnterOuterAlt(_localctx, 2);
				{
				State = 88;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					State = 88;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case Hash:
						{
						State = 83;
						Match(Hash);
						}
						break;
					case Dot:
						{
						State = 84;
						className();
						}
						break;
					case OpenBracket:
						{
						State = 85;
						attrib();
						}
						break;
					case Colon:
						{
						State = 86;
						pseudo();
						}
						break;
					case PseudoNot:
						{
						State = 87;
						negation();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					State = 90;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OpenBracket) | (1L << Colon) | (1L << Dot) | (1L << Hash) | (1L << PseudoNot))) != 0) );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeSelectorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ElementNameContext elementName() {
			return GetRuleContext<ElementNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeNamespacePrefixContext typeNamespacePrefix() {
			return GetRuleContext<TypeNamespacePrefixContext>(0);
		}
		public TypeSelectorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeSelector; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IXCSSParserListener typedListener = listener as IXCSSParserListener;
			if (typedListener != null) typedListener.EnterTypeSelector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IXCSSParserListener typedListener = listener as IXCSSParserListener;
			if (typedListener != null) typedListener.ExitTypeSelector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXCSSParserVisitor<TResult> typedVisitor = visitor as IXCSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeSelector(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeSelectorContext typeSelector() {
		TypeSelectorContext _localctx = new TypeSelectorContext(Context, State);
		EnterRule(_localctx, 10, RULE_typeSelector);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 95;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				{
				State = 94;
				typeNamespacePrefix();
				}
				break;
			}
			State = 97;
			elementName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeNamespacePrefixContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Pipe() { return GetToken(XCSSParser.Pipe, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Multiply() { return GetToken(XCSSParser.Multiply, 0); }
		public TypeNamespacePrefixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeNamespacePrefix; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IXCSSParserListener typedListener = listener as IXCSSParserListener;
			if (typedListener != null) typedListener.EnterTypeNamespacePrefix(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IXCSSParserListener typedListener = listener as IXCSSParserListener;
			if (typedListener != null) typedListener.ExitTypeNamespacePrefix(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXCSSParserVisitor<TResult> typedVisitor = visitor as IXCSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeNamespacePrefix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeNamespacePrefixContext typeNamespacePrefix() {
		TypeNamespacePrefixContext _localctx = new TypeNamespacePrefixContext(Context, State);
		EnterRule(_localctx, 12, RULE_typeNamespacePrefix);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 101;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MediaOnly:
			case Not:
			case And:
			case Or:
			case From:
			case To:
			case Ident:
				{
				State = 99;
				ident();
				}
				break;
			case Multiply:
				{
				State = 100;
				Match(Multiply);
				}
				break;
			case Pipe:
				break;
			default:
				break;
			}
			State = 103;
			Match(Pipe);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		public ElementNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IXCSSParserListener typedListener = listener as IXCSSParserListener;
			if (typedListener != null) typedListener.EnterElementName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IXCSSParserListener typedListener = listener as IXCSSParserListener;
			if (typedListener != null) typedListener.ExitElementName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXCSSParserVisitor<TResult> typedVisitor = visitor as IXCSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElementName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementNameContext elementName() {
		ElementNameContext _localctx = new ElementNameContext(Context, State);
		EnterRule(_localctx, 14, RULE_elementName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 105;
			ident();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UniversalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Multiply() { return GetToken(XCSSParser.Multiply, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeNamespacePrefixContext typeNamespacePrefix() {
			return GetRuleContext<TypeNamespacePrefixContext>(0);
		}
		public UniversalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_universal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IXCSSParserListener typedListener = listener as IXCSSParserListener;
			if (typedListener != null) typedListener.EnterUniversal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IXCSSParserListener typedListener = listener as IXCSSParserListener;
			if (typedListener != null) typedListener.ExitUniversal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXCSSParserVisitor<TResult> typedVisitor = visitor as IXCSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUniversal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UniversalContext universal() {
		UniversalContext _localctx = new UniversalContext(Context, State);
		EnterRule(_localctx, 16, RULE_universal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 108;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				{
				State = 107;
				typeNamespacePrefix();
				}
				break;
			}
			State = 110;
			Match(Multiply);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot() { return GetToken(XCSSParser.Dot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		public ClassNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_className; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IXCSSParserListener typedListener = listener as IXCSSParserListener;
			if (typedListener != null) typedListener.EnterClassName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IXCSSParserListener typedListener = listener as IXCSSParserListener;
			if (typedListener != null) typedListener.ExitClassName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXCSSParserVisitor<TResult> typedVisitor = visitor as IXCSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassNameContext className() {
		ClassNameContext _localctx = new ClassNameContext(Context, State);
		EnterRule(_localctx, 18, RULE_className);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 112;
			Match(Dot);
			State = 113;
			ident();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttribContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBracket() { return GetToken(XCSSParser.OpenBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WsContext[] ws() {
			return GetRuleContexts<WsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WsContext ws(int i) {
			return GetRuleContext<WsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext[] ident() {
			return GetRuleContexts<IdentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident(int i) {
			return GetRuleContext<IdentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBracket() { return GetToken(XCSSParser.CloseBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeNamespacePrefixContext typeNamespacePrefix() {
			return GetRuleContext<TypeNamespacePrefixContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PrefixMatch() { return GetToken(XCSSParser.PrefixMatch, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SuffixMatch() { return GetToken(XCSSParser.SuffixMatch, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SubstringMatch() { return GetToken(XCSSParser.SubstringMatch, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equal() { return GetToken(XCSSParser.Equal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Includes() { return GetToken(XCSSParser.Includes, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DashMatch() { return GetToken(XCSSParser.DashMatch, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String_() { return GetToken(XCSSParser.String_, 0); }
		public AttribContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attrib; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IXCSSParserListener typedListener = listener as IXCSSParserListener;
			if (typedListener != null) typedListener.EnterAttrib(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IXCSSParserListener typedListener = listener as IXCSSParserListener;
			if (typedListener != null) typedListener.ExitAttrib(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXCSSParserVisitor<TResult> typedVisitor = visitor as IXCSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttrib(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttribContext attrib() {
		AttribContext _localctx = new AttribContext(Context, State);
		EnterRule(_localctx, 20, RULE_attrib);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 115;
			Match(OpenBracket);
			State = 116;
			ws();
			State = 118;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				{
				State = 117;
				typeNamespacePrefix();
				}
				break;
			}
			State = 120;
			ident();
			State = 121;
			ws();
			State = 130;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Equal) | (1L << Includes) | (1L << DashMatch) | (1L << PrefixMatch) | (1L << SuffixMatch) | (1L << SubstringMatch))) != 0)) {
				{
				State = 122;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Equal) | (1L << Includes) | (1L << DashMatch) | (1L << PrefixMatch) | (1L << SuffixMatch) | (1L << SubstringMatch))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 123;
				ws();
				State = 126;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case MediaOnly:
				case Not:
				case And:
				case Or:
				case From:
				case To:
				case Ident:
					{
					State = 124;
					ident();
					}
					break;
				case String_:
					{
					State = 125;
					Match(String_);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 128;
				ws();
				}
			}

			State = 132;
			Match(CloseBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PseudoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Colon() { return GetTokens(XCSSParser.Colon); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon(int i) {
			return GetToken(XCSSParser.Colon, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionalPseudoContext functionalPseudo() {
			return GetRuleContext<FunctionalPseudoContext>(0);
		}
		public PseudoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pseudo; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IXCSSParserListener typedListener = listener as IXCSSParserListener;
			if (typedListener != null) typedListener.EnterPseudo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IXCSSParserListener typedListener = listener as IXCSSParserListener;
			if (typedListener != null) typedListener.ExitPseudo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXCSSParserVisitor<TResult> typedVisitor = visitor as IXCSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPseudo(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PseudoContext pseudo() {
		PseudoContext _localctx = new PseudoContext(Context, State);
		EnterRule(_localctx, 22, RULE_pseudo);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 134;
			Match(Colon);
			State = 136;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Colon) {
				{
				State = 135;
				Match(Colon);
				}
			}

			State = 140;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MediaOnly:
			case Not:
			case And:
			case Or:
			case From:
			case To:
			case Ident:
				{
				State = 138;
				ident();
				}
				break;
			case Function_:
				{
				State = 139;
				functionalPseudo();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionalPseudoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Function_() { return GetToken(XCSSParser.Function_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WsContext ws() {
			return GetRuleContext<WsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(XCSSParser.CloseParen, 0); }
		public FunctionalPseudoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionalPseudo; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IXCSSParserListener typedListener = listener as IXCSSParserListener;
			if (typedListener != null) typedListener.EnterFunctionalPseudo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IXCSSParserListener typedListener = listener as IXCSSParserListener;
			if (typedListener != null) typedListener.ExitFunctionalPseudo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXCSSParserVisitor<TResult> typedVisitor = visitor as IXCSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionalPseudo(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionalPseudoContext functionalPseudo() {
		FunctionalPseudoContext _localctx = new FunctionalPseudoContext(Context, State);
		EnterRule(_localctx, 24, RULE_functionalPseudo);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 142;
			Match(Function_);
			State = 143;
			ws();
			State = 144;
			expression();
			State = 145;
			Match(CloseParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public WsContext[] ws() {
			return GetRuleContexts<WsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WsContext ws(int i) {
			return GetRuleContext<WsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Plus() { return GetTokens(XCSSParser.Plus); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus(int i) {
			return GetToken(XCSSParser.Plus, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Minus() { return GetTokens(XCSSParser.Minus); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus(int i) {
			return GetToken(XCSSParser.Minus, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Dimension() { return GetTokens(XCSSParser.Dimension); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dimension(int i) {
			return GetToken(XCSSParser.Dimension, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] UnknownDimension() { return GetTokens(XCSSParser.UnknownDimension); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UnknownDimension(int i) {
			return GetToken(XCSSParser.UnknownDimension, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Number() { return GetTokens(XCSSParser.Number); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Number(int i) {
			return GetToken(XCSSParser.Number, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] String_() { return GetTokens(XCSSParser.String_); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String_(int i) {
			return GetToken(XCSSParser.String_, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext[] ident() {
			return GetRuleContexts<IdentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident(int i) {
			return GetRuleContext<IdentContext>(i);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IXCSSParserListener typedListener = listener as IXCSSParserListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IXCSSParserListener typedListener = listener as IXCSSParserListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXCSSParserVisitor<TResult> typedVisitor = visitor as IXCSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 26, RULE_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 157;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 154;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Plus:
					{
					State = 147;
					Match(Plus);
					}
					break;
				case Minus:
					{
					State = 148;
					Match(Minus);
					}
					break;
				case Dimension:
					{
					State = 149;
					Match(Dimension);
					}
					break;
				case UnknownDimension:
					{
					State = 150;
					Match(UnknownDimension);
					}
					break;
				case Number:
					{
					State = 151;
					Match(Number);
					}
					break;
				case String_:
					{
					State = 152;
					Match(String_);
					}
					break;
				case MediaOnly:
				case Not:
				case And:
				case Or:
				case From:
				case To:
				case Ident:
					{
					State = 153;
					ident();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 156;
				ws();
				}
				}
				State = 159;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MediaOnly) | (1L << Not) | (1L << And) | (1L << Dimension) | (1L << UnknownDimension) | (1L << Plus) | (1L << Minus) | (1L << Number) | (1L << String_) | (1L << Or) | (1L << From) | (1L << To) | (1L << Ident))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NegationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PseudoNot() { return GetToken(XCSSParser.PseudoNot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WsContext[] ws() {
			return GetRuleContexts<WsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WsContext ws(int i) {
			return GetRuleContext<WsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NegationArgContext negationArg() {
			return GetRuleContext<NegationArgContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(XCSSParser.CloseParen, 0); }
		public NegationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_negation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IXCSSParserListener typedListener = listener as IXCSSParserListener;
			if (typedListener != null) typedListener.EnterNegation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IXCSSParserListener typedListener = listener as IXCSSParserListener;
			if (typedListener != null) typedListener.ExitNegation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXCSSParserVisitor<TResult> typedVisitor = visitor as IXCSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNegation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NegationContext negation() {
		NegationContext _localctx = new NegationContext(Context, State);
		EnterRule(_localctx, 28, RULE_negation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 161;
			Match(PseudoNot);
			State = 162;
			ws();
			State = 163;
			negationArg();
			State = 164;
			ws();
			State = 165;
			Match(CloseParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NegationArgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeSelectorContext typeSelector() {
			return GetRuleContext<TypeSelectorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UniversalContext universal() {
			return GetRuleContext<UniversalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Hash() { return GetToken(XCSSParser.Hash, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassNameContext className() {
			return GetRuleContext<ClassNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttribContext attrib() {
			return GetRuleContext<AttribContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PseudoContext pseudo() {
			return GetRuleContext<PseudoContext>(0);
		}
		public NegationArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_negationArg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IXCSSParserListener typedListener = listener as IXCSSParserListener;
			if (typedListener != null) typedListener.EnterNegationArg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IXCSSParserListener typedListener = listener as IXCSSParserListener;
			if (typedListener != null) typedListener.ExitNegationArg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXCSSParserVisitor<TResult> typedVisitor = visitor as IXCSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNegationArg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NegationArgContext negationArg() {
		NegationArgContext _localctx = new NegationArgContext(Context, State);
		EnterRule(_localctx, 30, RULE_negationArg);
		try {
			State = 173;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 167;
				typeSelector();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 168;
				universal();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 169;
				Match(Hash);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 170;
				className();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 171;
				attrib();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 172;
				pseudo();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ident() { return GetToken(XCSSParser.Ident, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MediaOnly() { return GetToken(XCSSParser.MediaOnly, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Not() { return GetToken(XCSSParser.Not, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode And() { return GetToken(XCSSParser.And, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Or() { return GetToken(XCSSParser.Or, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode From() { return GetToken(XCSSParser.From, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode To() { return GetToken(XCSSParser.To, 0); }
		public IdentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ident; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IXCSSParserListener typedListener = listener as IXCSSParserListener;
			if (typedListener != null) typedListener.EnterIdent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IXCSSParserListener typedListener = listener as IXCSSParserListener;
			if (typedListener != null) typedListener.ExitIdent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXCSSParserVisitor<TResult> typedVisitor = visitor as IXCSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentContext ident() {
		IdentContext _localctx = new IdentContext(Context, State);
		EnterRule(_localctx, 32, RULE_ident);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 175;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MediaOnly) | (1L << Not) | (1L << And) | (1L << Or) | (1L << From) | (1L << To) | (1L << Ident))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comment() { return GetTokens(XCSSParser.Comment); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comment(int i) {
			return GetToken(XCSSParser.Comment, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Space() { return GetTokens(XCSSParser.Space); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Space(int i) {
			return GetToken(XCSSParser.Space, i);
		}
		public WsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ws; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IXCSSParserListener typedListener = listener as IXCSSParserListener;
			if (typedListener != null) typedListener.EnterWs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IXCSSParserListener typedListener = listener as IXCSSParserListener;
			if (typedListener != null) typedListener.ExitWs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IXCSSParserVisitor<TResult> typedVisitor = visitor as IXCSSParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WsContext ws() {
		WsContext _localctx = new WsContext(Context, State);
		EnterRule(_localctx, 34, RULE_ws);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 180;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 177;
					_la = TokenStream.LA(1);
					if ( !(_la==Comment || _la==Space) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					} 
				}
				State = 182;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x42', '\xBA', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\a', '\x3', '.', '\n', '\x3', '\f', 
		'\x3', '\xE', '\x3', '\x31', '\v', '\x3', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\a', '\x4', '\x39', 
		'\n', '\x4', '\f', '\x4', '\xE', '\x4', '<', '\v', '\x4', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '\x46', '\n', '\x5', '\x3', 
		'\x6', '\x3', '\x6', '\x5', '\x6', 'J', '\n', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\a', '\x6', 'Q', '\n', 
		'\x6', '\f', '\x6', '\xE', '\x6', 'T', '\v', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x6', '\x6', '[', '\n', 
		'\x6', '\r', '\x6', '\xE', '\x6', '\\', '\x5', '\x6', '_', '\n', '\x6', 
		'\x3', '\a', '\x5', '\a', '\x62', '\n', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\b', '\x3', '\b', '\x5', '\b', 'h', '\n', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x5', '\n', 'o', '\n', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', 'y', '\n', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x5', 
		'\f', '\x81', '\n', '\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', '\x85', 
		'\n', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', '\x5', 
		'\r', '\x8B', '\n', '\r', '\x3', '\r', '\x3', '\r', '\x5', '\r', '\x8F', 
		'\n', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\x9D', '\n', '\xF', 
		'\x3', '\xF', '\x6', '\xF', '\xA0', '\n', '\xF', '\r', '\xF', '\xE', '\xF', 
		'\xA1', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x5', '\x11', '\xB0', '\n', '\x11', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x13', '\a', '\x13', '\xB5', '\n', 
		'\x13', '\f', '\x13', '\xE', '\x13', '\xB8', '\v', '\x13', '\x3', '\x13', 
		'\x2', '\x2', '\x14', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', 
		'\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', 
		'\x2', '\x5', '\x5', '\x2', '\n', '\n', '\x16', '\x17', '/', '\x31', '\x6', 
		'\x2', '\"', '$', '\x34', '\x34', '\x36', '\x37', '@', '@', '\x4', '\x2', 
		'\x11', '\x11', '\x13', '\x13', '\x2', '\xCE', '\x2', '&', '\x3', '\x2', 
		'\x2', '\x2', '\x4', '(', '\x3', '\x2', '\x2', '\x2', '\x6', '\x32', '\x3', 
		'\x2', '\x2', '\x2', '\b', '\x45', '\x3', '\x2', '\x2', '\x2', '\n', '^', 
		'\x3', '\x2', '\x2', '\x2', '\f', '\x61', '\x3', '\x2', '\x2', '\x2', 
		'\xE', 'g', '\x3', '\x2', '\x2', '\x2', '\x10', 'k', '\x3', '\x2', '\x2', 
		'\x2', '\x12', 'n', '\x3', '\x2', '\x2', '\x2', '\x14', 'r', '\x3', '\x2', 
		'\x2', '\x2', '\x16', 'u', '\x3', '\x2', '\x2', '\x2', '\x18', '\x88', 
		'\x3', '\x2', '\x2', '\x2', '\x1A', '\x90', '\x3', '\x2', '\x2', '\x2', 
		'\x1C', '\x9F', '\x3', '\x2', '\x2', '\x2', '\x1E', '\xA3', '\x3', '\x2', 
		'\x2', '\x2', ' ', '\xAF', '\x3', '\x2', '\x2', '\x2', '\"', '\xB1', '\x3', 
		'\x2', '\x2', '\x2', '$', '\xB6', '\x3', '\x2', '\x2', '\x2', '&', '\'', 
		'\x5', '\x4', '\x3', '\x2', '\'', '\x3', '\x3', '\x2', '\x2', '\x2', '(', 
		'/', '\x5', '\x6', '\x4', '\x2', ')', '*', '\a', '*', '\x2', '\x2', '*', 
		'+', '\x5', '$', '\x13', '\x2', '+', ',', '\x5', '\x6', '\x4', '\x2', 
		',', '.', '\x3', '\x2', '\x2', '\x2', '-', ')', '\x3', '\x2', '\x2', '\x2', 
		'.', '\x31', '\x3', '\x2', '\x2', '\x2', '/', '-', '\x3', '\x2', '\x2', 
		'\x2', '/', '\x30', '\x3', '\x2', '\x2', '\x2', '\x30', '\x5', '\x3', 
		'\x2', '\x2', '\x2', '\x31', '/', '\x3', '\x2', '\x2', '\x2', '\x32', 
		'\x33', '\x5', '\n', '\x6', '\x2', '\x33', ':', '\x5', '$', '\x13', '\x2', 
		'\x34', '\x35', '\x5', '\b', '\x5', '\x2', '\x35', '\x36', '\x5', '\n', 
		'\x6', '\x2', '\x36', '\x37', '\x5', '$', '\x13', '\x2', '\x37', '\x39', 
		'\x3', '\x2', '\x2', '\x2', '\x38', '\x34', '\x3', '\x2', '\x2', '\x2', 
		'\x39', '<', '\x3', '\x2', '\x2', '\x2', ':', '\x38', '\x3', '\x2', '\x2', 
		'\x2', ':', ';', '\x3', '\x2', '\x2', '\x2', ';', '\a', '\x3', '\x2', 
		'\x2', '\x2', '<', ':', '\x3', '\x2', '\x2', '\x2', '=', '>', '\a', '\'', 
		'\x2', '\x2', '>', '\x46', '\x5', '$', '\x13', '\x2', '?', '@', '\a', 
		')', '\x2', '\x2', '@', '\x46', '\x5', '$', '\x13', '\x2', '\x41', '\x42', 
		'\a', '+', '\x2', '\x2', '\x42', '\x46', '\x5', '$', '\x13', '\x2', '\x43', 
		'\x44', '\a', '\x13', '\x2', '\x2', '\x44', '\x46', '\x5', '$', '\x13', 
		'\x2', '\x45', '=', '\x3', '\x2', '\x2', '\x2', '\x45', '?', '\x3', '\x2', 
		'\x2', '\x2', '\x45', '\x41', '\x3', '\x2', '\x2', '\x2', '\x45', '\x43', 
		'\x3', '\x2', '\x2', '\x2', '\x46', '\t', '\x3', '\x2', '\x2', '\x2', 
		'G', 'J', '\x5', '\f', '\a', '\x2', 'H', 'J', '\x5', '\x12', '\n', '\x2', 
		'I', 'G', '\x3', '\x2', '\x2', '\x2', 'I', 'H', '\x3', '\x2', '\x2', '\x2', 
		'J', 'R', '\x3', '\x2', '\x2', '\x2', 'K', 'Q', '\a', '\x18', '\x2', '\x2', 
		'L', 'Q', '\x5', '\x14', '\v', '\x2', 'M', 'Q', '\x5', '\x16', '\f', '\x2', 
		'N', 'Q', '\x5', '\x18', '\r', '\x2', 'O', 'Q', '\x5', '\x1E', '\x10', 
		'\x2', 'P', 'K', '\x3', '\x2', '\x2', '\x2', 'P', 'L', '\x3', '\x2', '\x2', 
		'\x2', 'P', 'M', '\x3', '\x2', '\x2', '\x2', 'P', 'N', '\x3', '\x2', '\x2', 
		'\x2', 'P', 'O', '\x3', '\x2', '\x2', '\x2', 'Q', 'T', '\x3', '\x2', '\x2', 
		'\x2', 'R', 'P', '\x3', '\x2', '\x2', '\x2', 'R', 'S', '\x3', '\x2', '\x2', 
		'\x2', 'S', '_', '\x3', '\x2', '\x2', '\x2', 'T', 'R', '\x3', '\x2', '\x2', 
		'\x2', 'U', '[', '\a', '\x18', '\x2', '\x2', 'V', '[', '\x5', '\x14', 
		'\v', '\x2', 'W', '[', '\x5', '\x16', '\f', '\x2', 'X', '[', '\x5', '\x18', 
		'\r', '\x2', 'Y', '[', '\x5', '\x1E', '\x10', '\x2', 'Z', 'U', '\x3', 
		'\x2', '\x2', '\x2', 'Z', 'V', '\x3', '\x2', '\x2', '\x2', 'Z', 'W', '\x3', 
		'\x2', '\x2', '\x2', 'Z', 'X', '\x3', '\x2', '\x2', '\x2', 'Z', 'Y', '\x3', 
		'\x2', '\x2', '\x2', '[', '\\', '\x3', '\x2', '\x2', '\x2', '\\', 'Z', 
		'\x3', '\x2', '\x2', '\x2', '\\', ']', '\x3', '\x2', '\x2', '\x2', ']', 
		'_', '\x3', '\x2', '\x2', '\x2', '^', 'I', '\x3', '\x2', '\x2', '\x2', 
		'^', 'Z', '\x3', '\x2', '\x2', '\x2', '_', '\v', '\x3', '\x2', '\x2', 
		'\x2', '`', '\x62', '\x5', '\xE', '\b', '\x2', '\x61', '`', '\x3', '\x2', 
		'\x2', '\x2', '\x61', '\x62', '\x3', '\x2', '\x2', '\x2', '\x62', '\x63', 
		'\x3', '\x2', '\x2', '\x2', '\x63', '\x64', '\x5', '\x10', '\t', '\x2', 
		'\x64', '\r', '\x3', '\x2', '\x2', '\x2', '\x65', 'h', '\x5', '\"', '\x12', 
		'\x2', '\x66', 'h', '\a', '\r', '\x2', '\x2', 'g', '\x65', '\x3', '\x2', 
		'\x2', '\x2', 'g', '\x66', '\x3', '\x2', '\x2', '\x2', 'g', 'h', '\x3', 
		'\x2', '\x2', '\x2', 'h', 'i', '\x3', '\x2', '\x2', '\x2', 'i', 'j', '\a', 
		'\xF', '\x2', '\x2', 'j', '\xF', '\x3', '\x2', '\x2', '\x2', 'k', 'l', 
		'\x5', '\"', '\x12', '\x2', 'l', '\x11', '\x3', '\x2', '\x2', '\x2', 'm', 
		'o', '\x5', '\xE', '\b', '\x2', 'n', 'm', '\x3', '\x2', '\x2', '\x2', 
		'n', 'o', '\x3', '\x2', '\x2', '\x2', 'o', 'p', '\x3', '\x2', '\x2', '\x2', 
		'p', 'q', '\a', '\r', '\x2', '\x2', 'q', '\x13', '\x3', '\x2', '\x2', 
		'\x2', 'r', 's', '\a', '\f', '\x2', '\x2', 's', 't', '\x5', '\"', '\x12', 
		'\x2', 't', '\x15', '\x3', '\x2', '\x2', '\x2', 'u', 'v', '\a', '\x3', 
		'\x2', '\x2', 'v', 'x', '\x5', '$', '\x13', '\x2', 'w', 'y', '\x5', '\xE', 
		'\b', '\x2', 'x', 'w', '\x3', '\x2', '\x2', '\x2', 'x', 'y', '\x3', '\x2', 
		'\x2', '\x2', 'y', 'z', '\x3', '\x2', '\x2', '\x2', 'z', '{', '\x5', '\"', 
		'\x12', '\x2', '{', '\x84', '\x5', '$', '\x13', '\x2', '|', '}', '\t', 
		'\x2', '\x2', '\x2', '}', '\x80', '\x5', '$', '\x13', '\x2', '~', '\x81', 
		'\x5', '\"', '\x12', '\x2', '\x7F', '\x81', '\a', '.', '\x2', '\x2', '\x80', 
		'~', '\x3', '\x2', '\x2', '\x2', '\x80', '\x7F', '\x3', '\x2', '\x2', 
		'\x2', '\x81', '\x82', '\x3', '\x2', '\x2', '\x2', '\x82', '\x83', '\x5', 
		'$', '\x13', '\x2', '\x83', '\x85', '\x3', '\x2', '\x2', '\x2', '\x84', 
		'|', '\x3', '\x2', '\x2', '\x2', '\x84', '\x85', '\x3', '\x2', '\x2', 
		'\x2', '\x85', '\x86', '\x3', '\x2', '\x2', '\x2', '\x86', '\x87', '\a', 
		'\x4', '\x2', '\x2', '\x87', '\x17', '\x3', '\x2', '\x2', '\x2', '\x88', 
		'\x8A', '\a', '\v', '\x2', '\x2', '\x89', '\x8B', '\a', '\v', '\x2', '\x2', 
		'\x8A', '\x89', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x8B', '\x3', '\x2', 
		'\x2', '\x2', '\x8B', '\x8E', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x8F', 
		'\x5', '\"', '\x12', '\x2', '\x8D', '\x8F', '\x5', '\x1A', '\xE', '\x2', 
		'\x8E', '\x8C', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x8D', '\x3', '\x2', 
		'\x2', '\x2', '\x8F', '\x19', '\x3', '\x2', '\x2', '\x2', '\x90', '\x91', 
		'\a', '\x41', '\x2', '\x2', '\x91', '\x92', '\x5', '$', '\x13', '\x2', 
		'\x92', '\x93', '\x5', '\x1C', '\xF', '\x2', '\x93', '\x94', '\a', '\x6', 
		'\x2', '\x2', '\x94', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x95', '\x9D', 
		'\a', '\'', '\x2', '\x2', '\x96', '\x9D', '\a', '(', '\x2', '\x2', '\x97', 
		'\x9D', '\a', '%', '\x2', '\x2', '\x98', '\x9D', '\a', '&', '\x2', '\x2', 
		'\x99', '\x9D', '\a', '-', '\x2', '\x2', '\x9A', '\x9D', '\a', '.', '\x2', 
		'\x2', '\x9B', '\x9D', '\x5', '\"', '\x12', '\x2', '\x9C', '\x95', '\x3', 
		'\x2', '\x2', '\x2', '\x9C', '\x96', '\x3', '\x2', '\x2', '\x2', '\x9C', 
		'\x97', '\x3', '\x2', '\x2', '\x2', '\x9C', '\x98', '\x3', '\x2', '\x2', 
		'\x2', '\x9C', '\x99', '\x3', '\x2', '\x2', '\x2', '\x9C', '\x9A', '\x3', 
		'\x2', '\x2', '\x2', '\x9C', '\x9B', '\x3', '\x2', '\x2', '\x2', '\x9D', 
		'\x9E', '\x3', '\x2', '\x2', '\x2', '\x9E', '\xA0', '\x5', '$', '\x13', 
		'\x2', '\x9F', '\x9C', '\x3', '\x2', '\x2', '\x2', '\xA0', '\xA1', '\x3', 
		'\x2', '\x2', '\x2', '\xA1', '\x9F', '\x3', '\x2', '\x2', '\x2', '\xA1', 
		'\xA2', '\x3', '\x2', '\x2', '\x2', '\xA2', '\x1D', '\x3', '\x2', '\x2', 
		'\x2', '\xA3', '\xA4', '\a', ',', '\x2', '\x2', '\xA4', '\xA5', '\x5', 
		'$', '\x13', '\x2', '\xA5', '\xA6', '\x5', ' ', '\x11', '\x2', '\xA6', 
		'\xA7', '\x5', '$', '\x13', '\x2', '\xA7', '\xA8', '\a', '\x6', '\x2', 
		'\x2', '\xA8', '\x1F', '\x3', '\x2', '\x2', '\x2', '\xA9', '\xB0', '\x5', 
		'\f', '\a', '\x2', '\xAA', '\xB0', '\x5', '\x12', '\n', '\x2', '\xAB', 
		'\xB0', '\a', '\x18', '\x2', '\x2', '\xAC', '\xB0', '\x5', '\x14', '\v', 
		'\x2', '\xAD', '\xB0', '\x5', '\x16', '\f', '\x2', '\xAE', '\xB0', '\x5', 
		'\x18', '\r', '\x2', '\xAF', '\xA9', '\x3', '\x2', '\x2', '\x2', '\xAF', 
		'\xAA', '\x3', '\x2', '\x2', '\x2', '\xAF', '\xAB', '\x3', '\x2', '\x2', 
		'\x2', '\xAF', '\xAC', '\x3', '\x2', '\x2', '\x2', '\xAF', '\xAD', '\x3', 
		'\x2', '\x2', '\x2', '\xAF', '\xAE', '\x3', '\x2', '\x2', '\x2', '\xB0', 
		'!', '\x3', '\x2', '\x2', '\x2', '\xB1', '\xB2', '\t', '\x3', '\x2', '\x2', 
		'\xB2', '#', '\x3', '\x2', '\x2', '\x2', '\xB3', '\xB5', '\t', '\x4', 
		'\x2', '\x2', '\xB4', '\xB3', '\x3', '\x2', '\x2', '\x2', '\xB5', '\xB8', 
		'\x3', '\x2', '\x2', '\x2', '\xB6', '\xB4', '\x3', '\x2', '\x2', '\x2', 
		'\xB6', '\xB7', '\x3', '\x2', '\x2', '\x2', '\xB7', '%', '\x3', '\x2', 
		'\x2', '\x2', '\xB8', '\xB6', '\x3', '\x2', '\x2', '\x2', '\x17', '/', 
		':', '\x45', 'I', 'P', 'R', 'Z', '\\', '^', '\x61', 'g', 'n', 'x', '\x80', 
		'\x84', '\x8A', '\x8E', '\x9C', '\xA1', '\xAF', '\xB6',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
