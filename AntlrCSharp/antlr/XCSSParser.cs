//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\dev\xcss-parser-csharp\AntlrCSharp\antlr\XCSSParser.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class XCSSParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		OpenBracket=1, CloseBracket=2, OpenParen=3, CloseParen=4, OpenBrace=5, 
		CloseBrace=6, SemiColon=7, Equal=8, Colon=9, Dot=10, Multiply=11, Divide=12, 
		Pipe=13, Underscore=14, Quote=15, DoubleQuote=16, Comment=17, Url=18, 
		Space=19, Cdo=20, Cdc=21, Includes=22, DashMatch=23, Hash=24, Import=25, 
		Page=26, Media=27, Namespace=28, Charset=29, Important=30, Percentage=31, 
		Url_=32, UnicodeRange=33, MediaOnly=34, Not=35, And=36, Dimension=37, 
		UnknownDimension=38, Plus=39, Minus=40, Greater=41, Comma=42, Tilde=43, 
		PseudoNot=44, Integer=45, Number=46, String_=47, PrefixMatch=48, SuffixMatch=49, 
		SubstringMatch=50, FontFace=51, Supports=52, Or=53, Keyframes=54, From=55, 
		To=56, Calc=57, Viewport=58, CounterStyle=59, FontFeatureValues=60, DxImageTransform=61, 
		AtKeyword=62, Variable=63, Var=64, Ident=65, Function_=66, UnexpectedCharacter=67, 
		Name=68;
	public const int
		RULE_parse = 0, RULE_selectorGroup = 1, RULE_selector = 2, RULE_combinator = 3, 
		RULE_simpleSelectorSequence = 4, RULE_elementId = 5, RULE_elementIdValue = 6, 
		RULE_tagName = 7, RULE_typeSelector = 8, RULE_typeNamespacePrefix = 9, 
		RULE_elementName = 10, RULE_universal = 11, RULE_className = 12, RULE_classNameValue = 13, 
		RULE_condition = 14, RULE_xpathCondition = 15, RULE_elementIndex = 16, 
		RULE_subelementSelector = 17, RULE_text = 18, RULE_textValue = 19, RULE_textMatchStyle = 20, 
		RULE_attrib = 21, RULE_attribName = 22, RULE_attribMatchStyle = 23, RULE_attribValue = 24, 
		RULE_pseudo = 25, RULE_functionalPseudo = 26, RULE_expression = 27, RULE_negation = 28, 
		RULE_negationArg = 29, RULE_ident = 30, RULE_ws = 31;
	public static readonly string[] ruleNames = {
		"parse", "selectorGroup", "selector", "combinator", "simpleSelectorSequence", 
		"elementId", "elementIdValue", "tagName", "typeSelector", "typeNamespacePrefix", 
		"elementName", "universal", "className", "classNameValue", "condition", 
		"xpathCondition", "elementIndex", "subelementSelector", "text", "textValue", 
		"textMatchStyle", "attrib", "attribName", "attribMatchStyle", "attribValue", 
		"pseudo", "functionalPseudo", "expression", "negation", "negationArg", 
		"ident", "ws"
	};

	private static readonly string[] _LiteralNames = {
		null, "'['", "']'", "'('", "')'", "'{'", "'}'", "';'", "'='", "':'", "'.'", 
		"'*'", "'/'", "'|'", "'_'", "'''", "'\"'", null, null, null, "'<!--'", 
		"'-->'", "'~='", "'|='", "'#'", null, null, null, null, "'@charset '", 
		null, null, "'url('", null, null, null, null, null, null, "'+'", "'-'", 
		"'>'", "','", "'~'", null, null, null, null, "'^='", "'$='", "'*='", null, 
		null, null, null, null, null, "'calc('", null, null, null, null, null, 
		null, "'var('"
	};
	private static readonly string[] _SymbolicNames = {
		null, "OpenBracket", "CloseBracket", "OpenParen", "CloseParen", "OpenBrace", 
		"CloseBrace", "SemiColon", "Equal", "Colon", "Dot", "Multiply", "Divide", 
		"Pipe", "Underscore", "Quote", "DoubleQuote", "Comment", "Url", "Space", 
		"Cdo", "Cdc", "Includes", "DashMatch", "Hash", "Import", "Page", "Media", 
		"Namespace", "Charset", "Important", "Percentage", "Url_", "UnicodeRange", 
		"MediaOnly", "Not", "And", "Dimension", "UnknownDimension", "Plus", "Minus", 
		"Greater", "Comma", "Tilde", "PseudoNot", "Integer", "Number", "String_", 
		"PrefixMatch", "SuffixMatch", "SubstringMatch", "FontFace", "Supports", 
		"Or", "Keyframes", "From", "To", "Calc", "Viewport", "CounterStyle", "FontFeatureValues", 
		"DxImageTransform", "AtKeyword", "Variable", "Var", "Ident", "Function_", 
		"UnexpectedCharacter", "Name"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "XCSSParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static XCSSParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public XCSSParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public XCSSParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ParseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SelectorGroupContext selectorGroup() {
			return GetRuleContext<SelectorGroupContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(XCSSParser.Eof, 0); }
		public ParseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parse; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IXCSSParserListener typedListener = listener as IXCSSParserListener;
			if (typedListener != null) typedListener.EnterParse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IXCSSParserListener typedListener = listener as IXCSSParserListener;
			if (typedListener != null) typedListener.ExitParse(this);
		}
	}

	[RuleVersion(0)]
	public ParseContext parse() {
		ParseContext _localctx = new ParseContext(Context, State);
		EnterRule(_localctx, 0, RULE_parse);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 64;
			selectorGroup();
			State = 65;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectorGroupContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SelectorContext[] selector() {
			return GetRuleContexts<SelectorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectorContext selector(int i) {
			return GetRuleContext<SelectorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(XCSSParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(XCSSParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WsContext[] ws() {
			return GetRuleContexts<WsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WsContext ws(int i) {
			return GetRuleContext<WsContext>(i);
		}
		public SelectorGroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectorGroup; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IXCSSParserListener typedListener = listener as IXCSSParserListener;
			if (typedListener != null) typedListener.EnterSelectorGroup(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IXCSSParserListener typedListener = listener as IXCSSParserListener;
			if (typedListener != null) typedListener.ExitSelectorGroup(this);
		}
	}

	[RuleVersion(0)]
	public SelectorGroupContext selectorGroup() {
		SelectorGroupContext _localctx = new SelectorGroupContext(Context, State);
		EnterRule(_localctx, 2, RULE_selectorGroup);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 67;
			selector();
			State = 74;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 68;
				Match(Comma);
				State = 69;
				ws();
				State = 70;
				selector();
				}
				}
				State = 76;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleSelectorSequenceContext[] simpleSelectorSequence() {
			return GetRuleContexts<SimpleSelectorSequenceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleSelectorSequenceContext simpleSelectorSequence(int i) {
			return GetRuleContext<SimpleSelectorSequenceContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WsContext[] ws() {
			return GetRuleContexts<WsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WsContext ws(int i) {
			return GetRuleContext<WsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CombinatorContext[] combinator() {
			return GetRuleContexts<CombinatorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CombinatorContext combinator(int i) {
			return GetRuleContext<CombinatorContext>(i);
		}
		public SelectorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selector; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IXCSSParserListener typedListener = listener as IXCSSParserListener;
			if (typedListener != null) typedListener.EnterSelector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IXCSSParserListener typedListener = listener as IXCSSParserListener;
			if (typedListener != null) typedListener.ExitSelector(this);
		}
	}

	[RuleVersion(0)]
	public SelectorContext selector() {
		SelectorContext _localctx = new SelectorContext(Context, State);
		EnterRule(_localctx, 4, RULE_selector);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 77;
			simpleSelectorSequence();
			State = 78;
			ws();
			State = 85;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Space) | (1L << Plus) | (1L << Greater) | (1L << Tilde))) != 0)) {
				{
				{
				State = 79;
				combinator();
				State = 80;
				simpleSelectorSequence();
				State = 81;
				ws();
				}
				}
				State = 87;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CombinatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus() { return GetToken(XCSSParser.Plus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WsContext ws() {
			return GetRuleContext<WsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Greater() { return GetToken(XCSSParser.Greater, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Tilde() { return GetToken(XCSSParser.Tilde, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Space() { return GetToken(XCSSParser.Space, 0); }
		public CombinatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_combinator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IXCSSParserListener typedListener = listener as IXCSSParserListener;
			if (typedListener != null) typedListener.EnterCombinator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IXCSSParserListener typedListener = listener as IXCSSParserListener;
			if (typedListener != null) typedListener.ExitCombinator(this);
		}
	}

	[RuleVersion(0)]
	public CombinatorContext combinator() {
		CombinatorContext _localctx = new CombinatorContext(Context, State);
		EnterRule(_localctx, 6, RULE_combinator);
		try {
			State = 96;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Plus:
				EnterOuterAlt(_localctx, 1);
				{
				State = 88;
				Match(Plus);
				State = 89;
				ws();
				}
				break;
			case Greater:
				EnterOuterAlt(_localctx, 2);
				{
				State = 90;
				Match(Greater);
				State = 91;
				ws();
				}
				break;
			case Tilde:
				EnterOuterAlt(_localctx, 3);
				{
				State = 92;
				Match(Tilde);
				State = 93;
				ws();
				}
				break;
			case Space:
				EnterOuterAlt(_localctx, 4);
				{
				State = 94;
				Match(Space);
				State = 95;
				ws();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleSelectorSequenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TagNameContext tagName() {
			return GetRuleContext<TagNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElementIdContext[] elementId() {
			return GetRuleContexts<ElementIdContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElementIdContext elementId(int i) {
			return GetRuleContext<ElementIdContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassNameContext[] className() {
			return GetRuleContexts<ClassNameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassNameContext className(int i) {
			return GetRuleContext<ClassNameContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext[] condition() {
			return GetRuleContexts<ConditionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition(int i) {
			return GetRuleContext<ConditionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PseudoContext[] pseudo() {
			return GetRuleContexts<PseudoContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PseudoContext pseudo(int i) {
			return GetRuleContext<PseudoContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NegationContext[] negation() {
			return GetRuleContexts<NegationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NegationContext negation(int i) {
			return GetRuleContext<NegationContext>(i);
		}
		public SimpleSelectorSequenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleSelectorSequence; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IXCSSParserListener typedListener = listener as IXCSSParserListener;
			if (typedListener != null) typedListener.EnterSimpleSelectorSequence(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IXCSSParserListener typedListener = listener as IXCSSParserListener;
			if (typedListener != null) typedListener.ExitSimpleSelectorSequence(this);
		}
	}

	[RuleVersion(0)]
	public SimpleSelectorSequenceContext simpleSelectorSequence() {
		SimpleSelectorSequenceContext _localctx = new SimpleSelectorSequenceContext(Context, State);
		EnterRule(_localctx, 8, RULE_simpleSelectorSequence);
		int _la;
		try {
			State = 118;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Multiply:
			case Pipe:
			case MediaOnly:
			case Not:
			case And:
			case Or:
			case From:
			case To:
			case Ident:
				EnterOuterAlt(_localctx, 1);
				{
				State = 98;
				tagName();
				State = 106;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OpenBracket) | (1L << Colon) | (1L << Dot) | (1L << Hash) | (1L << PseudoNot))) != 0)) {
					{
					State = 104;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case Hash:
						{
						State = 99;
						elementId();
						}
						break;
					case Dot:
						{
						State = 100;
						className();
						}
						break;
					case OpenBracket:
						{
						State = 101;
						condition();
						}
						break;
					case Colon:
						{
						State = 102;
						pseudo();
						}
						break;
					case PseudoNot:
						{
						State = 103;
						negation();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					State = 108;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case OpenBracket:
			case Colon:
			case Dot:
			case Hash:
			case PseudoNot:
				EnterOuterAlt(_localctx, 2);
				{
				State = 114;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					State = 114;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case Hash:
						{
						State = 109;
						elementId();
						}
						break;
					case Dot:
						{
						State = 110;
						className();
						}
						break;
					case OpenBracket:
						{
						State = 111;
						condition();
						}
						break;
					case Colon:
						{
						State = 112;
						pseudo();
						}
						break;
					case PseudoNot:
						{
						State = 113;
						negation();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					State = 116;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OpenBracket) | (1L << Colon) | (1L << Dot) | (1L << Hash) | (1L << PseudoNot))) != 0) );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementIdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Hash() { return GetToken(XCSSParser.Hash, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ElementIdValueContext elementIdValue() {
			return GetRuleContext<ElementIdValueContext>(0);
		}
		public ElementIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementId; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IXCSSParserListener typedListener = listener as IXCSSParserListener;
			if (typedListener != null) typedListener.EnterElementId(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IXCSSParserListener typedListener = listener as IXCSSParserListener;
			if (typedListener != null) typedListener.ExitElementId(this);
		}
	}

	[RuleVersion(0)]
	public ElementIdContext elementId() {
		ElementIdContext _localctx = new ElementIdContext(Context, State);
		EnterRule(_localctx, 10, RULE_elementId);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 120;
			Match(Hash);
			State = 121;
			elementIdValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementIdValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Name() { return GetToken(XCSSParser.Name, 0); }
		public ElementIdValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementIdValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IXCSSParserListener typedListener = listener as IXCSSParserListener;
			if (typedListener != null) typedListener.EnterElementIdValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IXCSSParserListener typedListener = listener as IXCSSParserListener;
			if (typedListener != null) typedListener.ExitElementIdValue(this);
		}
	}

	[RuleVersion(0)]
	public ElementIdValueContext elementIdValue() {
		ElementIdValueContext _localctx = new ElementIdValueContext(Context, State);
		EnterRule(_localctx, 12, RULE_elementIdValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 123;
			Match(Name);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TagNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeSelectorContext typeSelector() {
			return GetRuleContext<TypeSelectorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UniversalContext universal() {
			return GetRuleContext<UniversalContext>(0);
		}
		public TagNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tagName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IXCSSParserListener typedListener = listener as IXCSSParserListener;
			if (typedListener != null) typedListener.EnterTagName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IXCSSParserListener typedListener = listener as IXCSSParserListener;
			if (typedListener != null) typedListener.ExitTagName(this);
		}
	}

	[RuleVersion(0)]
	public TagNameContext tagName() {
		TagNameContext _localctx = new TagNameContext(Context, State);
		EnterRule(_localctx, 14, RULE_tagName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 127;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				{
				State = 125;
				typeSelector();
				}
				break;
			case 2:
				{
				State = 126;
				universal();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeSelectorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ElementNameContext elementName() {
			return GetRuleContext<ElementNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeNamespacePrefixContext typeNamespacePrefix() {
			return GetRuleContext<TypeNamespacePrefixContext>(0);
		}
		public TypeSelectorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeSelector; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IXCSSParserListener typedListener = listener as IXCSSParserListener;
			if (typedListener != null) typedListener.EnterTypeSelector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IXCSSParserListener typedListener = listener as IXCSSParserListener;
			if (typedListener != null) typedListener.ExitTypeSelector(this);
		}
	}

	[RuleVersion(0)]
	public TypeSelectorContext typeSelector() {
		TypeSelectorContext _localctx = new TypeSelectorContext(Context, State);
		EnterRule(_localctx, 16, RULE_typeSelector);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 130;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				{
				State = 129;
				typeNamespacePrefix();
				}
				break;
			}
			State = 132;
			elementName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeNamespacePrefixContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Pipe() { return GetToken(XCSSParser.Pipe, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Multiply() { return GetToken(XCSSParser.Multiply, 0); }
		public TypeNamespacePrefixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeNamespacePrefix; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IXCSSParserListener typedListener = listener as IXCSSParserListener;
			if (typedListener != null) typedListener.EnterTypeNamespacePrefix(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IXCSSParserListener typedListener = listener as IXCSSParserListener;
			if (typedListener != null) typedListener.ExitTypeNamespacePrefix(this);
		}
	}

	[RuleVersion(0)]
	public TypeNamespacePrefixContext typeNamespacePrefix() {
		TypeNamespacePrefixContext _localctx = new TypeNamespacePrefixContext(Context, State);
		EnterRule(_localctx, 18, RULE_typeNamespacePrefix);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 136;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MediaOnly:
			case Not:
			case And:
			case Or:
			case From:
			case To:
			case Ident:
				{
				State = 134;
				ident();
				}
				break;
			case Multiply:
				{
				State = 135;
				Match(Multiply);
				}
				break;
			case Pipe:
				break;
			default:
				break;
			}
			State = 138;
			Match(Pipe);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		public ElementNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IXCSSParserListener typedListener = listener as IXCSSParserListener;
			if (typedListener != null) typedListener.EnterElementName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IXCSSParserListener typedListener = listener as IXCSSParserListener;
			if (typedListener != null) typedListener.ExitElementName(this);
		}
	}

	[RuleVersion(0)]
	public ElementNameContext elementName() {
		ElementNameContext _localctx = new ElementNameContext(Context, State);
		EnterRule(_localctx, 20, RULE_elementName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 140;
			ident();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UniversalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Multiply() { return GetToken(XCSSParser.Multiply, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeNamespacePrefixContext typeNamespacePrefix() {
			return GetRuleContext<TypeNamespacePrefixContext>(0);
		}
		public UniversalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_universal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IXCSSParserListener typedListener = listener as IXCSSParserListener;
			if (typedListener != null) typedListener.EnterUniversal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IXCSSParserListener typedListener = listener as IXCSSParserListener;
			if (typedListener != null) typedListener.ExitUniversal(this);
		}
	}

	[RuleVersion(0)]
	public UniversalContext universal() {
		UniversalContext _localctx = new UniversalContext(Context, State);
		EnterRule(_localctx, 22, RULE_universal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 143;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				{
				State = 142;
				typeNamespacePrefix();
				}
				break;
			}
			State = 145;
			Match(Multiply);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dot() { return GetToken(XCSSParser.Dot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ClassNameValueContext classNameValue() {
			return GetRuleContext<ClassNameValueContext>(0);
		}
		public ClassNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_className; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IXCSSParserListener typedListener = listener as IXCSSParserListener;
			if (typedListener != null) typedListener.EnterClassName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IXCSSParserListener typedListener = listener as IXCSSParserListener;
			if (typedListener != null) typedListener.ExitClassName(this);
		}
	}

	[RuleVersion(0)]
	public ClassNameContext className() {
		ClassNameContext _localctx = new ClassNameContext(Context, State);
		EnterRule(_localctx, 24, RULE_className);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 147;
			Match(Dot);
			State = 148;
			classNameValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassNameValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		public ClassNameValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classNameValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IXCSSParserListener typedListener = listener as IXCSSParserListener;
			if (typedListener != null) typedListener.EnterClassNameValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IXCSSParserListener typedListener = listener as IXCSSParserListener;
			if (typedListener != null) typedListener.ExitClassNameValue(this);
		}
	}

	[RuleVersion(0)]
	public ClassNameValueContext classNameValue() {
		ClassNameValueContext _localctx = new ClassNameValueContext(Context, State);
		EnterRule(_localctx, 26, RULE_classNameValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 150;
			ident();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBracket() { return GetToken(XCSSParser.OpenBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBracket() { return GetToken(XCSSParser.CloseBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttribContext attrib() {
			return GetRuleContext<AttribContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TextContext text() {
			return GetRuleContext<TextContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubelementSelectorContext subelementSelector() {
			return GetRuleContext<SubelementSelectorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElementIndexContext elementIndex() {
			return GetRuleContext<ElementIndexContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public XpathConditionContext xpathCondition() {
			return GetRuleContext<XpathConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CombinatorContext combinator() {
			return GetRuleContext<CombinatorContext>(0);
		}
		public ConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IXCSSParserListener typedListener = listener as IXCSSParserListener;
			if (typedListener != null) typedListener.EnterCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IXCSSParserListener typedListener = listener as IXCSSParserListener;
			if (typedListener != null) typedListener.ExitCondition(this);
		}
	}

	[RuleVersion(0)]
	public ConditionContext condition() {
		ConditionContext _localctx = new ConditionContext(Context, State);
		EnterRule(_localctx, 28, RULE_condition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 152;
			Match(OpenBracket);
			State = 161;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				{
				State = 153;
				attrib();
				}
				break;
			case 2:
				{
				State = 154;
				text();
				}
				break;
			case 3:
				{
				State = 156;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Space) | (1L << Plus) | (1L << Greater) | (1L << Tilde))) != 0)) {
					{
					State = 155;
					combinator();
					}
				}

				State = 158;
				subelementSelector();
				}
				break;
			case 4:
				{
				State = 159;
				elementIndex();
				}
				break;
			case 5:
				{
				State = 160;
				xpathCondition();
				}
				break;
			}
			State = 163;
			Match(CloseBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XpathConditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OpenBracket() { return GetTokens(XCSSParser.OpenBracket); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBracket(int i) {
			return GetToken(XCSSParser.OpenBracket, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public XpathConditionContext xpathCondition() {
			return GetRuleContext<XpathConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CloseBracket() { return GetTokens(XCSSParser.CloseBracket); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBracket(int i) {
			return GetToken(XCSSParser.CloseBracket, i);
		}
		public XpathConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xpathCondition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IXCSSParserListener typedListener = listener as IXCSSParserListener;
			if (typedListener != null) typedListener.EnterXpathCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IXCSSParserListener typedListener = listener as IXCSSParserListener;
			if (typedListener != null) typedListener.ExitXpathCondition(this);
		}
	}

	[RuleVersion(0)]
	public XpathConditionContext xpathCondition() {
		XpathConditionContext _localctx = new XpathConditionContext(Context, State);
		EnterRule(_localctx, 30, RULE_xpathCondition);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 168;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 165;
					_la = TokenStream.LA(1);
					if ( _la <= 0 || (_la==OpenBracket) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					} 
				}
				State = 170;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			}
			State = 175;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				{
				State = 171;
				Match(OpenBracket);
				State = 172;
				xpathCondition();
				State = 173;
				Match(CloseBracket);
				}
				break;
			}
			State = 180;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OpenBracket) | (1L << OpenParen) | (1L << CloseParen) | (1L << OpenBrace) | (1L << CloseBrace) | (1L << SemiColon) | (1L << Equal) | (1L << Colon) | (1L << Dot) | (1L << Multiply) | (1L << Divide) | (1L << Pipe) | (1L << Underscore) | (1L << Quote) | (1L << DoubleQuote) | (1L << Comment) | (1L << Url) | (1L << Space) | (1L << Cdo) | (1L << Cdc) | (1L << Includes) | (1L << DashMatch) | (1L << Hash) | (1L << Import) | (1L << Page) | (1L << Media) | (1L << Namespace) | (1L << Charset) | (1L << Important) | (1L << Percentage) | (1L << Url_) | (1L << UnicodeRange) | (1L << MediaOnly) | (1L << Not) | (1L << And) | (1L << Dimension) | (1L << UnknownDimension) | (1L << Plus) | (1L << Minus) | (1L << Greater) | (1L << Comma) | (1L << Tilde) | (1L << PseudoNot) | (1L << Integer) | (1L << Number) | (1L << String_) | (1L << PrefixMatch) | (1L << SuffixMatch) | (1L << SubstringMatch) | (1L << FontFace) | (1L << Supports) | (1L << Or) | (1L << Keyframes) | (1L << From) | (1L << To) | (1L << Calc) | (1L << Viewport) | (1L << CounterStyle) | (1L << FontFeatureValues) | (1L << DxImageTransform) | (1L << AtKeyword) | (1L << Variable))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (Var - 64)) | (1L << (Ident - 64)) | (1L << (Function_ - 64)) | (1L << (UnexpectedCharacter - 64)) | (1L << (Name - 64)))) != 0)) {
				{
				{
				State = 177;
				_la = TokenStream.LA(1);
				if ( _la <= 0 || (_la==CloseBracket) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 182;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementIndexContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Integer() { return GetToken(XCSSParser.Integer, 0); }
		public ElementIndexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementIndex; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IXCSSParserListener typedListener = listener as IXCSSParserListener;
			if (typedListener != null) typedListener.EnterElementIndex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IXCSSParserListener typedListener = listener as IXCSSParserListener;
			if (typedListener != null) typedListener.ExitElementIndex(this);
		}
	}

	[RuleVersion(0)]
	public ElementIndexContext elementIndex() {
		ElementIndexContext _localctx = new ElementIndexContext(Context, State);
		EnterRule(_localctx, 32, RULE_elementIndex);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 183;
			Match(Integer);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubelementSelectorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SelectorContext selector() {
			return GetRuleContext<SelectorContext>(0);
		}
		public SubelementSelectorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subelementSelector; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IXCSSParserListener typedListener = listener as IXCSSParserListener;
			if (typedListener != null) typedListener.EnterSubelementSelector(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IXCSSParserListener typedListener = listener as IXCSSParserListener;
			if (typedListener != null) typedListener.ExitSubelementSelector(this);
		}
	}

	[RuleVersion(0)]
	public SubelementSelectorContext subelementSelector() {
		SubelementSelectorContext _localctx = new SubelementSelectorContext(Context, State);
		EnterRule(_localctx, 34, RULE_subelementSelector);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 185;
			selector();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TextContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TextValueContext textValue() {
			return GetRuleContext<TextValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TextMatchStyleContext textMatchStyle() {
			return GetRuleContext<TextMatchStyleContext>(0);
		}
		public TextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_text; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IXCSSParserListener typedListener = listener as IXCSSParserListener;
			if (typedListener != null) typedListener.EnterText(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IXCSSParserListener typedListener = listener as IXCSSParserListener;
			if (typedListener != null) typedListener.ExitText(this);
		}
	}

	[RuleVersion(0)]
	public TextContext text() {
		TextContext _localctx = new TextContext(Context, State);
		EnterRule(_localctx, 36, RULE_text);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 188;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Tilde) {
				{
				State = 187;
				textMatchStyle();
				}
			}

			State = 190;
			textValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TextValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DoubleQuote() { return GetTokens(XCSSParser.DoubleQuote); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DoubleQuote(int i) {
			return GetToken(XCSSParser.DoubleQuote, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Quote() { return GetTokens(XCSSParser.Quote); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Quote(int i) {
			return GetToken(XCSSParser.Quote, i);
		}
		public TextValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_textValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IXCSSParserListener typedListener = listener as IXCSSParserListener;
			if (typedListener != null) typedListener.EnterTextValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IXCSSParserListener typedListener = listener as IXCSSParserListener;
			if (typedListener != null) typedListener.ExitTextValue(this);
		}
	}

	[RuleVersion(0)]
	public TextValueContext textValue() {
		TextValueContext _localctx = new TextValueContext(Context, State);
		EnterRule(_localctx, 38, RULE_textValue);
		int _la;
		try {
			State = 208;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DoubleQuote:
				EnterOuterAlt(_localctx, 1);
				{
				State = 192;
				Match(DoubleQuote);
				State = 196;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OpenBracket) | (1L << CloseBracket) | (1L << OpenParen) | (1L << CloseParen) | (1L << OpenBrace) | (1L << CloseBrace) | (1L << SemiColon) | (1L << Equal) | (1L << Colon) | (1L << Dot) | (1L << Multiply) | (1L << Divide) | (1L << Pipe) | (1L << Underscore) | (1L << Quote) | (1L << Comment) | (1L << Url) | (1L << Space) | (1L << Cdo) | (1L << Cdc) | (1L << Includes) | (1L << DashMatch) | (1L << Hash) | (1L << Import) | (1L << Page) | (1L << Media) | (1L << Namespace) | (1L << Charset) | (1L << Important) | (1L << Percentage) | (1L << Url_) | (1L << UnicodeRange) | (1L << MediaOnly) | (1L << Not) | (1L << And) | (1L << Dimension) | (1L << UnknownDimension) | (1L << Plus) | (1L << Minus) | (1L << Greater) | (1L << Comma) | (1L << Tilde) | (1L << PseudoNot) | (1L << Integer) | (1L << Number) | (1L << String_) | (1L << PrefixMatch) | (1L << SuffixMatch) | (1L << SubstringMatch) | (1L << FontFace) | (1L << Supports) | (1L << Or) | (1L << Keyframes) | (1L << From) | (1L << To) | (1L << Calc) | (1L << Viewport) | (1L << CounterStyle) | (1L << FontFeatureValues) | (1L << DxImageTransform) | (1L << AtKeyword) | (1L << Variable))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (Var - 64)) | (1L << (Ident - 64)) | (1L << (Function_ - 64)) | (1L << (UnexpectedCharacter - 64)) | (1L << (Name - 64)))) != 0)) {
					{
					{
					State = 193;
					_la = TokenStream.LA(1);
					if ( _la <= 0 || (_la==DoubleQuote) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					State = 198;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 199;
				Match(DoubleQuote);
				}
				break;
			case Quote:
				EnterOuterAlt(_localctx, 2);
				{
				State = 200;
				Match(Quote);
				State = 204;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OpenBracket) | (1L << CloseBracket) | (1L << OpenParen) | (1L << CloseParen) | (1L << OpenBrace) | (1L << CloseBrace) | (1L << SemiColon) | (1L << Equal) | (1L << Colon) | (1L << Dot) | (1L << Multiply) | (1L << Divide) | (1L << Pipe) | (1L << Underscore) | (1L << DoubleQuote) | (1L << Comment) | (1L << Url) | (1L << Space) | (1L << Cdo) | (1L << Cdc) | (1L << Includes) | (1L << DashMatch) | (1L << Hash) | (1L << Import) | (1L << Page) | (1L << Media) | (1L << Namespace) | (1L << Charset) | (1L << Important) | (1L << Percentage) | (1L << Url_) | (1L << UnicodeRange) | (1L << MediaOnly) | (1L << Not) | (1L << And) | (1L << Dimension) | (1L << UnknownDimension) | (1L << Plus) | (1L << Minus) | (1L << Greater) | (1L << Comma) | (1L << Tilde) | (1L << PseudoNot) | (1L << Integer) | (1L << Number) | (1L << String_) | (1L << PrefixMatch) | (1L << SuffixMatch) | (1L << SubstringMatch) | (1L << FontFace) | (1L << Supports) | (1L << Or) | (1L << Keyframes) | (1L << From) | (1L << To) | (1L << Calc) | (1L << Viewport) | (1L << CounterStyle) | (1L << FontFeatureValues) | (1L << DxImageTransform) | (1L << AtKeyword) | (1L << Variable))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (Var - 64)) | (1L << (Ident - 64)) | (1L << (Function_ - 64)) | (1L << (UnexpectedCharacter - 64)) | (1L << (Name - 64)))) != 0)) {
					{
					{
					State = 201;
					_la = TokenStream.LA(1);
					if ( _la <= 0 || (_la==Quote) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					State = 206;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 207;
				Match(Quote);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TextMatchStyleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Tilde() { return GetToken(XCSSParser.Tilde, 0); }
		public TextMatchStyleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_textMatchStyle; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IXCSSParserListener typedListener = listener as IXCSSParserListener;
			if (typedListener != null) typedListener.EnterTextMatchStyle(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IXCSSParserListener typedListener = listener as IXCSSParserListener;
			if (typedListener != null) typedListener.ExitTextMatchStyle(this);
		}
	}

	[RuleVersion(0)]
	public TextMatchStyleContext textMatchStyle() {
		TextMatchStyleContext _localctx = new TextMatchStyleContext(Context, State);
		EnterRule(_localctx, 40, RULE_textMatchStyle);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 210;
			Match(Tilde);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttribContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public WsContext[] ws() {
			return GetRuleContexts<WsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WsContext ws(int i) {
			return GetRuleContext<WsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttribNameContext attribName() {
			return GetRuleContext<AttribNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttribMatchStyleContext attribMatchStyle() {
			return GetRuleContext<AttribMatchStyleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttribValueContext attribValue() {
			return GetRuleContext<AttribValueContext>(0);
		}
		public AttribContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attrib; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IXCSSParserListener typedListener = listener as IXCSSParserListener;
			if (typedListener != null) typedListener.EnterAttrib(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IXCSSParserListener typedListener = listener as IXCSSParserListener;
			if (typedListener != null) typedListener.ExitAttrib(this);
		}
	}

	[RuleVersion(0)]
	public AttribContext attrib() {
		AttribContext _localctx = new AttribContext(Context, State);
		EnterRule(_localctx, 42, RULE_attrib);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 212;
			ws();
			State = 214;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 11)) & ~0x3f) == 0 && ((1L << (_la - 11)) & ((1L << (Multiply - 11)) | (1L << (Pipe - 11)) | (1L << (MediaOnly - 11)) | (1L << (Not - 11)) | (1L << (And - 11)) | (1L << (Or - 11)) | (1L << (From - 11)) | (1L << (To - 11)) | (1L << (Ident - 11)))) != 0)) {
				{
				State = 213;
				attribName();
				}
			}

			State = 216;
			ws();
			State = 222;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Equal) | (1L << Includes) | (1L << DashMatch) | (1L << PrefixMatch) | (1L << SuffixMatch) | (1L << SubstringMatch))) != 0)) {
				{
				State = 217;
				attribMatchStyle();
				State = 218;
				ws();
				State = 219;
				attribValue();
				State = 220;
				ws();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttribNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeNamespacePrefixContext typeNamespacePrefix() {
			return GetRuleContext<TypeNamespacePrefixContext>(0);
		}
		public AttribNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IXCSSParserListener typedListener = listener as IXCSSParserListener;
			if (typedListener != null) typedListener.EnterAttribName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IXCSSParserListener typedListener = listener as IXCSSParserListener;
			if (typedListener != null) typedListener.ExitAttribName(this);
		}
	}

	[RuleVersion(0)]
	public AttribNameContext attribName() {
		AttribNameContext _localctx = new AttribNameContext(Context, State);
		EnterRule(_localctx, 44, RULE_attribName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 225;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				{
				State = 224;
				typeNamespacePrefix();
				}
				break;
			}
			State = 227;
			ident();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttribMatchStyleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PrefixMatch() { return GetToken(XCSSParser.PrefixMatch, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SuffixMatch() { return GetToken(XCSSParser.SuffixMatch, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SubstringMatch() { return GetToken(XCSSParser.SubstringMatch, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equal() { return GetToken(XCSSParser.Equal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Includes() { return GetToken(XCSSParser.Includes, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DashMatch() { return GetToken(XCSSParser.DashMatch, 0); }
		public AttribMatchStyleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribMatchStyle; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IXCSSParserListener typedListener = listener as IXCSSParserListener;
			if (typedListener != null) typedListener.EnterAttribMatchStyle(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IXCSSParserListener typedListener = listener as IXCSSParserListener;
			if (typedListener != null) typedListener.ExitAttribMatchStyle(this);
		}
	}

	[RuleVersion(0)]
	public AttribMatchStyleContext attribMatchStyle() {
		AttribMatchStyleContext _localctx = new AttribMatchStyleContext(Context, State);
		EnterRule(_localctx, 46, RULE_attribMatchStyle);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 229;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Equal) | (1L << Includes) | (1L << DashMatch) | (1L << PrefixMatch) | (1L << SuffixMatch) | (1L << SubstringMatch))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttribValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String_() { return GetToken(XCSSParser.String_, 0); }
		public AttribValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IXCSSParserListener typedListener = listener as IXCSSParserListener;
			if (typedListener != null) typedListener.EnterAttribValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IXCSSParserListener typedListener = listener as IXCSSParserListener;
			if (typedListener != null) typedListener.ExitAttribValue(this);
		}
	}

	[RuleVersion(0)]
	public AttribValueContext attribValue() {
		AttribValueContext _localctx = new AttribValueContext(Context, State);
		EnterRule(_localctx, 48, RULE_attribValue);
		try {
			State = 233;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MediaOnly:
			case Not:
			case And:
			case Or:
			case From:
			case To:
			case Ident:
				EnterOuterAlt(_localctx, 1);
				{
				State = 231;
				ident();
				}
				break;
			case String_:
				EnterOuterAlt(_localctx, 2);
				{
				State = 232;
				Match(String_);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PseudoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Colon() { return GetTokens(XCSSParser.Colon); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon(int i) {
			return GetToken(XCSSParser.Colon, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionalPseudoContext functionalPseudo() {
			return GetRuleContext<FunctionalPseudoContext>(0);
		}
		public PseudoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pseudo; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IXCSSParserListener typedListener = listener as IXCSSParserListener;
			if (typedListener != null) typedListener.EnterPseudo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IXCSSParserListener typedListener = listener as IXCSSParserListener;
			if (typedListener != null) typedListener.ExitPseudo(this);
		}
	}

	[RuleVersion(0)]
	public PseudoContext pseudo() {
		PseudoContext _localctx = new PseudoContext(Context, State);
		EnterRule(_localctx, 50, RULE_pseudo);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 235;
			Match(Colon);
			State = 237;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Colon) {
				{
				State = 236;
				Match(Colon);
				}
			}

			State = 241;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MediaOnly:
			case Not:
			case And:
			case Or:
			case From:
			case To:
			case Ident:
				{
				State = 239;
				ident();
				}
				break;
			case Function_:
				{
				State = 240;
				functionalPseudo();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionalPseudoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Function_() { return GetToken(XCSSParser.Function_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WsContext ws() {
			return GetRuleContext<WsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(XCSSParser.CloseParen, 0); }
		public FunctionalPseudoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionalPseudo; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IXCSSParserListener typedListener = listener as IXCSSParserListener;
			if (typedListener != null) typedListener.EnterFunctionalPseudo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IXCSSParserListener typedListener = listener as IXCSSParserListener;
			if (typedListener != null) typedListener.ExitFunctionalPseudo(this);
		}
	}

	[RuleVersion(0)]
	public FunctionalPseudoContext functionalPseudo() {
		FunctionalPseudoContext _localctx = new FunctionalPseudoContext(Context, State);
		EnterRule(_localctx, 52, RULE_functionalPseudo);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 243;
			Match(Function_);
			State = 244;
			ws();
			State = 245;
			expression();
			State = 246;
			Match(CloseParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public WsContext[] ws() {
			return GetRuleContexts<WsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WsContext ws(int i) {
			return GetRuleContext<WsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Plus() { return GetTokens(XCSSParser.Plus); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus(int i) {
			return GetToken(XCSSParser.Plus, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Minus() { return GetTokens(XCSSParser.Minus); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus(int i) {
			return GetToken(XCSSParser.Minus, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Dimension() { return GetTokens(XCSSParser.Dimension); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Dimension(int i) {
			return GetToken(XCSSParser.Dimension, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] UnknownDimension() { return GetTokens(XCSSParser.UnknownDimension); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UnknownDimension(int i) {
			return GetToken(XCSSParser.UnknownDimension, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Number() { return GetTokens(XCSSParser.Number); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Number(int i) {
			return GetToken(XCSSParser.Number, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] String_() { return GetTokens(XCSSParser.String_); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String_(int i) {
			return GetToken(XCSSParser.String_, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext[] ident() {
			return GetRuleContexts<IdentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident(int i) {
			return GetRuleContext<IdentContext>(i);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IXCSSParserListener typedListener = listener as IXCSSParserListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IXCSSParserListener typedListener = listener as IXCSSParserListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 54, RULE_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 258;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 255;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Plus:
					{
					State = 248;
					Match(Plus);
					}
					break;
				case Minus:
					{
					State = 249;
					Match(Minus);
					}
					break;
				case Dimension:
					{
					State = 250;
					Match(Dimension);
					}
					break;
				case UnknownDimension:
					{
					State = 251;
					Match(UnknownDimension);
					}
					break;
				case Number:
					{
					State = 252;
					Match(Number);
					}
					break;
				case String_:
					{
					State = 253;
					Match(String_);
					}
					break;
				case MediaOnly:
				case Not:
				case And:
				case Or:
				case From:
				case To:
				case Ident:
					{
					State = 254;
					ident();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 257;
				ws();
				}
				}
				State = 260;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( ((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (MediaOnly - 34)) | (1L << (Not - 34)) | (1L << (And - 34)) | (1L << (Dimension - 34)) | (1L << (UnknownDimension - 34)) | (1L << (Plus - 34)) | (1L << (Minus - 34)) | (1L << (Number - 34)) | (1L << (String_ - 34)) | (1L << (Or - 34)) | (1L << (From - 34)) | (1L << (To - 34)) | (1L << (Ident - 34)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NegationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PseudoNot() { return GetToken(XCSSParser.PseudoNot, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WsContext[] ws() {
			return GetRuleContexts<WsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WsContext ws(int i) {
			return GetRuleContext<WsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NegationArgContext negationArg() {
			return GetRuleContext<NegationArgContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParen() { return GetToken(XCSSParser.CloseParen, 0); }
		public NegationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_negation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IXCSSParserListener typedListener = listener as IXCSSParserListener;
			if (typedListener != null) typedListener.EnterNegation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IXCSSParserListener typedListener = listener as IXCSSParserListener;
			if (typedListener != null) typedListener.ExitNegation(this);
		}
	}

	[RuleVersion(0)]
	public NegationContext negation() {
		NegationContext _localctx = new NegationContext(Context, State);
		EnterRule(_localctx, 56, RULE_negation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 262;
			Match(PseudoNot);
			State = 263;
			ws();
			State = 264;
			negationArg();
			State = 265;
			ws();
			State = 266;
			Match(CloseParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NegationArgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeSelectorContext typeSelector() {
			return GetRuleContext<TypeSelectorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UniversalContext universal() {
			return GetRuleContext<UniversalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElementIdContext elementId() {
			return GetRuleContext<ElementIdContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClassNameContext className() {
			return GetRuleContext<ClassNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttribContext attrib() {
			return GetRuleContext<AttribContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PseudoContext pseudo() {
			return GetRuleContext<PseudoContext>(0);
		}
		public NegationArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_negationArg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IXCSSParserListener typedListener = listener as IXCSSParserListener;
			if (typedListener != null) typedListener.EnterNegationArg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IXCSSParserListener typedListener = listener as IXCSSParserListener;
			if (typedListener != null) typedListener.ExitNegationArg(this);
		}
	}

	[RuleVersion(0)]
	public NegationArgContext negationArg() {
		NegationArgContext _localctx = new NegationArgContext(Context, State);
		EnterRule(_localctx, 58, RULE_negationArg);
		try {
			State = 274;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 268;
				typeSelector();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 269;
				universal();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 270;
				elementId();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 271;
				className();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 272;
				attrib();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 273;
				pseudo();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ident() { return GetToken(XCSSParser.Ident, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MediaOnly() { return GetToken(XCSSParser.MediaOnly, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Not() { return GetToken(XCSSParser.Not, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode And() { return GetToken(XCSSParser.And, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Or() { return GetToken(XCSSParser.Or, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode From() { return GetToken(XCSSParser.From, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode To() { return GetToken(XCSSParser.To, 0); }
		public IdentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ident; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IXCSSParserListener typedListener = listener as IXCSSParserListener;
			if (typedListener != null) typedListener.EnterIdent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IXCSSParserListener typedListener = listener as IXCSSParserListener;
			if (typedListener != null) typedListener.ExitIdent(this);
		}
	}

	[RuleVersion(0)]
	public IdentContext ident() {
		IdentContext _localctx = new IdentContext(Context, State);
		EnterRule(_localctx, 60, RULE_ident);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 276;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (MediaOnly - 34)) | (1L << (Not - 34)) | (1L << (And - 34)) | (1L << (Or - 34)) | (1L << (From - 34)) | (1L << (To - 34)) | (1L << (Ident - 34)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comment() { return GetTokens(XCSSParser.Comment); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comment(int i) {
			return GetToken(XCSSParser.Comment, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Space() { return GetTokens(XCSSParser.Space); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Space(int i) {
			return GetToken(XCSSParser.Space, i);
		}
		public WsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ws; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IXCSSParserListener typedListener = listener as IXCSSParserListener;
			if (typedListener != null) typedListener.EnterWs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IXCSSParserListener typedListener = listener as IXCSSParserListener;
			if (typedListener != null) typedListener.ExitWs(this);
		}
	}

	[RuleVersion(0)]
	public WsContext ws() {
		WsContext _localctx = new WsContext(Context, State);
		EnterRule(_localctx, 62, RULE_ws);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 281;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,30,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 278;
					_la = TokenStream.LA(1);
					if ( !(_la==Comment || _la==Space) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					} 
				}
				State = 283;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,30,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x46', '\x11F', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\a', '\x3', 'K', '\n', '\x3', '\f', '\x3', '\xE', '\x3', 'N', 
		'\v', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\a', '\x4', 'V', '\n', '\x4', '\f', '\x4', '\xE', 
		'\x4', 'Y', '\v', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', 
		'\x5', '\x63', '\n', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\a', '\x6', 'k', '\n', '\x6', 
		'\f', '\x6', '\xE', '\x6', 'n', '\v', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x6', '\x6', 'u', '\n', '\x6', 
		'\r', '\x6', '\xE', '\x6', 'v', '\x5', '\x6', 'y', '\n', '\x6', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\t', 
		'\x3', '\t', '\x5', '\t', '\x82', '\n', '\t', '\x3', '\n', '\x5', '\n', 
		'\x85', '\n', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', 
		'\x5', '\v', '\x8B', '\n', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\f', 
		'\x3', '\f', '\x3', '\r', '\x5', '\r', '\x92', '\n', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x5', 
		'\x10', '\x9F', '\n', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x5', '\x10', '\xA4', '\n', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x11', '\a', '\x11', '\xA9', '\n', '\x11', '\f', '\x11', '\xE', '\x11', 
		'\xAC', '\v', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x5', '\x11', '\xB2', '\n', '\x11', '\x3', '\x11', '\a', '\x11', 
		'\xB5', '\n', '\x11', '\f', '\x11', '\xE', '\x11', '\xB8', '\v', '\x11', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x14', 
		'\x5', '\x14', '\xBF', '\n', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x15', '\x3', '\x15', '\a', '\x15', '\xC5', '\n', '\x15', '\f', '\x15', 
		'\xE', '\x15', '\xC8', '\v', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x15', '\a', '\x15', '\xCD', '\n', '\x15', '\f', '\x15', '\xE', '\x15', 
		'\xD0', '\v', '\x15', '\x3', '\x15', '\x5', '\x15', '\xD3', '\n', '\x15', 
		'\x3', '\x16', '\x3', '\x16', '\x3', '\x17', '\x3', '\x17', '\x5', '\x17', 
		'\xD9', '\n', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x5', '\x17', '\xE1', '\n', '\x17', 
		'\x3', '\x18', '\x5', '\x18', '\xE4', '\n', '\x18', '\x3', '\x18', '\x3', 
		'\x18', '\x3', '\x19', '\x3', '\x19', '\x3', '\x1A', '\x3', '\x1A', '\x5', 
		'\x1A', '\xEC', '\n', '\x1A', '\x3', '\x1B', '\x3', '\x1B', '\x5', '\x1B', 
		'\xF0', '\n', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x5', '\x1B', '\xF4', 
		'\n', '\x1B', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', 
		'\x3', '\x1C', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', 
		'\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x5', '\x1D', '\x102', '\n', 
		'\x1D', '\x3', '\x1D', '\x6', '\x1D', '\x105', '\n', '\x1D', '\r', '\x1D', 
		'\xE', '\x1D', '\x106', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', 
		'\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1F', '\x3', '\x1F', '\x3', 
		'\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x5', '\x1F', '\x115', 
		'\n', '\x1F', '\x3', ' ', '\x3', ' ', '\x3', '!', '\a', '!', '\x11A', 
		'\n', '!', '\f', '!', '\xE', '!', '\x11D', '\v', '!', '\x3', '!', '\x2', 
		'\x2', '\"', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', 
		'\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', 
		'*', ',', '.', '\x30', '\x32', '\x34', '\x36', '\x38', ':', '<', '>', 
		'@', '\x2', '\t', '\x3', '\x2', '\x3', '\x3', '\x3', '\x2', '\x4', '\x4', 
		'\x3', '\x2', '\x12', '\x12', '\x3', '\x2', '\x11', '\x11', '\x5', '\x2', 
		'\n', '\n', '\x18', '\x19', '\x32', '\x34', '\x6', '\x2', '$', '&', '\x37', 
		'\x37', '\x39', ':', '\x43', '\x43', '\x4', '\x2', '\x13', '\x13', '\x15', 
		'\x15', '\x2', '\x132', '\x2', '\x42', '\x3', '\x2', '\x2', '\x2', '\x4', 
		'\x45', '\x3', '\x2', '\x2', '\x2', '\x6', 'O', '\x3', '\x2', '\x2', '\x2', 
		'\b', '\x62', '\x3', '\x2', '\x2', '\x2', '\n', 'x', '\x3', '\x2', '\x2', 
		'\x2', '\f', 'z', '\x3', '\x2', '\x2', '\x2', '\xE', '}', '\x3', '\x2', 
		'\x2', '\x2', '\x10', '\x81', '\x3', '\x2', '\x2', '\x2', '\x12', '\x84', 
		'\x3', '\x2', '\x2', '\x2', '\x14', '\x8A', '\x3', '\x2', '\x2', '\x2', 
		'\x16', '\x8E', '\x3', '\x2', '\x2', '\x2', '\x18', '\x91', '\x3', '\x2', 
		'\x2', '\x2', '\x1A', '\x95', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x98', 
		'\x3', '\x2', '\x2', '\x2', '\x1E', '\x9A', '\x3', '\x2', '\x2', '\x2', 
		' ', '\xAA', '\x3', '\x2', '\x2', '\x2', '\"', '\xB9', '\x3', '\x2', '\x2', 
		'\x2', '$', '\xBB', '\x3', '\x2', '\x2', '\x2', '&', '\xBE', '\x3', '\x2', 
		'\x2', '\x2', '(', '\xD2', '\x3', '\x2', '\x2', '\x2', '*', '\xD4', '\x3', 
		'\x2', '\x2', '\x2', ',', '\xD6', '\x3', '\x2', '\x2', '\x2', '.', '\xE3', 
		'\x3', '\x2', '\x2', '\x2', '\x30', '\xE7', '\x3', '\x2', '\x2', '\x2', 
		'\x32', '\xEB', '\x3', '\x2', '\x2', '\x2', '\x34', '\xED', '\x3', '\x2', 
		'\x2', '\x2', '\x36', '\xF5', '\x3', '\x2', '\x2', '\x2', '\x38', '\x104', 
		'\x3', '\x2', '\x2', '\x2', ':', '\x108', '\x3', '\x2', '\x2', '\x2', 
		'<', '\x114', '\x3', '\x2', '\x2', '\x2', '>', '\x116', '\x3', '\x2', 
		'\x2', '\x2', '@', '\x11B', '\x3', '\x2', '\x2', '\x2', '\x42', '\x43', 
		'\x5', '\x4', '\x3', '\x2', '\x43', '\x44', '\a', '\x2', '\x2', '\x3', 
		'\x44', '\x3', '\x3', '\x2', '\x2', '\x2', '\x45', 'L', '\x5', '\x6', 
		'\x4', '\x2', '\x46', 'G', '\a', ',', '\x2', '\x2', 'G', 'H', '\x5', '@', 
		'!', '\x2', 'H', 'I', '\x5', '\x6', '\x4', '\x2', 'I', 'K', '\x3', '\x2', 
		'\x2', '\x2', 'J', '\x46', '\x3', '\x2', '\x2', '\x2', 'K', 'N', '\x3', 
		'\x2', '\x2', '\x2', 'L', 'J', '\x3', '\x2', '\x2', '\x2', 'L', 'M', '\x3', 
		'\x2', '\x2', '\x2', 'M', '\x5', '\x3', '\x2', '\x2', '\x2', 'N', 'L', 
		'\x3', '\x2', '\x2', '\x2', 'O', 'P', '\x5', '\n', '\x6', '\x2', 'P', 
		'W', '\x5', '@', '!', '\x2', 'Q', 'R', '\x5', '\b', '\x5', '\x2', 'R', 
		'S', '\x5', '\n', '\x6', '\x2', 'S', 'T', '\x5', '@', '!', '\x2', 'T', 
		'V', '\x3', '\x2', '\x2', '\x2', 'U', 'Q', '\x3', '\x2', '\x2', '\x2', 
		'V', 'Y', '\x3', '\x2', '\x2', '\x2', 'W', 'U', '\x3', '\x2', '\x2', '\x2', 
		'W', 'X', '\x3', '\x2', '\x2', '\x2', 'X', '\a', '\x3', '\x2', '\x2', 
		'\x2', 'Y', 'W', '\x3', '\x2', '\x2', '\x2', 'Z', '[', '\a', ')', '\x2', 
		'\x2', '[', '\x63', '\x5', '@', '!', '\x2', '\\', ']', '\a', '+', '\x2', 
		'\x2', ']', '\x63', '\x5', '@', '!', '\x2', '^', '_', '\a', '-', '\x2', 
		'\x2', '_', '\x63', '\x5', '@', '!', '\x2', '`', '\x61', '\a', '\x15', 
		'\x2', '\x2', '\x61', '\x63', '\x5', '@', '!', '\x2', '\x62', 'Z', '\x3', 
		'\x2', '\x2', '\x2', '\x62', '\\', '\x3', '\x2', '\x2', '\x2', '\x62', 
		'^', '\x3', '\x2', '\x2', '\x2', '\x62', '`', '\x3', '\x2', '\x2', '\x2', 
		'\x63', '\t', '\x3', '\x2', '\x2', '\x2', '\x64', 'l', '\x5', '\x10', 
		'\t', '\x2', '\x65', 'k', '\x5', '\f', '\a', '\x2', '\x66', 'k', '\x5', 
		'\x1A', '\xE', '\x2', 'g', 'k', '\x5', '\x1E', '\x10', '\x2', 'h', 'k', 
		'\x5', '\x34', '\x1B', '\x2', 'i', 'k', '\x5', ':', '\x1E', '\x2', 'j', 
		'\x65', '\x3', '\x2', '\x2', '\x2', 'j', '\x66', '\x3', '\x2', '\x2', 
		'\x2', 'j', 'g', '\x3', '\x2', '\x2', '\x2', 'j', 'h', '\x3', '\x2', '\x2', 
		'\x2', 'j', 'i', '\x3', '\x2', '\x2', '\x2', 'k', 'n', '\x3', '\x2', '\x2', 
		'\x2', 'l', 'j', '\x3', '\x2', '\x2', '\x2', 'l', 'm', '\x3', '\x2', '\x2', 
		'\x2', 'm', 'y', '\x3', '\x2', '\x2', '\x2', 'n', 'l', '\x3', '\x2', '\x2', 
		'\x2', 'o', 'u', '\x5', '\f', '\a', '\x2', 'p', 'u', '\x5', '\x1A', '\xE', 
		'\x2', 'q', 'u', '\x5', '\x1E', '\x10', '\x2', 'r', 'u', '\x5', '\x34', 
		'\x1B', '\x2', 's', 'u', '\x5', ':', '\x1E', '\x2', 't', 'o', '\x3', '\x2', 
		'\x2', '\x2', 't', 'p', '\x3', '\x2', '\x2', '\x2', 't', 'q', '\x3', '\x2', 
		'\x2', '\x2', 't', 'r', '\x3', '\x2', '\x2', '\x2', 't', 's', '\x3', '\x2', 
		'\x2', '\x2', 'u', 'v', '\x3', '\x2', '\x2', '\x2', 'v', 't', '\x3', '\x2', 
		'\x2', '\x2', 'v', 'w', '\x3', '\x2', '\x2', '\x2', 'w', 'y', '\x3', '\x2', 
		'\x2', '\x2', 'x', '\x64', '\x3', '\x2', '\x2', '\x2', 'x', 't', '\x3', 
		'\x2', '\x2', '\x2', 'y', '\v', '\x3', '\x2', '\x2', '\x2', 'z', '{', 
		'\a', '\x1A', '\x2', '\x2', '{', '|', '\x5', '\xE', '\b', '\x2', '|', 
		'\r', '\x3', '\x2', '\x2', '\x2', '}', '~', '\a', '\x46', '\x2', '\x2', 
		'~', '\xF', '\x3', '\x2', '\x2', '\x2', '\x7F', '\x82', '\x5', '\x12', 
		'\n', '\x2', '\x80', '\x82', '\x5', '\x18', '\r', '\x2', '\x81', '\x7F', 
		'\x3', '\x2', '\x2', '\x2', '\x81', '\x80', '\x3', '\x2', '\x2', '\x2', 
		'\x82', '\x11', '\x3', '\x2', '\x2', '\x2', '\x83', '\x85', '\x5', '\x14', 
		'\v', '\x2', '\x84', '\x83', '\x3', '\x2', '\x2', '\x2', '\x84', '\x85', 
		'\x3', '\x2', '\x2', '\x2', '\x85', '\x86', '\x3', '\x2', '\x2', '\x2', 
		'\x86', '\x87', '\x5', '\x16', '\f', '\x2', '\x87', '\x13', '\x3', '\x2', 
		'\x2', '\x2', '\x88', '\x8B', '\x5', '>', ' ', '\x2', '\x89', '\x8B', 
		'\a', '\r', '\x2', '\x2', '\x8A', '\x88', '\x3', '\x2', '\x2', '\x2', 
		'\x8A', '\x89', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x8B', '\x3', '\x2', 
		'\x2', '\x2', '\x8B', '\x8C', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x8D', 
		'\a', '\xF', '\x2', '\x2', '\x8D', '\x15', '\x3', '\x2', '\x2', '\x2', 
		'\x8E', '\x8F', '\x5', '>', ' ', '\x2', '\x8F', '\x17', '\x3', '\x2', 
		'\x2', '\x2', '\x90', '\x92', '\x5', '\x14', '\v', '\x2', '\x91', '\x90', 
		'\x3', '\x2', '\x2', '\x2', '\x91', '\x92', '\x3', '\x2', '\x2', '\x2', 
		'\x92', '\x93', '\x3', '\x2', '\x2', '\x2', '\x93', '\x94', '\a', '\r', 
		'\x2', '\x2', '\x94', '\x19', '\x3', '\x2', '\x2', '\x2', '\x95', '\x96', 
		'\a', '\f', '\x2', '\x2', '\x96', '\x97', '\x5', '\x1C', '\xF', '\x2', 
		'\x97', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x98', '\x99', '\x5', '>', 
		' ', '\x2', '\x99', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x9A', '\xA3', 
		'\a', '\x3', '\x2', '\x2', '\x9B', '\xA4', '\x5', ',', '\x17', '\x2', 
		'\x9C', '\xA4', '\x5', '&', '\x14', '\x2', '\x9D', '\x9F', '\x5', '\b', 
		'\x5', '\x2', '\x9E', '\x9D', '\x3', '\x2', '\x2', '\x2', '\x9E', '\x9F', 
		'\x3', '\x2', '\x2', '\x2', '\x9F', '\xA0', '\x3', '\x2', '\x2', '\x2', 
		'\xA0', '\xA4', '\x5', '$', '\x13', '\x2', '\xA1', '\xA4', '\x5', '\"', 
		'\x12', '\x2', '\xA2', '\xA4', '\x5', ' ', '\x11', '\x2', '\xA3', '\x9B', 
		'\x3', '\x2', '\x2', '\x2', '\xA3', '\x9C', '\x3', '\x2', '\x2', '\x2', 
		'\xA3', '\x9E', '\x3', '\x2', '\x2', '\x2', '\xA3', '\xA1', '\x3', '\x2', 
		'\x2', '\x2', '\xA3', '\xA2', '\x3', '\x2', '\x2', '\x2', '\xA4', '\xA5', 
		'\x3', '\x2', '\x2', '\x2', '\xA5', '\xA6', '\a', '\x4', '\x2', '\x2', 
		'\xA6', '\x1F', '\x3', '\x2', '\x2', '\x2', '\xA7', '\xA9', '\n', '\x2', 
		'\x2', '\x2', '\xA8', '\xA7', '\x3', '\x2', '\x2', '\x2', '\xA9', '\xAC', 
		'\x3', '\x2', '\x2', '\x2', '\xAA', '\xA8', '\x3', '\x2', '\x2', '\x2', 
		'\xAA', '\xAB', '\x3', '\x2', '\x2', '\x2', '\xAB', '\xB1', '\x3', '\x2', 
		'\x2', '\x2', '\xAC', '\xAA', '\x3', '\x2', '\x2', '\x2', '\xAD', '\xAE', 
		'\a', '\x3', '\x2', '\x2', '\xAE', '\xAF', '\x5', ' ', '\x11', '\x2', 
		'\xAF', '\xB0', '\a', '\x4', '\x2', '\x2', '\xB0', '\xB2', '\x3', '\x2', 
		'\x2', '\x2', '\xB1', '\xAD', '\x3', '\x2', '\x2', '\x2', '\xB1', '\xB2', 
		'\x3', '\x2', '\x2', '\x2', '\xB2', '\xB6', '\x3', '\x2', '\x2', '\x2', 
		'\xB3', '\xB5', '\n', '\x3', '\x2', '\x2', '\xB4', '\xB3', '\x3', '\x2', 
		'\x2', '\x2', '\xB5', '\xB8', '\x3', '\x2', '\x2', '\x2', '\xB6', '\xB4', 
		'\x3', '\x2', '\x2', '\x2', '\xB6', '\xB7', '\x3', '\x2', '\x2', '\x2', 
		'\xB7', '!', '\x3', '\x2', '\x2', '\x2', '\xB8', '\xB6', '\x3', '\x2', 
		'\x2', '\x2', '\xB9', '\xBA', '\a', '/', '\x2', '\x2', '\xBA', '#', '\x3', 
		'\x2', '\x2', '\x2', '\xBB', '\xBC', '\x5', '\x6', '\x4', '\x2', '\xBC', 
		'%', '\x3', '\x2', '\x2', '\x2', '\xBD', '\xBF', '\x5', '*', '\x16', '\x2', 
		'\xBE', '\xBD', '\x3', '\x2', '\x2', '\x2', '\xBE', '\xBF', '\x3', '\x2', 
		'\x2', '\x2', '\xBF', '\xC0', '\x3', '\x2', '\x2', '\x2', '\xC0', '\xC1', 
		'\x5', '(', '\x15', '\x2', '\xC1', '\'', '\x3', '\x2', '\x2', '\x2', '\xC2', 
		'\xC6', '\a', '\x12', '\x2', '\x2', '\xC3', '\xC5', '\n', '\x4', '\x2', 
		'\x2', '\xC4', '\xC3', '\x3', '\x2', '\x2', '\x2', '\xC5', '\xC8', '\x3', 
		'\x2', '\x2', '\x2', '\xC6', '\xC4', '\x3', '\x2', '\x2', '\x2', '\xC6', 
		'\xC7', '\x3', '\x2', '\x2', '\x2', '\xC7', '\xC9', '\x3', '\x2', '\x2', 
		'\x2', '\xC8', '\xC6', '\x3', '\x2', '\x2', '\x2', '\xC9', '\xD3', '\a', 
		'\x12', '\x2', '\x2', '\xCA', '\xCE', '\a', '\x11', '\x2', '\x2', '\xCB', 
		'\xCD', '\n', '\x5', '\x2', '\x2', '\xCC', '\xCB', '\x3', '\x2', '\x2', 
		'\x2', '\xCD', '\xD0', '\x3', '\x2', '\x2', '\x2', '\xCE', '\xCC', '\x3', 
		'\x2', '\x2', '\x2', '\xCE', '\xCF', '\x3', '\x2', '\x2', '\x2', '\xCF', 
		'\xD1', '\x3', '\x2', '\x2', '\x2', '\xD0', '\xCE', '\x3', '\x2', '\x2', 
		'\x2', '\xD1', '\xD3', '\a', '\x11', '\x2', '\x2', '\xD2', '\xC2', '\x3', 
		'\x2', '\x2', '\x2', '\xD2', '\xCA', '\x3', '\x2', '\x2', '\x2', '\xD3', 
		')', '\x3', '\x2', '\x2', '\x2', '\xD4', '\xD5', '\a', '-', '\x2', '\x2', 
		'\xD5', '+', '\x3', '\x2', '\x2', '\x2', '\xD6', '\xD8', '\x5', '@', '!', 
		'\x2', '\xD7', '\xD9', '\x5', '.', '\x18', '\x2', '\xD8', '\xD7', '\x3', 
		'\x2', '\x2', '\x2', '\xD8', '\xD9', '\x3', '\x2', '\x2', '\x2', '\xD9', 
		'\xDA', '\x3', '\x2', '\x2', '\x2', '\xDA', '\xE0', '\x5', '@', '!', '\x2', 
		'\xDB', '\xDC', '\x5', '\x30', '\x19', '\x2', '\xDC', '\xDD', '\x5', '@', 
		'!', '\x2', '\xDD', '\xDE', '\x5', '\x32', '\x1A', '\x2', '\xDE', '\xDF', 
		'\x5', '@', '!', '\x2', '\xDF', '\xE1', '\x3', '\x2', '\x2', '\x2', '\xE0', 
		'\xDB', '\x3', '\x2', '\x2', '\x2', '\xE0', '\xE1', '\x3', '\x2', '\x2', 
		'\x2', '\xE1', '-', '\x3', '\x2', '\x2', '\x2', '\xE2', '\xE4', '\x5', 
		'\x14', '\v', '\x2', '\xE3', '\xE2', '\x3', '\x2', '\x2', '\x2', '\xE3', 
		'\xE4', '\x3', '\x2', '\x2', '\x2', '\xE4', '\xE5', '\x3', '\x2', '\x2', 
		'\x2', '\xE5', '\xE6', '\x5', '>', ' ', '\x2', '\xE6', '/', '\x3', '\x2', 
		'\x2', '\x2', '\xE7', '\xE8', '\t', '\x6', '\x2', '\x2', '\xE8', '\x31', 
		'\x3', '\x2', '\x2', '\x2', '\xE9', '\xEC', '\x5', '>', ' ', '\x2', '\xEA', 
		'\xEC', '\a', '\x31', '\x2', '\x2', '\xEB', '\xE9', '\x3', '\x2', '\x2', 
		'\x2', '\xEB', '\xEA', '\x3', '\x2', '\x2', '\x2', '\xEC', '\x33', '\x3', 
		'\x2', '\x2', '\x2', '\xED', '\xEF', '\a', '\v', '\x2', '\x2', '\xEE', 
		'\xF0', '\a', '\v', '\x2', '\x2', '\xEF', '\xEE', '\x3', '\x2', '\x2', 
		'\x2', '\xEF', '\xF0', '\x3', '\x2', '\x2', '\x2', '\xF0', '\xF3', '\x3', 
		'\x2', '\x2', '\x2', '\xF1', '\xF4', '\x5', '>', ' ', '\x2', '\xF2', '\xF4', 
		'\x5', '\x36', '\x1C', '\x2', '\xF3', '\xF1', '\x3', '\x2', '\x2', '\x2', 
		'\xF3', '\xF2', '\x3', '\x2', '\x2', '\x2', '\xF4', '\x35', '\x3', '\x2', 
		'\x2', '\x2', '\xF5', '\xF6', '\a', '\x44', '\x2', '\x2', '\xF6', '\xF7', 
		'\x5', '@', '!', '\x2', '\xF7', '\xF8', '\x5', '\x38', '\x1D', '\x2', 
		'\xF8', '\xF9', '\a', '\x6', '\x2', '\x2', '\xF9', '\x37', '\x3', '\x2', 
		'\x2', '\x2', '\xFA', '\x102', '\a', ')', '\x2', '\x2', '\xFB', '\x102', 
		'\a', '*', '\x2', '\x2', '\xFC', '\x102', '\a', '\'', '\x2', '\x2', '\xFD', 
		'\x102', '\a', '(', '\x2', '\x2', '\xFE', '\x102', '\a', '\x30', '\x2', 
		'\x2', '\xFF', '\x102', '\a', '\x31', '\x2', '\x2', '\x100', '\x102', 
		'\x5', '>', ' ', '\x2', '\x101', '\xFA', '\x3', '\x2', '\x2', '\x2', '\x101', 
		'\xFB', '\x3', '\x2', '\x2', '\x2', '\x101', '\xFC', '\x3', '\x2', '\x2', 
		'\x2', '\x101', '\xFD', '\x3', '\x2', '\x2', '\x2', '\x101', '\xFE', '\x3', 
		'\x2', '\x2', '\x2', '\x101', '\xFF', '\x3', '\x2', '\x2', '\x2', '\x101', 
		'\x100', '\x3', '\x2', '\x2', '\x2', '\x102', '\x103', '\x3', '\x2', '\x2', 
		'\x2', '\x103', '\x105', '\x5', '@', '!', '\x2', '\x104', '\x101', '\x3', 
		'\x2', '\x2', '\x2', '\x105', '\x106', '\x3', '\x2', '\x2', '\x2', '\x106', 
		'\x104', '\x3', '\x2', '\x2', '\x2', '\x106', '\x107', '\x3', '\x2', '\x2', 
		'\x2', '\x107', '\x39', '\x3', '\x2', '\x2', '\x2', '\x108', '\x109', 
		'\a', '.', '\x2', '\x2', '\x109', '\x10A', '\x5', '@', '!', '\x2', '\x10A', 
		'\x10B', '\x5', '<', '\x1F', '\x2', '\x10B', '\x10C', '\x5', '@', '!', 
		'\x2', '\x10C', '\x10D', '\a', '\x6', '\x2', '\x2', '\x10D', ';', '\x3', 
		'\x2', '\x2', '\x2', '\x10E', '\x115', '\x5', '\x12', '\n', '\x2', '\x10F', 
		'\x115', '\x5', '\x18', '\r', '\x2', '\x110', '\x115', '\x5', '\f', '\a', 
		'\x2', '\x111', '\x115', '\x5', '\x1A', '\xE', '\x2', '\x112', '\x115', 
		'\x5', ',', '\x17', '\x2', '\x113', '\x115', '\x5', '\x34', '\x1B', '\x2', 
		'\x114', '\x10E', '\x3', '\x2', '\x2', '\x2', '\x114', '\x10F', '\x3', 
		'\x2', '\x2', '\x2', '\x114', '\x110', '\x3', '\x2', '\x2', '\x2', '\x114', 
		'\x111', '\x3', '\x2', '\x2', '\x2', '\x114', '\x112', '\x3', '\x2', '\x2', 
		'\x2', '\x114', '\x113', '\x3', '\x2', '\x2', '\x2', '\x115', '=', '\x3', 
		'\x2', '\x2', '\x2', '\x116', '\x117', '\t', '\a', '\x2', '\x2', '\x117', 
		'?', '\x3', '\x2', '\x2', '\x2', '\x118', '\x11A', '\t', '\b', '\x2', 
		'\x2', '\x119', '\x118', '\x3', '\x2', '\x2', '\x2', '\x11A', '\x11D', 
		'\x3', '\x2', '\x2', '\x2', '\x11B', '\x119', '\x3', '\x2', '\x2', '\x2', 
		'\x11B', '\x11C', '\x3', '\x2', '\x2', '\x2', '\x11C', '\x41', '\x3', 
		'\x2', '\x2', '\x2', '\x11D', '\x11B', '\x3', '\x2', '\x2', '\x2', '!', 
		'L', 'W', '\x62', 'j', 'l', 't', 'v', 'x', '\x81', '\x84', '\x8A', '\x91', 
		'\x9E', '\xA3', '\xAA', '\xB1', '\xB6', '\xBE', '\xC6', '\xCE', '\xD2', 
		'\xD8', '\xE0', '\xE3', '\xEB', '\xEF', '\xF3', '\x101', '\x106', '\x114', 
		'\x11B',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
